// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dft_dft_Pipeline_VITIS_LOOP_13_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sum_r_load,
        real_sample_address0,
        real_sample_ce0,
        real_sample_q0,
        trunc_ln18_1,
        p_out,
        p_out_ap_vld,
        grp_fu_246_p_din0,
        grp_fu_246_p_dout0,
        grp_fu_246_p_ce,
        grp_fu_249_p_din0,
        grp_fu_249_p_dout0,
        grp_fu_249_p_ce,
        grp_fu_252_p_din0,
        grp_fu_252_p_din1,
        grp_fu_252_p_opcode,
        grp_fu_252_p_dout0,
        grp_fu_252_p_ce,
        grp_fu_256_p_din0,
        grp_fu_256_p_din1,
        grp_fu_256_p_dout0,
        grp_fu_256_p_ce,
        grp_fu_260_p_din0,
        grp_fu_260_p_dout0,
        grp_fu_260_p_ce,
        grp_sin_or_cos_double_s_fu_263_p_din1,
        grp_sin_or_cos_double_s_fu_263_p_din2,
        grp_sin_or_cos_double_s_fu_263_p_dout0,
        grp_sin_or_cos_double_s_fu_263_p_start,
        grp_sin_or_cos_double_s_fu_263_p_ready,
        grp_sin_or_cos_double_s_fu_263_p_done,
        grp_sin_or_cos_double_s_fu_263_p_idle
);

parameter    ap_ST_fsm_pp0_stage0 = 11'd1;
parameter    ap_ST_fsm_pp0_stage1 = 11'd2;
parameter    ap_ST_fsm_pp0_stage2 = 11'd4;
parameter    ap_ST_fsm_pp0_stage3 = 11'd8;
parameter    ap_ST_fsm_pp0_stage4 = 11'd16;
parameter    ap_ST_fsm_pp0_stage5 = 11'd32;
parameter    ap_ST_fsm_pp0_stage6 = 11'd64;
parameter    ap_ST_fsm_pp0_stage7 = 11'd128;
parameter    ap_ST_fsm_pp0_stage8 = 11'd256;
parameter    ap_ST_fsm_pp0_stage9 = 11'd512;
parameter    ap_ST_fsm_pp0_stage10 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] sum_r_load;
output  [7:0] real_sample_address0;
output   real_sample_ce0;
input  [31:0] real_sample_q0;
input  [7:0] trunc_ln18_1;
output  [31:0] p_out;
output   p_out_ap_vld;
output  [63:0] grp_fu_246_p_din0;
input  [31:0] grp_fu_246_p_dout0;
output   grp_fu_246_p_ce;
output  [31:0] grp_fu_249_p_din0;
input  [63:0] grp_fu_249_p_dout0;
output   grp_fu_249_p_ce;
output  [63:0] grp_fu_252_p_din0;
output  [63:0] grp_fu_252_p_din1;
output  [1:0] grp_fu_252_p_opcode;
input  [63:0] grp_fu_252_p_dout0;
output   grp_fu_252_p_ce;
output  [63:0] grp_fu_256_p_din0;
output  [63:0] grp_fu_256_p_din1;
input  [63:0] grp_fu_256_p_dout0;
output   grp_fu_256_p_ce;
output  [31:0] grp_fu_260_p_din0;
input  [63:0] grp_fu_260_p_dout0;
output   grp_fu_260_p_ce;
output  [63:0] grp_sin_or_cos_double_s_fu_263_p_din1;
output  [0:0] grp_sin_or_cos_double_s_fu_263_p_din2;
input  [63:0] grp_sin_or_cos_double_s_fu_263_p_dout0;
output   grp_sin_or_cos_double_s_fu_263_p_start;
input   grp_sin_or_cos_double_s_fu_263_p_ready;
input   grp_sin_or_cos_double_s_fu_263_p_done;
input   grp_sin_or_cos_double_s_fu_263_p_idle;

reg ap_idle;
reg real_sample_ce0;
reg p_out_ap_vld;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_state11_pp0_stage10_iter0;
wire    ap_block_state22_pp0_stage10_iter1;
wire    ap_block_state33_pp0_stage10_iter2;
wire    ap_block_state44_pp0_stage10_iter3;
wire    ap_block_state55_pp0_stage10_iter4;
wire    ap_block_pp0_stage10_subdone;
reg   [0:0] icmp_ln13_reg_261;
reg    ap_condition_exit_pp0_iter0_stage10;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state12_pp0_stage0_iter1;
wire    ap_block_state23_pp0_stage0_iter2;
wire    ap_block_state34_pp0_stage0_iter3;
wire    ap_block_state45_pp0_stage0_iter4;
wire    ap_block_state56_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_11001;
reg   [8:0] n_reg_255;
reg   [8:0] n_reg_255_pp0_iter1_reg;
reg   [8:0] n_reg_255_pp0_iter2_reg;
wire   [0:0] icmp_ln13_fu_164_p2;
reg   [0:0] icmp_ln13_reg_261_pp0_iter1_reg;
reg   [0:0] icmp_ln13_reg_261_pp0_iter2_reg;
reg   [0:0] icmp_ln13_reg_261_pp0_iter3_reg;
wire   [31:0] zext_ln196_fu_185_p1;
reg   [63:0] x_assign_reg_270;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_state17_pp0_stage5_iter1;
wire    ap_block_state28_pp0_stage5_iter2;
wire    ap_block_state39_pp0_stage5_iter3;
wire    ap_block_state50_pp0_stage5_iter4;
wire    ap_block_pp0_stage5_11001;
wire   [0:0] icmp_ln14_fu_204_p2;
reg   [0:0] icmp_ln14_reg_275;
reg   [0:0] icmp_ln14_reg_275_pp0_iter4_reg;
reg   [31:0] real_sample_load_reg_285;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state13_pp0_stage1_iter1;
wire    ap_block_state24_pp0_stage1_iter2;
wire    ap_block_state35_pp0_stage1_iter3;
wire    ap_block_state46_pp0_stage1_iter4;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] bitcast_ln18_fu_209_p1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state14_pp0_stage2_iter1;
wire    ap_block_state25_pp0_stage2_iter2;
wire    ap_block_state36_pp0_stage2_iter3;
wire    ap_block_state47_pp0_stage2_iter4;
wire    ap_block_pp0_stage2_11001;
reg   [63:0] conv_reg_295;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state15_pp0_stage3_iter1;
wire    ap_block_state26_pp0_stage3_iter2;
wire    ap_block_state37_pp0_stage3_iter3;
wire    ap_block_state48_pp0_stage3_iter4;
wire    ap_block_pp0_stage3_11001;
reg   [63:0] tmp_reg_300;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_state18_pp0_stage6_iter1;
wire    ap_block_state29_pp0_stage6_iter2;
wire    ap_block_state40_pp0_stage6_iter3;
wire    ap_block_state51_pp0_stage6_iter4;
wire    ap_block_pp0_stage6_11001;
reg   [63:0] mul7_reg_310;
wire   [63:0] select_ln18_fu_217_p3;
reg   [63:0] select_ln18_reg_315;
reg   [63:0] add_reg_320;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_state10_pp0_stage9_iter0;
wire    ap_block_state21_pp0_stage9_iter1;
wire    ap_block_state32_pp0_stage9_iter2;
wire    ap_block_state43_pp0_stage9_iter3;
wire    ap_block_state54_pp0_stage9_iter4;
wire    ap_block_pp0_stage9_11001;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire    grp_sin_or_cos_double_s_fu_110_ap_ready;
reg    grp_sin_or_cos_double_s_fu_110_ap_start_reg;
wire    ap_block_pp0_stage6;
wire    ap_block_pp0_stage7;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage9;
wire    ap_block_pp0_stage10;
wire   [63:0] n_1_cast2_fu_200_p1;
wire    ap_block_pp0_stage0;
reg   [7:0] phi_mul_fu_66;
wire   [7:0] add_ln18_fu_179_p2;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_phi_mul_load;
reg   [31:0] empty_fu_70;
wire    ap_block_pp0_stage1;
reg   [8:0] n_1_fu_74;
wire   [8:0] add_ln13_fu_170_p2;
reg   [8:0] ap_sig_allocacmp_n;
wire    ap_block_pp0_stage0_01001;
reg   [31:0] grp_fu_132_p0;
wire    ap_block_pp0_stage2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
wire    ap_block_pp0_stage10_11001;
reg    ap_condition_exit_pp0_iter4_stage0;
reg    ap_idle_pp0_0to3;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [10:0] ap_NS_fsm;
reg    ap_idle_pp0_1to5;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state16_pp0_stage4_iter1;
wire    ap_block_state27_pp0_stage4_iter2;
wire    ap_block_state38_pp0_stage4_iter3;
wire    ap_block_state49_pp0_stage4_iter4;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_block_state19_pp0_stage7_iter1;
wire    ap_block_state30_pp0_stage7_iter2;
wire    ap_block_state41_pp0_stage7_iter3;
wire    ap_block_state52_pp0_stage7_iter4;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_state9_pp0_stage8_iter0;
wire    ap_block_state20_pp0_stage8_iter1;
wire    ap_block_state31_pp0_stage8_iter2;
wire    ap_block_state42_pp0_stage8_iter3;
wire    ap_block_state53_pp0_stage8_iter4;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage9_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_block_pp0_stage3_00001;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 grp_sin_or_cos_double_s_fu_110_ap_start_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

dft_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage10),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage10)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage10_subdone) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage10_subdone) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage10_subdone) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage10_subdone) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage10_subdone) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sin_or_cos_double_s_fu_110_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln13_reg_261 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            grp_sin_or_cos_double_s_fu_110_ap_start_reg <= 1'b1;
        end else if ((grp_sin_or_cos_double_s_fu_110_ap_ready == 1'b1)) begin
            grp_sin_or_cos_double_s_fu_110_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_fu_70 <= sum_r_load;
        end else if ((ap_enable_reg_pp0_iter5 == 1'b1)) begin
            empty_fu_70 <= grp_fu_246_p_dout0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln13_fu_164_p2 == 1'd0))) begin
            n_1_fu_74 <= add_ln13_fu_170_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            n_1_fu_74 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln13_fu_164_p2 == 1'd0))) begin
            phi_mul_fu_66 <= add_ln18_fu_179_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            phi_mul_fu_66 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        add_reg_320 <= grp_fu_252_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        conv_reg_295 <= grp_fu_249_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln13_reg_261 <= icmp_ln13_fu_164_p2;
        icmp_ln13_reg_261_pp0_iter1_reg <= icmp_ln13_reg_261;
        icmp_ln13_reg_261_pp0_iter2_reg <= icmp_ln13_reg_261_pp0_iter1_reg;
        icmp_ln13_reg_261_pp0_iter3_reg <= icmp_ln13_reg_261_pp0_iter2_reg;
        icmp_ln14_reg_275 <= icmp_ln14_fu_204_p2;
        icmp_ln14_reg_275_pp0_iter4_reg <= icmp_ln14_reg_275;
        n_reg_255 <= ap_sig_allocacmp_n;
        n_reg_255_pp0_iter1_reg <= n_reg_255;
        n_reg_255_pp0_iter2_reg <= n_reg_255_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        mul7_reg_310 <= grp_fu_256_p_dout0;
        select_ln18_reg_315 <= select_ln18_fu_217_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        real_sample_load_reg_285 <= real_sample_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        tmp_reg_300 <= grp_sin_or_cos_double_s_fu_263_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_reg_261 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        x_assign_reg_270 <= grp_fu_260_p_dout0;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_261 == 1'd1) & (1'b0 == ap_block_pp0_stage10_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        ap_condition_exit_pp0_iter0_stage10 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage10 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln13_reg_261_pp0_iter3_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter4_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter4_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to3 = 1'b1;
    end else begin
        ap_idle_pp0_0to3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to5 = 1'b1;
    end else begin
        ap_idle_pp0_1to5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage10_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_n = 9'd0;
    end else begin
        ap_sig_allocacmp_n = n_1_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_phi_mul_load = 8'd0;
    end else begin
        ap_sig_allocacmp_phi_mul_load = phi_mul_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_132_p0 = empty_fu_70;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_132_p0 = bitcast_ln18_fu_209_p1;
    end else begin
        grp_fu_132_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln13_reg_261_pp0_iter3_reg == 1'd1))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        real_sample_ce0 = 1'b1;
    end else begin
        real_sample_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to5 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_fu_170_p2 = (ap_sig_allocacmp_n + 9'd1);

assign add_ln18_fu_179_p2 = (ap_sig_allocacmp_phi_mul_load + trunc_ln18_1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage6_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage7_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage8_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage9_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage10_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage5_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage6_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage7_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage8_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage9_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage10_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage4_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage5_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage6_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage7_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage8_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage9_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage10_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage3_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage4_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage5_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage6_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage7_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage8_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage9_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage10_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage10;

assign bitcast_ln18_fu_209_p1 = real_sample_load_reg_285;

assign grp_fu_246_p_ce = 1'b1;

assign grp_fu_246_p_din0 = add_reg_320;

assign grp_fu_249_p_ce = 1'b1;

assign grp_fu_249_p_din0 = grp_fu_132_p0;

assign grp_fu_252_p_ce = 1'b1;

assign grp_fu_252_p_din0 = select_ln18_reg_315;

assign grp_fu_252_p_din1 = mul7_reg_310;

assign grp_fu_252_p_opcode = 2'd0;

assign grp_fu_256_p_ce = 1'b1;

assign grp_fu_256_p_din0 = conv_reg_295;

assign grp_fu_256_p_din1 = tmp_reg_300;

assign grp_fu_260_p_ce = 1'b1;

assign grp_fu_260_p_din0 = zext_ln196_fu_185_p1;

assign grp_sin_or_cos_double_s_fu_110_ap_ready = grp_sin_or_cos_double_s_fu_263_p_ready;

assign grp_sin_or_cos_double_s_fu_263_p_din1 = x_assign_reg_270;

assign grp_sin_or_cos_double_s_fu_263_p_din2 = 1'd1;

assign grp_sin_or_cos_double_s_fu_263_p_start = grp_sin_or_cos_double_s_fu_110_ap_start_reg;

assign icmp_ln13_fu_164_p2 = ((ap_sig_allocacmp_n == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_204_p2 = ((n_reg_255_pp0_iter2_reg == 9'd0) ? 1'b1 : 1'b0);

assign n_1_cast2_fu_200_p1 = n_reg_255_pp0_iter2_reg;

assign p_out = empty_fu_70;

assign real_sample_address0 = n_1_cast2_fu_200_p1;

assign select_ln18_fu_217_p3 = ((icmp_ln14_reg_275_pp0_iter4_reg[0:0] == 1'b1) ? 64'd0 : grp_fu_249_p_dout0);

assign zext_ln196_fu_185_p1 = ap_sig_allocacmp_phi_mul_load;

endmodule //dft_dft_Pipeline_VITIS_LOOP_13_2
