-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dft_dft_Pipeline_VITIS_LOOP_10_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sum_r_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    sum_r_ce0 : OUT STD_LOGIC;
    sum_r_we0 : OUT STD_LOGIC;
    sum_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    bitcast_ln14_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    add : IN STD_LOGIC_VECTOR (31 downto 0);
    bitcast_ln14_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    bitcast_ln14_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    bitcast_ln14_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    bitcast_ln14_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    bitcast_ln14_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    bitcast_ln14_7 : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_i_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    sum_i_ce0 : OUT STD_LOGIC;
    sum_i_we0 : OUT STD_LOGIC;
    sum_i_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    add1 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_166_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_166_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_166_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_166_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_166_p_ce : OUT STD_LOGIC;
    grp_fu_171_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_171_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_171_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_171_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_171_p_ce : OUT STD_LOGIC;
    grp_fu_176_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_176_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_176_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_176_p_ce : OUT STD_LOGIC );
end;


architecture behav of dft_dft_Pipeline_VITIS_LOOP_10_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter33 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter34 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter35 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter36 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter37 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter38 : BOOLEAN;
    signal ap_block_state40_pp0_stage0_iter39 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter40 : BOOLEAN;
    signal ap_block_state42_pp0_stage0_iter41 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln10_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal cos_coefficients_table_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal cos_coefficients_table_ce0 : STD_LOGIC;
    signal cos_coefficients_table_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cos_coefficients_table_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal cos_coefficients_table_ce1 : STD_LOGIC;
    signal cos_coefficients_table_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cos_coefficients_table_address2 : STD_LOGIC_VECTOR (2 downto 0);
    signal cos_coefficients_table_ce2 : STD_LOGIC;
    signal cos_coefficients_table_q2 : STD_LOGIC_VECTOR (31 downto 0);
    signal cos_coefficients_table_address3 : STD_LOGIC_VECTOR (2 downto 0);
    signal cos_coefficients_table_ce3 : STD_LOGIC;
    signal cos_coefficients_table_q3 : STD_LOGIC_VECTOR (31 downto 0);
    signal cos_coefficients_table_address4 : STD_LOGIC_VECTOR (2 downto 0);
    signal cos_coefficients_table_ce4 : STD_LOGIC;
    signal cos_coefficients_table_q4 : STD_LOGIC_VECTOR (31 downto 0);
    signal cos_coefficients_table_address5 : STD_LOGIC_VECTOR (2 downto 0);
    signal cos_coefficients_table_ce5 : STD_LOGIC;
    signal cos_coefficients_table_q5 : STD_LOGIC_VECTOR (31 downto 0);
    signal cos_coefficients_table_address6 : STD_LOGIC_VECTOR (2 downto 0);
    signal cos_coefficients_table_ce6 : STD_LOGIC;
    signal cos_coefficients_table_q6 : STD_LOGIC_VECTOR (31 downto 0);
    signal sin_coefficients_table_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sin_coefficients_table_ce0 : STD_LOGIC;
    signal sin_coefficients_table_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sin_coefficients_table_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sin_coefficients_table_ce1 : STD_LOGIC;
    signal sin_coefficients_table_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sin_coefficients_table_address2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sin_coefficients_table_ce2 : STD_LOGIC;
    signal sin_coefficients_table_q2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sin_coefficients_table_address3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sin_coefficients_table_ce3 : STD_LOGIC;
    signal sin_coefficients_table_q3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sin_coefficients_table_address4 : STD_LOGIC_VECTOR (2 downto 0);
    signal sin_coefficients_table_ce4 : STD_LOGIC;
    signal sin_coefficients_table_q4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sin_coefficients_table_address5 : STD_LOGIC_VECTOR (2 downto 0);
    signal sin_coefficients_table_ce5 : STD_LOGIC;
    signal sin_coefficients_table_q5 : STD_LOGIC_VECTOR (31 downto 0);
    signal sin_coefficients_table_address6 : STD_LOGIC_VECTOR (2 downto 0);
    signal sin_coefficients_table_ce6 : STD_LOGIC;
    signal sin_coefficients_table_q6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal k_1_reg_605 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter11_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter12_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter13_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter14_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter15_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter16_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter17_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter18_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter19_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter20_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter21_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter22_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter23_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter24_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter25_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter26_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter27_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter28_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter29_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter30_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter31_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter32_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter33_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter34_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter35_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter36_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter37_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter38_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter39_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_605_pp0_iter40_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_7_fu_450_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_7_reg_616 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_7_reg_616_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_7_reg_616_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_7_reg_616_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_7_reg_616_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_7_reg_616_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_7_reg_616_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_7_reg_616_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_7_reg_616_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_7_reg_616_pp0_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_7_reg_616_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_7_reg_616_pp0_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_7_reg_616_pp0_iter12_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_7_reg_616_pp0_iter13_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_7_reg_616_pp0_iter14_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_7_reg_616_pp0_iter15_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_7_reg_616_pp0_iter16_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_7_reg_616_pp0_iter17_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_7_reg_616_pp0_iter18_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_7_reg_616_pp0_iter19_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_7_reg_616_pp0_iter20_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_7_reg_616_pp0_iter21_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_7_reg_616_pp0_iter22_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_7_reg_616_pp0_iter23_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_7_reg_616_pp0_iter24_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_7_reg_616_pp0_iter25_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_7_reg_616_pp0_iter26_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_7_reg_616_pp0_iter27_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_7_reg_616_pp0_iter28_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_7_reg_616_pp0_iter29_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal cos_coefficients_table_load_reg_633 : STD_LOGIC_VECTOR (31 downto 0);
    signal sin_coefficients_table_load_reg_638 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul8_1_reg_643 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_468_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_reg_648 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_reg_648_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_reg_648_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_reg_648_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_reg_648_pp0_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_reg_648_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_reg_648_pp0_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_reg_648_pp0_iter12_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_reg_648_pp0_iter13_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_reg_648_pp0_iter14_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_reg_648_pp0_iter15_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_reg_648_pp0_iter16_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_reg_648_pp0_iter17_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_reg_648_pp0_iter18_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_reg_648_pp0_iter19_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_reg_648_pp0_iter20_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_reg_648_pp0_iter21_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_reg_648_pp0_iter22_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_reg_648_pp0_iter23_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_reg_648_pp0_iter24_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_378_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_1_reg_658 : STD_LOGIC_VECTOR (31 downto 0);
    signal cos_coefficients_table_load_1_reg_668 : STD_LOGIC_VECTOR (31 downto 0);
    signal sin_coefficients_table_load_1_reg_673 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_1_reg_678 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_382_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul8_2_reg_683 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln14_1_fu_485_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln14_1_reg_688 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln14_1_reg_688_pp0_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln14_1_reg_688_pp0_iter12_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln14_1_reg_688_pp0_iter13_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln14_1_reg_688_pp0_iter14_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln14_1_reg_688_pp0_iter15_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln14_1_reg_688_pp0_iter16_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln14_1_reg_688_pp0_iter17_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln14_1_reg_688_pp0_iter18_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln14_1_reg_688_pp0_iter19_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add1_1_reg_699 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_386_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_2_reg_704 : STD_LOGIC_VECTOR (31 downto 0);
    signal cos_coefficients_table_load_2_reg_714 : STD_LOGIC_VECTOR (31 downto 0);
    signal sin_coefficients_table_load_2_reg_719 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_326_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_2_reg_724 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_390_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul8_3_reg_729 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_330_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add1_2_reg_739 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_394_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_3_reg_744 : STD_LOGIC_VECTOR (31 downto 0);
    signal cos_coefficients_table_load_3_reg_754 : STD_LOGIC_VECTOR (31 downto 0);
    signal sin_coefficients_table_load_3_reg_759 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_334_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_3_reg_764 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_398_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul8_4_reg_769 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_338_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add1_3_reg_779 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_402_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_4_reg_784 : STD_LOGIC_VECTOR (31 downto 0);
    signal cos_coefficients_table_load_4_reg_794 : STD_LOGIC_VECTOR (31 downto 0);
    signal sin_coefficients_table_load_4_reg_799 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_342_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_4_reg_804 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_406_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul8_5_reg_809 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_346_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add1_4_reg_819 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_410_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_5_reg_824 : STD_LOGIC_VECTOR (31 downto 0);
    signal cos_coefficients_table_load_5_reg_834 : STD_LOGIC_VECTOR (31 downto 0);
    signal sin_coefficients_table_load_5_reg_839 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_350_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_5_reg_844 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_414_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul8_6_reg_849 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_354_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add1_5_reg_859 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_418_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_6_reg_864 : STD_LOGIC_VECTOR (31 downto 0);
    signal cos_coefficients_table_load_6_reg_874 : STD_LOGIC_VECTOR (31 downto 0);
    signal sin_coefficients_table_load_6_reg_879 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_358_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_6_reg_884 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_422_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul8_7_reg_889 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_362_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add1_6_reg_894 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_426_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_7_reg_899 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_366_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_7_reg_904 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_370_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add1_7_reg_909 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln14_fu_454_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln14_1_fu_476_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_2_fu_498_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_3_fu_504_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_4_fu_513_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_5_fu_524_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_6_fu_535_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_cast1_fu_541_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_fu_64 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln10_fu_444_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_k_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln14_fu_465_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln14_1_fu_482_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln14_fu_493_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln14_fu_509_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln14_1_fu_519_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln14_2_fu_530_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter31_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter32_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter33_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter34_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter35_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter36_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter37_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter38_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter39_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter40_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component dft_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dft_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dft_dft_Pipeline_VITIS_LOOP_10_1_cos_coefficients_table_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address2 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address3 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address4 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address5 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address6 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dft_dft_Pipeline_VITIS_LOOP_10_1_sin_coefficients_table_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address2 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address3 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address4 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address5 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address6 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dft_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    cos_coefficients_table_U : component dft_dft_Pipeline_VITIS_LOOP_10_1_cos_coefficients_table_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cos_coefficients_table_address0,
        ce0 => cos_coefficients_table_ce0,
        q0 => cos_coefficients_table_q0,
        address1 => cos_coefficients_table_address1,
        ce1 => cos_coefficients_table_ce1,
        q1 => cos_coefficients_table_q1,
        address2 => cos_coefficients_table_address2,
        ce2 => cos_coefficients_table_ce2,
        q2 => cos_coefficients_table_q2,
        address3 => cos_coefficients_table_address3,
        ce3 => cos_coefficients_table_ce3,
        q3 => cos_coefficients_table_q3,
        address4 => cos_coefficients_table_address4,
        ce4 => cos_coefficients_table_ce4,
        q4 => cos_coefficients_table_q4,
        address5 => cos_coefficients_table_address5,
        ce5 => cos_coefficients_table_ce5,
        q5 => cos_coefficients_table_q5,
        address6 => cos_coefficients_table_address6,
        ce6 => cos_coefficients_table_ce6,
        q6 => cos_coefficients_table_q6);

    sin_coefficients_table_U : component dft_dft_Pipeline_VITIS_LOOP_10_1_sin_coefficients_table_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sin_coefficients_table_address0,
        ce0 => sin_coefficients_table_ce0,
        q0 => sin_coefficients_table_q0,
        address1 => sin_coefficients_table_address1,
        ce1 => sin_coefficients_table_ce1,
        q1 => sin_coefficients_table_q1,
        address2 => sin_coefficients_table_address2,
        ce2 => sin_coefficients_table_ce2,
        q2 => sin_coefficients_table_q2,
        address3 => sin_coefficients_table_address3,
        ce3 => sin_coefficients_table_ce3,
        q3 => sin_coefficients_table_q3,
        address4 => sin_coefficients_table_address4,
        ce4 => sin_coefficients_table_ce4,
        q4 => sin_coefficients_table_q4,
        address5 => sin_coefficients_table_address5,
        ce5 => sin_coefficients_table_ce5,
        q5 => sin_coefficients_table_q5,
        address6 => sin_coefficients_table_address6,
        ce6 => sin_coefficients_table_ce6,
        q6 => sin_coefficients_table_q6);

    fadd_32ns_32ns_32_5_full_dsp_1_U3 : component dft_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_1_reg_678,
        din1 => mul8_2_reg_683,
        ce => ap_const_logic_1,
        dout => grp_fu_326_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U4 : component dft_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add1_1_reg_699,
        din1 => mul_2_reg_704,
        ce => ap_const_logic_1,
        dout => grp_fu_330_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U5 : component dft_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_2_reg_724,
        din1 => mul8_3_reg_729,
        ce => ap_const_logic_1,
        dout => grp_fu_334_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U6 : component dft_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add1_2_reg_739,
        din1 => mul_3_reg_744,
        ce => ap_const_logic_1,
        dout => grp_fu_338_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U7 : component dft_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_3_reg_764,
        din1 => mul8_4_reg_769,
        ce => ap_const_logic_1,
        dout => grp_fu_342_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U8 : component dft_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add1_3_reg_779,
        din1 => mul_4_reg_784,
        ce => ap_const_logic_1,
        dout => grp_fu_346_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U9 : component dft_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_4_reg_804,
        din1 => mul8_5_reg_809,
        ce => ap_const_logic_1,
        dout => grp_fu_350_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U10 : component dft_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add1_4_reg_819,
        din1 => mul_5_reg_824,
        ce => ap_const_logic_1,
        dout => grp_fu_354_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U11 : component dft_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_5_reg_844,
        din1 => mul8_6_reg_849,
        ce => ap_const_logic_1,
        dout => grp_fu_358_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U12 : component dft_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add1_5_reg_859,
        din1 => mul_6_reg_864,
        ce => ap_const_logic_1,
        dout => grp_fu_362_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U13 : component dft_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_6_reg_884,
        din1 => mul8_7_reg_889,
        ce => ap_const_logic_1,
        dout => grp_fu_366_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U14 : component dft_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add1_6_reg_894,
        din1 => mul_7_reg_899,
        ce => ap_const_logic_1,
        dout => grp_fu_370_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U16 : component dft_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln14_1,
        din1 => sin_coefficients_table_load_reg_638,
        ce => ap_const_logic_1,
        dout => grp_fu_378_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U17 : component dft_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln14_2,
        din1 => cos_coefficients_table_load_1_reg_668,
        ce => ap_const_logic_1,
        dout => grp_fu_382_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U18 : component dft_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln14_2,
        din1 => sin_coefficients_table_load_1_reg_673,
        ce => ap_const_logic_1,
        dout => grp_fu_386_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U19 : component dft_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln14_3,
        din1 => cos_coefficients_table_load_2_reg_714,
        ce => ap_const_logic_1,
        dout => grp_fu_390_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U20 : component dft_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln14_3,
        din1 => sin_coefficients_table_load_2_reg_719,
        ce => ap_const_logic_1,
        dout => grp_fu_394_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U21 : component dft_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln14_4,
        din1 => cos_coefficients_table_load_3_reg_754,
        ce => ap_const_logic_1,
        dout => grp_fu_398_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U22 : component dft_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln14_4,
        din1 => sin_coefficients_table_load_3_reg_759,
        ce => ap_const_logic_1,
        dout => grp_fu_402_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U23 : component dft_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln14_5,
        din1 => cos_coefficients_table_load_4_reg_794,
        ce => ap_const_logic_1,
        dout => grp_fu_406_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U24 : component dft_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln14_5,
        din1 => sin_coefficients_table_load_4_reg_799,
        ce => ap_const_logic_1,
        dout => grp_fu_410_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U25 : component dft_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln14_6,
        din1 => cos_coefficients_table_load_5_reg_834,
        ce => ap_const_logic_1,
        dout => grp_fu_414_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U26 : component dft_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln14_6,
        din1 => sin_coefficients_table_load_5_reg_839,
        ce => ap_const_logic_1,
        dout => grp_fu_418_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U27 : component dft_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln14_7,
        din1 => cos_coefficients_table_load_6_reg_874,
        ce => ap_const_logic_1,
        dout => grp_fu_422_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U28 : component dft_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln14_7,
        din1 => sin_coefficients_table_load_6_reg_879,
        ce => ap_const_logic_1,
        dout => grp_fu_426_p2);

    flow_control_loop_pipe_sequential_init_U : component dft_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter40_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    k_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln10_fu_438_p2 = ap_const_lv1_0))) then 
                    k_fu_64 <= add_ln10_fu_444_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_64 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add1_1_reg_699 <= grp_fu_171_p_dout0;
                add1_2_reg_739 <= grp_fu_330_p2;
                add1_3_reg_779 <= grp_fu_338_p2;
                add1_4_reg_819 <= grp_fu_346_p2;
                add1_5_reg_859 <= grp_fu_354_p2;
                add1_6_reg_894 <= grp_fu_362_p2;
                add1_7_reg_909 <= grp_fu_370_p2;
                add_1_reg_678 <= grp_fu_166_p_dout0;
                add_2_reg_724 <= grp_fu_326_p2;
                add_3_reg_764 <= grp_fu_334_p2;
                add_4_reg_804 <= grp_fu_342_p2;
                add_5_reg_844 <= grp_fu_350_p2;
                add_6_reg_884 <= grp_fu_358_p2;
                add_7_reg_904 <= grp_fu_366_p2;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
                ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
                ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
                ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
                ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
                ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
                ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
                ap_loop_exit_ready_pp0_iter37_reg <= ap_loop_exit_ready_pp0_iter36_reg;
                ap_loop_exit_ready_pp0_iter38_reg <= ap_loop_exit_ready_pp0_iter37_reg;
                ap_loop_exit_ready_pp0_iter39_reg <= ap_loop_exit_ready_pp0_iter38_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter40_reg <= ap_loop_exit_ready_pp0_iter39_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                empty_7_reg_616_pp0_iter10_reg <= empty_7_reg_616_pp0_iter9_reg;
                empty_7_reg_616_pp0_iter11_reg <= empty_7_reg_616_pp0_iter10_reg;
                empty_7_reg_616_pp0_iter12_reg <= empty_7_reg_616_pp0_iter11_reg;
                empty_7_reg_616_pp0_iter13_reg <= empty_7_reg_616_pp0_iter12_reg;
                empty_7_reg_616_pp0_iter14_reg <= empty_7_reg_616_pp0_iter13_reg;
                empty_7_reg_616_pp0_iter15_reg <= empty_7_reg_616_pp0_iter14_reg;
                empty_7_reg_616_pp0_iter16_reg <= empty_7_reg_616_pp0_iter15_reg;
                empty_7_reg_616_pp0_iter17_reg <= empty_7_reg_616_pp0_iter16_reg;
                empty_7_reg_616_pp0_iter18_reg <= empty_7_reg_616_pp0_iter17_reg;
                empty_7_reg_616_pp0_iter19_reg <= empty_7_reg_616_pp0_iter18_reg;
                empty_7_reg_616_pp0_iter20_reg <= empty_7_reg_616_pp0_iter19_reg;
                empty_7_reg_616_pp0_iter21_reg <= empty_7_reg_616_pp0_iter20_reg;
                empty_7_reg_616_pp0_iter22_reg <= empty_7_reg_616_pp0_iter21_reg;
                empty_7_reg_616_pp0_iter23_reg <= empty_7_reg_616_pp0_iter22_reg;
                empty_7_reg_616_pp0_iter24_reg <= empty_7_reg_616_pp0_iter23_reg;
                empty_7_reg_616_pp0_iter25_reg <= empty_7_reg_616_pp0_iter24_reg;
                empty_7_reg_616_pp0_iter26_reg <= empty_7_reg_616_pp0_iter25_reg;
                empty_7_reg_616_pp0_iter27_reg <= empty_7_reg_616_pp0_iter26_reg;
                empty_7_reg_616_pp0_iter28_reg <= empty_7_reg_616_pp0_iter27_reg;
                empty_7_reg_616_pp0_iter29_reg <= empty_7_reg_616_pp0_iter28_reg;
                empty_7_reg_616_pp0_iter2_reg <= empty_7_reg_616_pp0_iter1_reg;
                empty_7_reg_616_pp0_iter3_reg <= empty_7_reg_616_pp0_iter2_reg;
                empty_7_reg_616_pp0_iter4_reg <= empty_7_reg_616_pp0_iter3_reg;
                empty_7_reg_616_pp0_iter5_reg <= empty_7_reg_616_pp0_iter4_reg;
                empty_7_reg_616_pp0_iter6_reg <= empty_7_reg_616_pp0_iter5_reg;
                empty_7_reg_616_pp0_iter7_reg <= empty_7_reg_616_pp0_iter6_reg;
                empty_7_reg_616_pp0_iter8_reg <= empty_7_reg_616_pp0_iter7_reg;
                empty_7_reg_616_pp0_iter9_reg <= empty_7_reg_616_pp0_iter8_reg;
                k_1_reg_605_pp0_iter10_reg <= k_1_reg_605_pp0_iter9_reg;
                k_1_reg_605_pp0_iter11_reg <= k_1_reg_605_pp0_iter10_reg;
                k_1_reg_605_pp0_iter12_reg <= k_1_reg_605_pp0_iter11_reg;
                k_1_reg_605_pp0_iter13_reg <= k_1_reg_605_pp0_iter12_reg;
                k_1_reg_605_pp0_iter14_reg <= k_1_reg_605_pp0_iter13_reg;
                k_1_reg_605_pp0_iter15_reg <= k_1_reg_605_pp0_iter14_reg;
                k_1_reg_605_pp0_iter16_reg <= k_1_reg_605_pp0_iter15_reg;
                k_1_reg_605_pp0_iter17_reg <= k_1_reg_605_pp0_iter16_reg;
                k_1_reg_605_pp0_iter18_reg <= k_1_reg_605_pp0_iter17_reg;
                k_1_reg_605_pp0_iter19_reg <= k_1_reg_605_pp0_iter18_reg;
                k_1_reg_605_pp0_iter20_reg <= k_1_reg_605_pp0_iter19_reg;
                k_1_reg_605_pp0_iter21_reg <= k_1_reg_605_pp0_iter20_reg;
                k_1_reg_605_pp0_iter22_reg <= k_1_reg_605_pp0_iter21_reg;
                k_1_reg_605_pp0_iter23_reg <= k_1_reg_605_pp0_iter22_reg;
                k_1_reg_605_pp0_iter24_reg <= k_1_reg_605_pp0_iter23_reg;
                k_1_reg_605_pp0_iter25_reg <= k_1_reg_605_pp0_iter24_reg;
                k_1_reg_605_pp0_iter26_reg <= k_1_reg_605_pp0_iter25_reg;
                k_1_reg_605_pp0_iter27_reg <= k_1_reg_605_pp0_iter26_reg;
                k_1_reg_605_pp0_iter28_reg <= k_1_reg_605_pp0_iter27_reg;
                k_1_reg_605_pp0_iter29_reg <= k_1_reg_605_pp0_iter28_reg;
                k_1_reg_605_pp0_iter2_reg <= k_1_reg_605_pp0_iter1_reg;
                k_1_reg_605_pp0_iter30_reg <= k_1_reg_605_pp0_iter29_reg;
                k_1_reg_605_pp0_iter31_reg <= k_1_reg_605_pp0_iter30_reg;
                k_1_reg_605_pp0_iter32_reg <= k_1_reg_605_pp0_iter31_reg;
                k_1_reg_605_pp0_iter33_reg <= k_1_reg_605_pp0_iter32_reg;
                k_1_reg_605_pp0_iter34_reg <= k_1_reg_605_pp0_iter33_reg;
                k_1_reg_605_pp0_iter35_reg <= k_1_reg_605_pp0_iter34_reg;
                k_1_reg_605_pp0_iter36_reg <= k_1_reg_605_pp0_iter35_reg;
                k_1_reg_605_pp0_iter37_reg <= k_1_reg_605_pp0_iter36_reg;
                k_1_reg_605_pp0_iter38_reg <= k_1_reg_605_pp0_iter37_reg;
                k_1_reg_605_pp0_iter39_reg <= k_1_reg_605_pp0_iter38_reg;
                k_1_reg_605_pp0_iter3_reg <= k_1_reg_605_pp0_iter2_reg;
                k_1_reg_605_pp0_iter40_reg <= k_1_reg_605_pp0_iter39_reg;
                k_1_reg_605_pp0_iter4_reg <= k_1_reg_605_pp0_iter3_reg;
                k_1_reg_605_pp0_iter5_reg <= k_1_reg_605_pp0_iter4_reg;
                k_1_reg_605_pp0_iter6_reg <= k_1_reg_605_pp0_iter5_reg;
                k_1_reg_605_pp0_iter7_reg <= k_1_reg_605_pp0_iter6_reg;
                k_1_reg_605_pp0_iter8_reg <= k_1_reg_605_pp0_iter7_reg;
                k_1_reg_605_pp0_iter9_reg <= k_1_reg_605_pp0_iter8_reg;
                mul8_1_reg_643 <= grp_fu_176_p_dout0;
                mul8_2_reg_683 <= grp_fu_382_p2;
                mul8_3_reg_729 <= grp_fu_390_p2;
                mul8_4_reg_769 <= grp_fu_398_p2;
                mul8_5_reg_809 <= grp_fu_406_p2;
                mul8_6_reg_849 <= grp_fu_414_p2;
                mul8_7_reg_889 <= grp_fu_422_p2;
                mul_1_reg_658 <= grp_fu_378_p2;
                mul_2_reg_704 <= grp_fu_386_p2;
                mul_3_reg_744 <= grp_fu_394_p2;
                mul_4_reg_784 <= grp_fu_402_p2;
                mul_5_reg_824 <= grp_fu_410_p2;
                mul_6_reg_864 <= grp_fu_418_p2;
                mul_7_reg_899 <= grp_fu_426_p2;
                    shl_ln14_1_reg_688(2) <= shl_ln14_1_fu_485_p3(2);
                    shl_ln14_1_reg_688_pp0_iter11_reg(2) <= shl_ln14_1_reg_688(2);
                    shl_ln14_1_reg_688_pp0_iter12_reg(2) <= shl_ln14_1_reg_688_pp0_iter11_reg(2);
                    shl_ln14_1_reg_688_pp0_iter13_reg(2) <= shl_ln14_1_reg_688_pp0_iter12_reg(2);
                    shl_ln14_1_reg_688_pp0_iter14_reg(2) <= shl_ln14_1_reg_688_pp0_iter13_reg(2);
                    shl_ln14_1_reg_688_pp0_iter15_reg(2) <= shl_ln14_1_reg_688_pp0_iter14_reg(2);
                    shl_ln14_1_reg_688_pp0_iter16_reg(2) <= shl_ln14_1_reg_688_pp0_iter15_reg(2);
                    shl_ln14_1_reg_688_pp0_iter17_reg(2) <= shl_ln14_1_reg_688_pp0_iter16_reg(2);
                    shl_ln14_1_reg_688_pp0_iter18_reg(2) <= shl_ln14_1_reg_688_pp0_iter17_reg(2);
                    shl_ln14_1_reg_688_pp0_iter19_reg(2) <= shl_ln14_1_reg_688_pp0_iter18_reg(2);
                    shl_ln_reg_648(2 downto 1) <= shl_ln_fu_468_p3(2 downto 1);
                    shl_ln_reg_648_pp0_iter10_reg(2 downto 1) <= shl_ln_reg_648_pp0_iter9_reg(2 downto 1);
                    shl_ln_reg_648_pp0_iter11_reg(2 downto 1) <= shl_ln_reg_648_pp0_iter10_reg(2 downto 1);
                    shl_ln_reg_648_pp0_iter12_reg(2 downto 1) <= shl_ln_reg_648_pp0_iter11_reg(2 downto 1);
                    shl_ln_reg_648_pp0_iter13_reg(2 downto 1) <= shl_ln_reg_648_pp0_iter12_reg(2 downto 1);
                    shl_ln_reg_648_pp0_iter14_reg(2 downto 1) <= shl_ln_reg_648_pp0_iter13_reg(2 downto 1);
                    shl_ln_reg_648_pp0_iter15_reg(2 downto 1) <= shl_ln_reg_648_pp0_iter14_reg(2 downto 1);
                    shl_ln_reg_648_pp0_iter16_reg(2 downto 1) <= shl_ln_reg_648_pp0_iter15_reg(2 downto 1);
                    shl_ln_reg_648_pp0_iter17_reg(2 downto 1) <= shl_ln_reg_648_pp0_iter16_reg(2 downto 1);
                    shl_ln_reg_648_pp0_iter18_reg(2 downto 1) <= shl_ln_reg_648_pp0_iter17_reg(2 downto 1);
                    shl_ln_reg_648_pp0_iter19_reg(2 downto 1) <= shl_ln_reg_648_pp0_iter18_reg(2 downto 1);
                    shl_ln_reg_648_pp0_iter20_reg(2 downto 1) <= shl_ln_reg_648_pp0_iter19_reg(2 downto 1);
                    shl_ln_reg_648_pp0_iter21_reg(2 downto 1) <= shl_ln_reg_648_pp0_iter20_reg(2 downto 1);
                    shl_ln_reg_648_pp0_iter22_reg(2 downto 1) <= shl_ln_reg_648_pp0_iter21_reg(2 downto 1);
                    shl_ln_reg_648_pp0_iter23_reg(2 downto 1) <= shl_ln_reg_648_pp0_iter22_reg(2 downto 1);
                    shl_ln_reg_648_pp0_iter24_reg(2 downto 1) <= shl_ln_reg_648_pp0_iter23_reg(2 downto 1);
                    shl_ln_reg_648_pp0_iter6_reg(2 downto 1) <= shl_ln_reg_648(2 downto 1);
                    shl_ln_reg_648_pp0_iter7_reg(2 downto 1) <= shl_ln_reg_648_pp0_iter6_reg(2 downto 1);
                    shl_ln_reg_648_pp0_iter8_reg(2 downto 1) <= shl_ln_reg_648_pp0_iter7_reg(2 downto 1);
                    shl_ln_reg_648_pp0_iter9_reg(2 downto 1) <= shl_ln_reg_648_pp0_iter8_reg(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                empty_7_reg_616_pp0_iter1_reg <= empty_7_reg_616;
                k_1_reg_605 <= ap_sig_allocacmp_k_1;
                k_1_reg_605_pp0_iter1_reg <= k_1_reg_605;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                cos_coefficients_table_load_1_reg_668 <= cos_coefficients_table_q5;
                sin_coefficients_table_load_1_reg_673 <= sin_coefficients_table_q5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                cos_coefficients_table_load_2_reg_714 <= cos_coefficients_table_q4;
                sin_coefficients_table_load_2_reg_719 <= sin_coefficients_table_q4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                cos_coefficients_table_load_3_reg_754 <= cos_coefficients_table_q3;
                sin_coefficients_table_load_3_reg_759 <= sin_coefficients_table_q3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                cos_coefficients_table_load_4_reg_794 <= cos_coefficients_table_q2;
                sin_coefficients_table_load_4_reg_799 <= sin_coefficients_table_q2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                cos_coefficients_table_load_5_reg_834 <= cos_coefficients_table_q1;
                sin_coefficients_table_load_5_reg_839 <= sin_coefficients_table_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1))) then
                cos_coefficients_table_load_6_reg_874 <= cos_coefficients_table_q0;
                sin_coefficients_table_load_6_reg_879 <= sin_coefficients_table_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                cos_coefficients_table_load_reg_633 <= cos_coefficients_table_q6;
                sin_coefficients_table_load_reg_638 <= sin_coefficients_table_q6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln10_fu_438_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_7_reg_616 <= empty_7_fu_450_p1;
            end if;
        end if;
    end process;
    shl_ln_reg_648(0) <= '0';
    shl_ln_reg_648_pp0_iter6_reg(0) <= '0';
    shl_ln_reg_648_pp0_iter7_reg(0) <= '0';
    shl_ln_reg_648_pp0_iter8_reg(0) <= '0';
    shl_ln_reg_648_pp0_iter9_reg(0) <= '0';
    shl_ln_reg_648_pp0_iter10_reg(0) <= '0';
    shl_ln_reg_648_pp0_iter11_reg(0) <= '0';
    shl_ln_reg_648_pp0_iter12_reg(0) <= '0';
    shl_ln_reg_648_pp0_iter13_reg(0) <= '0';
    shl_ln_reg_648_pp0_iter14_reg(0) <= '0';
    shl_ln_reg_648_pp0_iter15_reg(0) <= '0';
    shl_ln_reg_648_pp0_iter16_reg(0) <= '0';
    shl_ln_reg_648_pp0_iter17_reg(0) <= '0';
    shl_ln_reg_648_pp0_iter18_reg(0) <= '0';
    shl_ln_reg_648_pp0_iter19_reg(0) <= '0';
    shl_ln_reg_648_pp0_iter20_reg(0) <= '0';
    shl_ln_reg_648_pp0_iter21_reg(0) <= '0';
    shl_ln_reg_648_pp0_iter22_reg(0) <= '0';
    shl_ln_reg_648_pp0_iter23_reg(0) <= '0';
    shl_ln_reg_648_pp0_iter24_reg(0) <= '0';
    shl_ln14_1_reg_688(1 downto 0) <= "00";
    shl_ln14_1_reg_688_pp0_iter11_reg(1 downto 0) <= "00";
    shl_ln14_1_reg_688_pp0_iter12_reg(1 downto 0) <= "00";
    shl_ln14_1_reg_688_pp0_iter13_reg(1 downto 0) <= "00";
    shl_ln14_1_reg_688_pp0_iter14_reg(1 downto 0) <= "00";
    shl_ln14_1_reg_688_pp0_iter15_reg(1 downto 0) <= "00";
    shl_ln14_1_reg_688_pp0_iter16_reg(1 downto 0) <= "00";
    shl_ln14_1_reg_688_pp0_iter17_reg(1 downto 0) <= "00";
    shl_ln14_1_reg_688_pp0_iter18_reg(1 downto 0) <= "00";
    shl_ln14_1_reg_688_pp0_iter19_reg(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln10_fu_444_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_k_1) + unsigned(ap_const_lv4_1));
    add_ln14_fu_509_p2 <= std_logic_vector(unsigned(shl_ln14_1_reg_688_pp0_iter19_reg) + unsigned(empty_7_reg_616_pp0_iter19_reg));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage0_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln10_fu_438_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln10_fu_438_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter40_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter40_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_k_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, k_fu_64, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_k_1 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_k_1 <= k_fu_64;
        end if; 
    end process;

    cos_coefficients_table_address0 <= zext_ln14_6_fu_535_p1(3 - 1 downto 0);
    cos_coefficients_table_address1 <= zext_ln14_5_fu_524_p1(3 - 1 downto 0);
    cos_coefficients_table_address2 <= zext_ln14_4_fu_513_p1(3 - 1 downto 0);
    cos_coefficients_table_address3 <= zext_ln14_3_fu_504_p1(3 - 1 downto 0);
    cos_coefficients_table_address4 <= zext_ln14_2_fu_498_p1(3 - 1 downto 0);
    cos_coefficients_table_address5 <= zext_ln14_1_fu_476_p1(3 - 1 downto 0);
    cos_coefficients_table_address6 <= zext_ln14_fu_454_p1(3 - 1 downto 0);

    cos_coefficients_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter30, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1))) then 
            cos_coefficients_table_ce0 <= ap_const_logic_1;
        else 
            cos_coefficients_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cos_coefficients_table_ce1_assign_proc : process(ap_enable_reg_pp0_iter25, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cos_coefficients_table_ce1 <= ap_const_logic_1;
        else 
            cos_coefficients_table_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cos_coefficients_table_ce2_assign_proc : process(ap_enable_reg_pp0_iter20, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cos_coefficients_table_ce2 <= ap_const_logic_1;
        else 
            cos_coefficients_table_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    cos_coefficients_table_ce3_assign_proc : process(ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cos_coefficients_table_ce3 <= ap_const_logic_1;
        else 
            cos_coefficients_table_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    cos_coefficients_table_ce4_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cos_coefficients_table_ce4 <= ap_const_logic_1;
        else 
            cos_coefficients_table_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    cos_coefficients_table_ce5_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cos_coefficients_table_ce5 <= ap_const_logic_1;
        else 
            cos_coefficients_table_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    cos_coefficients_table_ce6_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cos_coefficients_table_ce6 <= ap_const_logic_1;
        else 
            cos_coefficients_table_ce6 <= ap_const_logic_0;
        end if; 
    end process;

    empty_7_fu_450_p1 <= ap_sig_allocacmp_k_1(3 - 1 downto 0);
    grp_fu_166_p_ce <= ap_const_logic_1;
    grp_fu_166_p_din0 <= add;
    grp_fu_166_p_din1 <= mul8_1_reg_643;
    grp_fu_166_p_opcode <= ap_const_lv2_0;
    grp_fu_171_p_ce <= ap_const_logic_1;
    grp_fu_171_p_din0 <= add1;
    grp_fu_171_p_din1 <= mul_1_reg_658;
    grp_fu_171_p_opcode <= ap_const_lv2_0;
    grp_fu_176_p_ce <= ap_const_logic_1;
    grp_fu_176_p_din0 <= bitcast_ln14_1;
    grp_fu_176_p_din1 <= cos_coefficients_table_load_reg_633;
    icmp_ln10_fu_438_p2 <= "1" when (ap_sig_allocacmp_k_1 = ap_const_lv4_8) else "0";
    k_cast1_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_1_reg_605_pp0_iter40_reg),64));
    shl_ln14_1_fu_485_p3 <= (trunc_ln14_1_fu_482_p1 & ap_const_lv2_0);
    shl_ln_fu_468_p3 <= (trunc_ln14_fu_465_p1 & ap_const_lv1_0);
    sin_coefficients_table_address0 <= zext_ln14_6_fu_535_p1(3 - 1 downto 0);
    sin_coefficients_table_address1 <= zext_ln14_5_fu_524_p1(3 - 1 downto 0);
    sin_coefficients_table_address2 <= zext_ln14_4_fu_513_p1(3 - 1 downto 0);
    sin_coefficients_table_address3 <= zext_ln14_3_fu_504_p1(3 - 1 downto 0);
    sin_coefficients_table_address4 <= zext_ln14_2_fu_498_p1(3 - 1 downto 0);
    sin_coefficients_table_address5 <= zext_ln14_1_fu_476_p1(3 - 1 downto 0);
    sin_coefficients_table_address6 <= zext_ln14_fu_454_p1(3 - 1 downto 0);

    sin_coefficients_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter30, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1))) then 
            sin_coefficients_table_ce0 <= ap_const_logic_1;
        else 
            sin_coefficients_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sin_coefficients_table_ce1_assign_proc : process(ap_enable_reg_pp0_iter25, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            sin_coefficients_table_ce1 <= ap_const_logic_1;
        else 
            sin_coefficients_table_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sin_coefficients_table_ce2_assign_proc : process(ap_enable_reg_pp0_iter20, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            sin_coefficients_table_ce2 <= ap_const_logic_1;
        else 
            sin_coefficients_table_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    sin_coefficients_table_ce3_assign_proc : process(ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            sin_coefficients_table_ce3 <= ap_const_logic_1;
        else 
            sin_coefficients_table_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    sin_coefficients_table_ce4_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            sin_coefficients_table_ce4 <= ap_const_logic_1;
        else 
            sin_coefficients_table_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    sin_coefficients_table_ce5_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            sin_coefficients_table_ce5 <= ap_const_logic_1;
        else 
            sin_coefficients_table_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    sin_coefficients_table_ce6_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            sin_coefficients_table_ce6 <= ap_const_logic_1;
        else 
            sin_coefficients_table_ce6 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln14_1_fu_519_p2 <= std_logic_vector(unsigned(ap_const_lv3_0) - unsigned(shl_ln_reg_648_pp0_iter24_reg));
    sub_ln14_2_fu_530_p2 <= std_logic_vector(unsigned(ap_const_lv3_0) - unsigned(empty_7_reg_616_pp0_iter29_reg));
    sub_ln14_fu_493_p2 <= std_logic_vector(unsigned(shl_ln14_1_fu_485_p3) - unsigned(empty_7_reg_616_pp0_iter9_reg));
    sum_i_address0 <= k_cast1_fu_541_p1(3 - 1 downto 0);

    sum_i_ce0_assign_proc : process(ap_enable_reg_pp0_iter41, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter41 = ap_const_logic_1))) then 
            sum_i_ce0 <= ap_const_logic_1;
        else 
            sum_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sum_i_d0 <= add1_7_reg_909;

    sum_i_we0_assign_proc : process(ap_enable_reg_pp0_iter41, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter41 = ap_const_logic_1))) then 
            sum_i_we0 <= ap_const_logic_1;
        else 
            sum_i_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sum_r_address0 <= k_cast1_fu_541_p1(3 - 1 downto 0);

    sum_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter41, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter41 = ap_const_logic_1))) then 
            sum_r_ce0 <= ap_const_logic_1;
        else 
            sum_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sum_r_d0 <= add_7_reg_904;

    sum_r_we0_assign_proc : process(ap_enable_reg_pp0_iter41, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter41 = ap_const_logic_1))) then 
            sum_r_we0 <= ap_const_logic_1;
        else 
            sum_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln14_1_fu_482_p1 <= k_1_reg_605_pp0_iter9_reg(1 - 1 downto 0);
    trunc_ln14_fu_465_p1 <= k_1_reg_605_pp0_iter4_reg(2 - 1 downto 0);
    zext_ln14_1_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_468_p3),64));
    zext_ln14_2_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln14_fu_493_p2),64));
    zext_ln14_3_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln14_1_reg_688_pp0_iter14_reg),64));
    zext_ln14_4_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln14_fu_509_p2),64));
    zext_ln14_5_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln14_1_fu_519_p2),64));
    zext_ln14_6_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln14_2_fu_530_p2),64));
    zext_ln14_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_7_fu_450_p1),64));
end behav;
