-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_dut_Pipeline_Queue_loop_Edge_loop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    q_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    q_array_ce0 : OUT STD_LOGIC;
    q_array_we0 : OUT STD_LOGIC;
    q_array_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    q_array_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    q_array_ce1 : OUT STD_LOGIC;
    q_array_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    v_i : IN STD_LOGIC_VECTOR (15 downto 0);
    v_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    v_o_ap_vld : OUT STD_LOGIC;
    s_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    s_array_ce0 : OUT STD_LOGIC;
    s_array_we0 : OUT STD_LOGIC;
    s_array_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    offset_buf_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    offset_buf_ce0 : OUT STD_LOGIC;
    offset_buf_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    offset_buf_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    offset_buf_ce1 : OUT STD_LOGIC;
    offset_buf_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    dist_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    dist_array_ce0 : OUT STD_LOGIC;
    dist_array_we0 : OUT STD_LOGIC;
    dist_array_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    dist_array_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    dist_array_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    dist_array_ce1 : OUT STD_LOGIC;
    dist_array_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    sigma_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sigma_array_ce0 : OUT STD_LOGIC;
    sigma_array_we0 : OUT STD_LOGIC;
    sigma_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sigma_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sigma_array_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sigma_array_ce1 : OUT STD_LOGIC;
    sigma_array_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    q_index_i : IN STD_LOGIC_VECTOR (15 downto 0);
    q_index_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    q_index_o_ap_vld : OUT STD_LOGIC;
    column_buf_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    column_buf_ce0 : OUT STD_LOGIC;
    column_buf_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    w : OUT STD_LOGIC_VECTOR (11 downto 0);
    w_ap_vld : OUT STD_LOGIC;
    travel_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    travel_ce0 : OUT STD_LOGIC;
    travel_we0 : OUT STD_LOGIC;
    travel_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    travel_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    sigma_tmp : OUT STD_LOGIC_VECTOR (31 downto 0);
    sigma_tmp_ap_vld : OUT STD_LOGIC;
    p_index_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    p_index_array_ce0 : OUT STD_LOGIC;
    p_index_array_we0 : OUT STD_LOGIC;
    p_index_array_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_index_array_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    p_index_array_ce1 : OUT STD_LOGIC;
    p_index_array_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_array_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    p_array_ce0 : OUT STD_LOGIC;
    p_array_we0 : OUT STD_LOGIC;
    p_array_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    grp_fu_667_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_667_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_667_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_667_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_667_p_ce : OUT STD_LOGIC;
    grp_fu_671_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_671_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_671_p_ce : OUT STD_LOGIC );
end;


architecture behav of dut_dut_Pipeline_Queue_loop_Edge_loop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv18_20C94 : STD_LOGIC_VECTOR (17 downto 0) := "100000110010010100";
    constant ap_const_lv18_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv6_26 : STD_LOGIC_VECTOR (5 downto 0) := "100110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state16_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state22_pp0_stage1_iter10 : BOOLEAN;
    signal ap_block_state24_pp0_stage1_iter11 : BOOLEAN;
    signal ap_block_state26_pp0_stage1_iter12 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln209_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal num_edge : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal base_edge : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal dist_tmp : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal sigma_tmp_v : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal q_index_tmp : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal dist_tmp_w : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal icmp_ln209_reg_788 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln209_reg_788_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln209_reg_788_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln209_reg_788_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln209_reg_788_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln209_reg_788_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln209_reg_788_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln209_reg_788_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln209_reg_788_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln209_reg_788_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln209_reg_788_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln209_reg_788_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln209_fu_357_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln209_reg_792 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln209_reg_792_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln209_fu_373_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln209_reg_798 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln227_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln227_reg_803 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln227_reg_803_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln227_reg_803_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln227_reg_803_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal q_array_load_reg_812 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal q_array_load_reg_812_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal q_array_load_reg_812_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln233_fu_398_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln233_reg_819 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln231_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln231_reg_824 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln231_reg_824_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln237_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln237_reg_845 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln237_reg_845_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln237_reg_845_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln237_reg_845_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln237_reg_845_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln237_reg_845_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln237_reg_845_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln237_reg_845_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln237_reg_845_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln237_reg_845_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln237_reg_845_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal column_buf_load_reg_854 : STD_LOGIC_VECTOR (15 downto 0);
    signal column_buf_load_reg_854_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln255_fu_514_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln255_reg_860 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln255_reg_860_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln241_fu_520_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln241_reg_870 : STD_LOGIC_VECTOR (63 downto 0);
    signal dist_array_addr_1_reg_876 : STD_LOGIC_VECTOR (11 downto 0);
    signal dist_array_addr_1_reg_876_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal travel_addr_reg_881 : STD_LOGIC_VECTOR (11 downto 0);
    signal q_index_load_reg_886 : STD_LOGIC_VECTOR (15 downto 0);
    signal travel_load_reg_891 : STD_LOGIC_VECTOR (0 downto 0);
    signal dist_tmp_load_reg_895 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln249_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln249_reg_901 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln249_reg_901_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln249_reg_901_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln249_reg_901_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln249_reg_901_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln249_reg_901_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln249_reg_901_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln249_reg_901_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln249_reg_901_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sigma_array_addr_1_reg_905 : STD_LOGIC_VECTOR (11 downto 0);
    signal sigma_array_addr_1_reg_905_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal sigma_array_addr_1_reg_905_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal sigma_array_addr_1_reg_905_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal sigma_array_addr_1_reg_905_pp0_iter8_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal sigma_array_addr_1_reg_905_pp0_iter9_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal sigma_array_addr_1_reg_905_pp0_iter10_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal sigma_array_addr_1_reg_905_pp0_iter11_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal sigma_array_addr_1_reg_905_pp0_iter12_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal p_index_array_addr_reg_915 : STD_LOGIC_VECTOR (11 downto 0);
    signal sigma_array_load_1_reg_921 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_load_reg_926 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln255_1_fu_610_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln255_1_reg_931 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln256_fu_615_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln256_reg_936 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv2_reg_941 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_reg_941_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_reg_946 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_reg_951 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_956 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_fu_748_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_reg_961 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_fu_761_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_reg_967 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln233_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln239_fu_463_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln243_fu_574_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_1_fu_621_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln233_fu_428_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal add_ln232_fu_468_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln244_fu_556_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal k_fu_120 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_1_fu_404_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_124 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln209_1_fu_365_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal indvar_flatten_fu_128 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln209_1_fu_333_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_306_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln217_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln209_fu_345_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln233_fu_394_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln218_fu_440_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln238_fu_457_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln239_1_fu_484_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln239_fu_480_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_2_fu_498_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_3_fu_506_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln255_fu_606_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal data_V_fu_631_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_fu_652_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_fu_656_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal xs_exp_V_fu_642_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln346_fu_670_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln346_fu_674_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1512_fu_688_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_680_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1512_fu_694_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_698_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1488_fu_706_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_666_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1488_fu_710_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_714_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_fu_726_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_720_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln818_fu_734_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_738_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_2_fu_756_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter12_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to11 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to13 : STD_LOGIC;
    signal ap_block_pp0 : BOOLEAN;
    signal ap_predicate_op50_load_state2 : BOOLEAN;
    signal ap_enable_operation_50 : BOOLEAN;
    signal ap_enable_state2_pp0_iter0_stage1 : BOOLEAN;
    signal ap_predicate_op53_load_state3 : BOOLEAN;
    signal ap_enable_operation_53 : BOOLEAN;
    signal ap_enable_state3_pp0_iter1_stage0 : BOOLEAN;
    signal ap_predicate_op122_store_state10 : BOOLEAN;
    signal ap_enable_operation_122 : BOOLEAN;
    signal ap_enable_state10_pp0_iter4_stage1 : BOOLEAN;
    signal ap_enable_operation_78 : BOOLEAN;
    signal ap_enable_state6_pp0_iter2_stage1 : BOOLEAN;
    signal ap_enable_operation_87 : BOOLEAN;
    signal ap_enable_state7_pp0_iter3_stage0 : BOOLEAN;
    signal ap_predicate_op135_store_state11 : BOOLEAN;
    signal ap_enable_operation_135 : BOOLEAN;
    signal ap_enable_state11_pp0_iter5_stage0 : BOOLEAN;
    signal ap_enable_operation_99 : BOOLEAN;
    signal ap_enable_state8_pp0_iter3_stage1 : BOOLEAN;
    signal ap_enable_operation_106 : BOOLEAN;
    signal ap_enable_state9_pp0_iter4_stage0 : BOOLEAN;
    signal ap_predicate_op186_store_state27 : BOOLEAN;
    signal ap_enable_operation_186 : BOOLEAN;
    signal ap_enable_state27_pp0_iter13_stage0 : BOOLEAN;
    signal ap_enable_operation_102 : BOOLEAN;
    signal ap_enable_operation_111 : BOOLEAN;
    signal ap_enable_operation_104 : BOOLEAN;
    signal ap_enable_operation_113 : BOOLEAN;
    signal ap_predicate_op119_store_state9 : BOOLEAN;
    signal ap_enable_operation_119 : BOOLEAN;
    signal ap_predicate_op127_load_state10 : BOOLEAN;
    signal ap_enable_operation_127 : BOOLEAN;
    signal ap_predicate_op137_load_state11 : BOOLEAN;
    signal ap_enable_operation_137 : BOOLEAN;
    signal ap_predicate_op131_load_state10 : BOOLEAN;
    signal ap_enable_operation_131 : BOOLEAN;
    signal ap_predicate_op139_load_state11 : BOOLEAN;
    signal ap_enable_operation_139 : BOOLEAN;
    signal ap_predicate_op148_store_state12 : BOOLEAN;
    signal ap_enable_operation_148 : BOOLEAN;
    signal ap_enable_state12_pp0_iter5_stage1 : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_condition_323 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component dut_fadd_32ns_32ns_32_7_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_sitofp_32ns_32_5_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component dut_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter10_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to11 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter12_stage0))) then 
                ap_loop_exit_ready_pp0_iter10_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter11_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to11 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter12_stage0))) then 
                ap_loop_exit_ready_pp0_iter11_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter12_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to11 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter12_stage0))) then 
                ap_loop_exit_ready_pp0_iter12_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to11 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter12_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to11 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter12_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to11 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter12_stage0))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to11 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter12_stage0))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to11 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter12_stage0))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter6_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to11 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter12_stage0))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter7_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to11 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter12_stage0))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter8_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to11 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter12_stage0))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter9_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to11 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter12_stage0))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
            end if; 
        end if;
    end process;

    dist_tmp_w_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_323)) then
                if ((travel_q0 = ap_const_lv1_0)) then 
                    dist_tmp_w <= dist_tmp;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    dist_tmp_w <= dist_array_q0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_fu_128 <= ap_const_lv18_0;
            elsif (((icmp_ln209_fu_327_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                indvar_flatten_fu_128 <= add_ln209_1_fu_333_p2;
            end if; 
        end if;
    end process;

    j_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_fu_124 <= ap_const_lv12_0;
            elsif (((icmp_ln209_fu_327_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                j_fu_124 <= select_ln209_1_fu_365_p3;
            end if; 
        end if;
    end process;

    k_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_120 <= ap_const_lv6_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln209_reg_788 = ap_const_lv1_0))) then 
                    k_fu_120 <= k_1_fu_404_p2;
                end if;
            end if; 
        end if;
    end process;

    q_index_tmp_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_323)) then
                if ((travel_q0 = ap_const_lv1_0)) then 
                    q_index_tmp <= add_ln244_fu_556_p2;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    q_index_tmp <= q_index_i;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln227_reg_803 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln209_reg_788 = ap_const_lv1_0))) then
                add_ln233_reg_819 <= add_ln233_fu_398_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln249_reg_901 = ap_const_lv1_1) and (icmp_ln237_reg_845_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln255_1_reg_931 <= add_ln255_1_fu_610_p2;
                add_ln256_reg_936 <= add_ln256_fu_615_p2;
                v_load_reg_926 <= v_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln237_reg_845 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    add_ln255_reg_860(16 downto 2) <= add_ln255_fu_514_p2(16 downto 2);
                column_buf_load_reg_854 <= column_buf_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    add_ln255_reg_860_pp0_iter4_reg(16 downto 2) <= add_ln255_reg_860(16 downto 2);
                column_buf_load_reg_854_pp0_iter4_reg <= column_buf_load_reg_854;
                q_array_load_reg_812_pp0_iter2_reg <= q_array_load_reg_812;
                q_array_load_reg_812_pp0_iter3_reg <= q_array_load_reg_812_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln227_reg_803_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                base_edge <= offset_buf_q1;
                num_edge <= sub_ln233_fu_428_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (icmp_ln249_reg_901_pp0_iter7_reg = ap_const_lv1_1) and (icmp_ln237_reg_845_pp0_iter7_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                conv1_reg_946 <= grp_fu_671_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln249_reg_901_pp0_iter5_reg = ap_const_lv1_1) and (icmp_ln237_reg_845_pp0_iter5_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                conv2_reg_941 <= grp_fu_671_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                conv2_reg_941_pp0_iter7_reg <= conv2_reg_941;
                dist_array_addr_1_reg_876_pp0_iter4_reg <= dist_array_addr_1_reg_876;
                icmp_ln209_reg_788 <= icmp_ln209_fu_327_p2;
                icmp_ln209_reg_788_pp0_iter10_reg <= icmp_ln209_reg_788_pp0_iter9_reg;
                icmp_ln209_reg_788_pp0_iter11_reg <= icmp_ln209_reg_788_pp0_iter10_reg;
                icmp_ln209_reg_788_pp0_iter1_reg <= icmp_ln209_reg_788;
                icmp_ln209_reg_788_pp0_iter2_reg <= icmp_ln209_reg_788_pp0_iter1_reg;
                icmp_ln209_reg_788_pp0_iter3_reg <= icmp_ln209_reg_788_pp0_iter2_reg;
                icmp_ln209_reg_788_pp0_iter4_reg <= icmp_ln209_reg_788_pp0_iter3_reg;
                icmp_ln209_reg_788_pp0_iter5_reg <= icmp_ln209_reg_788_pp0_iter4_reg;
                icmp_ln209_reg_788_pp0_iter6_reg <= icmp_ln209_reg_788_pp0_iter5_reg;
                icmp_ln209_reg_788_pp0_iter7_reg <= icmp_ln209_reg_788_pp0_iter6_reg;
                icmp_ln209_reg_788_pp0_iter8_reg <= icmp_ln209_reg_788_pp0_iter7_reg;
                icmp_ln209_reg_788_pp0_iter9_reg <= icmp_ln209_reg_788_pp0_iter8_reg;
                icmp_ln227_reg_803_pp0_iter1_reg <= icmp_ln227_reg_803;
                icmp_ln227_reg_803_pp0_iter2_reg <= icmp_ln227_reg_803_pp0_iter1_reg;
                icmp_ln227_reg_803_pp0_iter3_reg <= icmp_ln227_reg_803_pp0_iter2_reg;
                icmp_ln237_reg_845 <= icmp_ln237_fu_447_p2;
                icmp_ln237_reg_845_pp0_iter10_reg <= icmp_ln237_reg_845_pp0_iter9_reg;
                icmp_ln237_reg_845_pp0_iter11_reg <= icmp_ln237_reg_845_pp0_iter10_reg;
                icmp_ln237_reg_845_pp0_iter12_reg <= icmp_ln237_reg_845_pp0_iter11_reg;
                icmp_ln237_reg_845_pp0_iter3_reg <= icmp_ln237_reg_845;
                icmp_ln237_reg_845_pp0_iter4_reg <= icmp_ln237_reg_845_pp0_iter3_reg;
                icmp_ln237_reg_845_pp0_iter5_reg <= icmp_ln237_reg_845_pp0_iter4_reg;
                icmp_ln237_reg_845_pp0_iter6_reg <= icmp_ln237_reg_845_pp0_iter5_reg;
                icmp_ln237_reg_845_pp0_iter7_reg <= icmp_ln237_reg_845_pp0_iter6_reg;
                icmp_ln237_reg_845_pp0_iter8_reg <= icmp_ln237_reg_845_pp0_iter7_reg;
                icmp_ln237_reg_845_pp0_iter9_reg <= icmp_ln237_reg_845_pp0_iter8_reg;
                icmp_ln249_reg_901_pp0_iter10_reg <= icmp_ln249_reg_901_pp0_iter9_reg;
                icmp_ln249_reg_901_pp0_iter11_reg <= icmp_ln249_reg_901_pp0_iter10_reg;
                icmp_ln249_reg_901_pp0_iter12_reg <= icmp_ln249_reg_901_pp0_iter11_reg;
                icmp_ln249_reg_901_pp0_iter5_reg <= icmp_ln249_reg_901;
                icmp_ln249_reg_901_pp0_iter6_reg <= icmp_ln249_reg_901_pp0_iter5_reg;
                icmp_ln249_reg_901_pp0_iter7_reg <= icmp_ln249_reg_901_pp0_iter6_reg;
                icmp_ln249_reg_901_pp0_iter8_reg <= icmp_ln249_reg_901_pp0_iter7_reg;
                icmp_ln249_reg_901_pp0_iter9_reg <= icmp_ln249_reg_901_pp0_iter8_reg;
                select_ln209_reg_792_pp0_iter1_reg <= select_ln209_reg_792;
                sigma_array_addr_1_reg_905_pp0_iter10_reg <= sigma_array_addr_1_reg_905_pp0_iter9_reg;
                sigma_array_addr_1_reg_905_pp0_iter11_reg <= sigma_array_addr_1_reg_905_pp0_iter10_reg;
                sigma_array_addr_1_reg_905_pp0_iter12_reg <= sigma_array_addr_1_reg_905_pp0_iter11_reg;
                sigma_array_addr_1_reg_905_pp0_iter5_reg <= sigma_array_addr_1_reg_905;
                sigma_array_addr_1_reg_905_pp0_iter6_reg <= sigma_array_addr_1_reg_905_pp0_iter5_reg;
                sigma_array_addr_1_reg_905_pp0_iter7_reg <= sigma_array_addr_1_reg_905_pp0_iter6_reg;
                sigma_array_addr_1_reg_905_pp0_iter8_reg <= sigma_array_addr_1_reg_905_pp0_iter7_reg;
                sigma_array_addr_1_reg_905_pp0_iter9_reg <= sigma_array_addr_1_reg_905_pp0_iter8_reg;
                    zext_ln231_reg_824_pp0_iter2_reg(15 downto 0) <= zext_ln231_reg_824(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln249_reg_901_pp0_iter10_reg = ap_const_lv1_1) and (icmp_ln237_reg_845_pp0_iter10_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                dc_reg_951 <= grp_fu_667_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln237_reg_845 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                dist_array_addr_1_reg_876 <= zext_ln241_fu_520_p1(12 - 1 downto 0);
                travel_addr_reg_881 <= zext_ln241_fu_520_p1(12 - 1 downto 0);
                    zext_ln241_reg_870(15 downto 0) <= zext_ln241_fu_520_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln227_reg_803_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                dist_tmp <= add_ln232_fu_468_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln237_reg_845_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                dist_tmp_load_reg_895 <= dist_tmp;
                q_index_load_reg_886 <= q_index_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln209_fu_327_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln227_reg_803 <= icmp_ln227_fu_378_p2;
                select_ln209_reg_792 <= select_ln209_fu_357_p3;
                    zext_ln209_reg_798(11 downto 0) <= zext_ln209_fu_373_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln237_reg_845_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln249_reg_901 <= icmp_ln249_fu_582_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln249_reg_901_pp0_iter11_reg = ap_const_lv1_1) and (icmp_ln237_reg_845_pp0_iter11_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_Result_s_reg_956 <= data_V_fu_631_p1(31 downto 31);
                val_reg_961 <= val_fu_748_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln249_fu_582_p2 = ap_const_lv1_1) and (icmp_ln237_reg_845_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                p_index_array_addr_reg_915 <= zext_ln241_reg_870(12 - 1 downto 0);
                sigma_array_addr_1_reg_905 <= zext_ln241_reg_870(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln227_reg_803 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln209_reg_788 = ap_const_lv1_0))) then
                q_array_load_reg_812 <= q_array_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln249_reg_901_pp0_iter11_reg = ap_const_lv1_1) and (icmp_ln237_reg_845_pp0_iter11_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                result_V_reg_967 <= result_V_fu_761_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln249_reg_901 = ap_const_lv1_1) and (icmp_ln237_reg_845_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                sigma_array_load_1_reg_921 <= sigma_array_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln227_reg_803_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                sigma_tmp_v <= sigma_array_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln237_reg_845_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                travel_load_reg_891 <= travel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln227_reg_803 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    zext_ln231_reg_824(15 downto 0) <= zext_ln231_fu_414_p1(15 downto 0);
            end if;
        end if;
    end process;
    zext_ln209_reg_798(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln231_reg_824(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln231_reg_824_pp0_iter2_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    add_ln255_reg_860(1 downto 0) <= "00";
    add_ln255_reg_860_pp0_iter4_reg(1 downto 0) <= "00";
    zext_ln241_reg_870(63 downto 16) <= "000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter12_stage0, ap_idle_pp0_0to11, ap_idle_pp0_1to13, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to11 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter12_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to13 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln209_1_fu_333_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_128) + unsigned(ap_const_lv18_1));
    add_ln209_fu_345_p2 <= std_logic_vector(unsigned(j_fu_124) + unsigned(ap_const_lv12_1));
    add_ln232_fu_468_p2 <= std_logic_vector(unsigned(dist_array_q1) + unsigned(ap_const_lv16_1));
    add_ln233_fu_398_p2 <= std_logic_vector(unsigned(trunc_ln233_fu_394_p1) + unsigned(ap_const_lv12_1));
    add_ln238_fu_457_p2 <= std_logic_vector(unsigned(base_edge) + unsigned(zext_ln218_fu_440_p1));
    add_ln244_fu_556_p2 <= std_logic_vector(unsigned(q_index_i) + unsigned(ap_const_lv16_1));
    add_ln255_1_fu_610_p2 <= std_logic_vector(unsigned(add_ln255_reg_860_pp0_iter4_reg) + unsigned(zext_ln255_fu_606_p1));
    add_ln255_fu_514_p2 <= std_logic_vector(unsigned(tmp_2_fu_498_p3) + unsigned(tmp_3_fu_506_p3));
    add_ln256_fu_615_p2 <= std_logic_vector(unsigned(p_index_array_q1) + unsigned(ap_const_lv8_1));
    add_ln346_fu_674_p2 <= std_logic_vector(unsigned(zext_ln346_fu_670_p1) + unsigned(ap_const_lv9_181));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= (((ap_ST_fsm_pp0_stage1 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage1_subdone)) or ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone)));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage1_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage1_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_323_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, icmp_ln237_reg_845_pp0_iter3_reg)
    begin
                ap_condition_323 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln237_reg_845_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln209_fu_327_p2)
    begin
        if (((icmp_ln209_fu_327_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter12_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter12, icmp_ln209_reg_788_pp0_iter11_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (icmp_ln209_reg_788_pp0_iter11_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter12_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter12_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter12_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_enable_operation_102_assign_proc : process(icmp_ln237_reg_845)
    begin
                ap_enable_operation_102 <= (icmp_ln237_reg_845 = ap_const_lv1_1);
    end process;


    ap_enable_operation_104_assign_proc : process(icmp_ln237_reg_845)
    begin
                ap_enable_operation_104 <= (icmp_ln237_reg_845 = ap_const_lv1_1);
    end process;


    ap_enable_operation_106_assign_proc : process(icmp_ln227_reg_803_pp0_iter3_reg)
    begin
                ap_enable_operation_106 <= (icmp_ln227_reg_803_pp0_iter3_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_111_assign_proc : process(icmp_ln237_reg_845_pp0_iter3_reg)
    begin
                ap_enable_operation_111 <= (icmp_ln237_reg_845_pp0_iter3_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_113_assign_proc : process(icmp_ln237_reg_845_pp0_iter3_reg)
    begin
                ap_enable_operation_113 <= (icmp_ln237_reg_845_pp0_iter3_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_119_assign_proc : process(ap_predicate_op119_store_state9)
    begin
                ap_enable_operation_119 <= (ap_predicate_op119_store_state9 = ap_const_boolean_1);
    end process;


    ap_enable_operation_122_assign_proc : process(ap_predicate_op122_store_state10)
    begin
                ap_enable_operation_122 <= (ap_predicate_op122_store_state10 = ap_const_boolean_1);
    end process;


    ap_enable_operation_127_assign_proc : process(ap_predicate_op127_load_state10)
    begin
                ap_enable_operation_127 <= (ap_predicate_op127_load_state10 = ap_const_boolean_1);
    end process;


    ap_enable_operation_131_assign_proc : process(ap_predicate_op131_load_state10)
    begin
                ap_enable_operation_131 <= (ap_predicate_op131_load_state10 = ap_const_boolean_1);
    end process;


    ap_enable_operation_135_assign_proc : process(ap_predicate_op135_store_state11)
    begin
                ap_enable_operation_135 <= (ap_predicate_op135_store_state11 = ap_const_boolean_1);
    end process;


    ap_enable_operation_137_assign_proc : process(ap_predicate_op137_load_state11)
    begin
                ap_enable_operation_137 <= (ap_predicate_op137_load_state11 = ap_const_boolean_1);
    end process;


    ap_enable_operation_139_assign_proc : process(ap_predicate_op139_load_state11)
    begin
                ap_enable_operation_139 <= (ap_predicate_op139_load_state11 = ap_const_boolean_1);
    end process;


    ap_enable_operation_148_assign_proc : process(ap_predicate_op148_store_state12)
    begin
                ap_enable_operation_148 <= (ap_predicate_op148_store_state12 = ap_const_boolean_1);
    end process;


    ap_enable_operation_186_assign_proc : process(ap_predicate_op186_store_state27)
    begin
                ap_enable_operation_186 <= (ap_predicate_op186_store_state27 = ap_const_boolean_1);
    end process;


    ap_enable_operation_50_assign_proc : process(ap_predicate_op50_load_state2)
    begin
                ap_enable_operation_50 <= (ap_predicate_op50_load_state2 = ap_const_boolean_1);
    end process;


    ap_enable_operation_53_assign_proc : process(ap_predicate_op53_load_state3)
    begin
                ap_enable_operation_53 <= (ap_predicate_op53_load_state3 = ap_const_boolean_1);
    end process;


    ap_enable_operation_78_assign_proc : process(icmp_ln227_reg_803_pp0_iter1_reg)
    begin
                ap_enable_operation_78 <= (icmp_ln227_reg_803_pp0_iter1_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_87_assign_proc : process(icmp_ln227_reg_803_pp0_iter2_reg)
    begin
                ap_enable_operation_87 <= (icmp_ln227_reg_803_pp0_iter2_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_99_assign_proc : process(icmp_ln227_reg_803_pp0_iter2_reg)
    begin
                ap_enable_operation_99 <= (icmp_ln227_reg_803_pp0_iter2_reg = ap_const_lv1_1);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_enable_state10_pp0_iter4_stage1_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1)
    begin
                ap_enable_state10_pp0_iter4_stage1 <= ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_enable_state11_pp0_iter5_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5)
    begin
                ap_enable_state11_pp0_iter5_stage0 <= ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state12_pp0_iter5_stage1_assign_proc : process(ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1)
    begin
                ap_enable_state12_pp0_iter5_stage1 <= ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_enable_state27_pp0_iter13_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter13)
    begin
                ap_enable_state27_pp0_iter13_stage0 <= ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state2_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1)
    begin
                ap_enable_state2_pp0_iter0_stage1 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_enable_state3_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
                ap_enable_state3_pp0_iter1_stage0 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state6_pp0_iter2_stage1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1)
    begin
                ap_enable_state6_pp0_iter2_stage1 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_enable_state7_pp0_iter3_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3)
    begin
                ap_enable_state7_pp0_iter3_stage0 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state8_pp0_iter3_stage1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1)
    begin
                ap_enable_state8_pp0_iter3_stage1 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_enable_state9_pp0_iter4_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4)
    begin
                ap_enable_state9_pp0_iter4_stage0 <= ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to11_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to11 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to13_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to13 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to13 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_predicate_op119_store_state9_assign_proc : process(travel_q0, icmp_ln237_reg_845_pp0_iter3_reg)
    begin
                ap_predicate_op119_store_state9 <= ((icmp_ln237_reg_845_pp0_iter3_reg = ap_const_lv1_1) and (travel_q0 = ap_const_lv1_0));
    end process;


    ap_predicate_op122_store_state10_assign_proc : process(icmp_ln237_reg_845_pp0_iter3_reg, travel_load_reg_891)
    begin
                ap_predicate_op122_store_state10 <= ((travel_load_reg_891 = ap_const_lv1_0) and (icmp_ln237_reg_845_pp0_iter3_reg = ap_const_lv1_1));
    end process;


    ap_predicate_op127_load_state10_assign_proc : process(icmp_ln237_reg_845_pp0_iter3_reg, icmp_ln249_fu_582_p2)
    begin
                ap_predicate_op127_load_state10 <= ((icmp_ln249_fu_582_p2 = ap_const_lv1_1) and (icmp_ln237_reg_845_pp0_iter3_reg = ap_const_lv1_1));
    end process;


    ap_predicate_op131_load_state10_assign_proc : process(icmp_ln237_reg_845_pp0_iter3_reg, icmp_ln249_fu_582_p2)
    begin
                ap_predicate_op131_load_state10 <= ((icmp_ln249_fu_582_p2 = ap_const_lv1_1) and (icmp_ln237_reg_845_pp0_iter3_reg = ap_const_lv1_1));
    end process;


    ap_predicate_op135_store_state11_assign_proc : process(icmp_ln237_reg_845_pp0_iter4_reg, travel_load_reg_891)
    begin
                ap_predicate_op135_store_state11 <= ((travel_load_reg_891 = ap_const_lv1_0) and (icmp_ln237_reg_845_pp0_iter4_reg = ap_const_lv1_1));
    end process;


    ap_predicate_op137_load_state11_assign_proc : process(icmp_ln237_reg_845_pp0_iter4_reg, icmp_ln249_reg_901)
    begin
                ap_predicate_op137_load_state11 <= ((icmp_ln249_reg_901 = ap_const_lv1_1) and (icmp_ln237_reg_845_pp0_iter4_reg = ap_const_lv1_1));
    end process;


    ap_predicate_op139_load_state11_assign_proc : process(icmp_ln237_reg_845_pp0_iter4_reg, icmp_ln249_reg_901)
    begin
                ap_predicate_op139_load_state11 <= ((icmp_ln249_reg_901 = ap_const_lv1_1) and (icmp_ln237_reg_845_pp0_iter4_reg = ap_const_lv1_1));
    end process;


    ap_predicate_op148_store_state12_assign_proc : process(icmp_ln237_reg_845_pp0_iter4_reg, icmp_ln249_reg_901)
    begin
                ap_predicate_op148_store_state12 <= ((icmp_ln249_reg_901 = ap_const_lv1_1) and (icmp_ln237_reg_845_pp0_iter4_reg = ap_const_lv1_1));
    end process;


    ap_predicate_op186_store_state27_assign_proc : process(icmp_ln237_reg_845_pp0_iter12_reg, icmp_ln249_reg_901_pp0_iter12_reg)
    begin
                ap_predicate_op186_store_state27 <= ((icmp_ln249_reg_901_pp0_iter12_reg = ap_const_lv1_1) and (icmp_ln237_reg_845_pp0_iter12_reg = ap_const_lv1_1));
    end process;


    ap_predicate_op50_load_state2_assign_proc : process(icmp_ln209_fu_327_p2, icmp_ln227_fu_378_p2)
    begin
                ap_predicate_op50_load_state2 <= ((icmp_ln209_fu_327_p2 = ap_const_lv1_0) and (icmp_ln227_fu_378_p2 = ap_const_lv1_1));
    end process;


    ap_predicate_op53_load_state3_assign_proc : process(icmp_ln209_reg_788, icmp_ln227_reg_803)
    begin
                ap_predicate_op53_load_state3 <= ((icmp_ln227_reg_803 = ap_const_lv1_1) and (icmp_ln209_reg_788 = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    column_buf_address0 <= zext_ln239_fu_463_p1(16 - 1 downto 0);

    column_buf_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            column_buf_ce0 <= ap_const_logic_1;
        else 
            column_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_V_fu_631_p1 <= dc_reg_951;

    dist_array_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, zext_ln241_fu_520_p1, dist_array_addr_1_reg_876_pp0_iter4_reg, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dist_array_address0 <= dist_array_addr_1_reg_876_pp0_iter4_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dist_array_address0 <= zext_ln241_fu_520_p1(12 - 1 downto 0);
        else 
            dist_array_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    dist_array_address1 <= zext_ln231_reg_824(12 - 1 downto 0);

    dist_array_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dist_array_ce0 <= ap_const_logic_1;
        else 
            dist_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dist_array_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dist_array_ce1 <= ap_const_logic_1;
        else 
            dist_array_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    dist_array_d0 <= dist_tmp_load_reg_895;

    dist_array_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001, icmp_ln237_reg_845_pp0_iter4_reg, travel_load_reg_891)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (travel_load_reg_891 = ap_const_lv1_0) and (icmp_ln237_reg_845_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dist_array_we0 <= ap_const_logic_1;
        else 
            dist_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_306_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, sigma_tmp_v, sigma_array_load_1_reg_921, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_306_p0 <= sigma_array_load_1_reg_921;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_306_p0 <= sigma_tmp_v;
        else 
            grp_fu_306_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_667_p_ce <= ap_const_logic_1;
    grp_fu_667_p_din0 <= conv1_reg_946;
    grp_fu_667_p_din1 <= conv2_reg_941_pp0_iter7_reg;
    grp_fu_667_p_opcode <= ap_const_lv2_0;
    grp_fu_671_p_ce <= ap_const_logic_1;
    grp_fu_671_p_din0 <= grp_fu_306_p0;
    icmp_ln209_fu_327_p2 <= "1" when (indvar_flatten_fu_128 = ap_const_lv18_20C94) else "0";
    icmp_ln217_fu_351_p2 <= "1" when (k_fu_120 = ap_const_lv6_26) else "0";
    icmp_ln227_fu_378_p2 <= "1" when (select_ln209_fu_357_p3 = ap_const_lv6_0) else "0";
    icmp_ln237_fu_447_p2 <= "1" when (unsigned(zext_ln218_fu_440_p1) < unsigned(num_edge)) else "0";
    icmp_ln249_fu_582_p2 <= "1" when (dist_tmp_load_reg_895 = dist_tmp_w) else "0";
    isNeg_fu_680_p3 <= add_ln346_fu_674_p2(8 downto 8);
    k_1_fu_404_p2 <= std_logic_vector(unsigned(select_ln209_reg_792) + unsigned(ap_const_lv6_1));
    mantissa_fu_656_p4 <= ((ap_const_lv1_1 & p_Result_1_fu_652_p1) & ap_const_lv1_0);
    offset_buf_address0 <= zext_ln233_fu_418_p1(12 - 1 downto 0);
    offset_buf_address1 <= zext_ln231_fu_414_p1(12 - 1 downto 0);

    offset_buf_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            offset_buf_ce0 <= ap_const_logic_1;
        else 
            offset_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    offset_buf_ce1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            offset_buf_ce1 <= ap_const_logic_1;
        else 
            offset_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_1_fu_652_p1 <= data_V_fu_631_p1(23 - 1 downto 0);
    p_array_address0 <= zext_ln255_1_fu_621_p1(17 - 1 downto 0);

    p_array_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            p_array_ce0 <= ap_const_logic_1;
        else 
            p_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_array_d0 <= v_load_reg_926;

    p_array_we0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln237_reg_845_pp0_iter4_reg, icmp_ln249_reg_901)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln249_reg_901 = ap_const_lv1_1) and (icmp_ln237_reg_845_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            p_array_we0 <= ap_const_logic_1;
        else 
            p_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_index_array_address0 <= p_index_array_addr_reg_915;
    p_index_array_address1 <= zext_ln241_reg_870(12 - 1 downto 0);

    p_index_array_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            p_index_array_ce0 <= ap_const_logic_1;
        else 
            p_index_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_index_array_ce1_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            p_index_array_ce1 <= ap_const_logic_1;
        else 
            p_index_array_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    p_index_array_d0 <= add_ln256_reg_936;

    p_index_array_we0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln237_reg_845_pp0_iter4_reg, icmp_ln249_reg_901)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln249_reg_901 = ap_const_lv1_1) and (icmp_ln237_reg_845_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            p_index_array_we0 <= ap_const_logic_1;
        else 
            p_index_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    q_array_address0 <= zext_ln243_fu_574_p1(12 - 1 downto 0);
    q_array_address1 <= zext_ln209_fu_373_p1(12 - 1 downto 0);

    q_array_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            q_array_ce0 <= ap_const_logic_1;
        else 
            q_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    q_array_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            q_array_ce1 <= ap_const_logic_1;
        else 
            q_array_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    q_array_d0 <= column_buf_load_reg_854_pp0_iter4_reg;

    q_array_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln237_reg_845_pp0_iter3_reg, travel_load_reg_891)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (travel_load_reg_891 = ap_const_lv1_0) and (icmp_ln237_reg_845_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            q_array_we0 <= ap_const_logic_1;
        else 
            q_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    q_index_o_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, q_index_tmp, q_index_i, icmp_ln237_reg_845_pp0_iter3_reg, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln237_reg_845_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            q_index_o <= q_index_tmp;
        else 
            q_index_o <= q_index_i;
        end if; 
    end process;


    q_index_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln237_reg_845_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln237_reg_845_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            q_index_o_ap_vld <= ap_const_logic_1;
        else 
            q_index_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    r_V_1_fu_720_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_666_p1),to_integer(unsigned('0' & zext_ln1488_fu_710_p1(31-1 downto 0)))));
    r_V_fu_714_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_666_p1),to_integer(unsigned('0' & zext_ln1488_fu_710_p1(31-1 downto 0)))));
    result_V_2_fu_756_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_reg_961));
    result_V_fu_761_p3 <= 
        result_V_2_fu_756_p2 when (p_Result_s_reg_956(0) = '1') else 
        val_reg_961;
    s_array_address0 <= zext_ln209_reg_798(12 - 1 downto 0);

    s_array_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            s_array_ce0 <= ap_const_logic_1;
        else 
            s_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    s_array_d0 <= q_array_load_reg_812;

    s_array_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln227_reg_803)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln227_reg_803 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            s_array_we0 <= ap_const_logic_1;
        else 
            s_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln209_1_fu_365_p3 <= 
        add_ln209_fu_345_p2 when (icmp_ln217_fu_351_p2(0) = '1') else 
        j_fu_124;
    select_ln209_fu_357_p3 <= 
        ap_const_lv6_0 when (icmp_ln217_fu_351_p2(0) = '1') else 
        k_fu_120;
        sext_ln1488_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_698_p3),32));

        sext_ln1512_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_fu_688_p2),9));


    sigma_array_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter13, ap_CS_fsm_pp0_stage1, zext_ln241_reg_870, sigma_array_addr_1_reg_905_pp0_iter12_reg, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sigma_array_address0 <= sigma_array_addr_1_reg_905_pp0_iter12_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            sigma_array_address0 <= zext_ln241_reg_870(12 - 1 downto 0);
        else 
            sigma_array_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    sigma_array_address1 <= zext_ln231_reg_824_pp0_iter2_reg(12 - 1 downto 0);

    sigma_array_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter13, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            sigma_array_ce0 <= ap_const_logic_1;
        else 
            sigma_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sigma_array_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            sigma_array_ce1 <= ap_const_logic_1;
        else 
            sigma_array_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    sigma_array_d0 <= result_V_reg_967;

    sigma_array_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001, icmp_ln237_reg_845_pp0_iter12_reg, icmp_ln249_reg_901_pp0_iter12_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (icmp_ln249_reg_901_pp0_iter12_reg = ap_const_lv1_1) and (icmp_ln237_reg_845_pp0_iter12_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sigma_array_we0 <= ap_const_logic_1;
        else 
            sigma_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sigma_tmp <= grp_fu_667_p_dout0;

    sigma_tmp_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter11, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln237_reg_845_pp0_iter10_reg, icmp_ln249_reg_901_pp0_iter10_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (icmp_ln249_reg_901_pp0_iter10_reg = ap_const_lv1_1) and (icmp_ln237_reg_845_pp0_iter10_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            sigma_tmp_ap_vld <= ap_const_logic_1;
        else 
            sigma_tmp_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln1512_fu_688_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_V_fu_642_p4));
    sub_ln233_fu_428_p2 <= std_logic_vector(unsigned(offset_buf_q0) - unsigned(offset_buf_q1));
    tmp_2_fu_498_p3 <= (trunc_ln239_1_fu_484_p1 & ap_const_lv4_0);
    tmp_3_fu_506_p3 <= (trunc_ln239_fu_480_p1 & ap_const_lv2_0);
    tmp_6_fu_738_p4 <= r_V_1_fu_720_p2(55 downto 24);
    tmp_fu_726_p3 <= r_V_fu_714_p2(24 downto 24);

    travel_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, zext_ln241_fu_520_p1, travel_addr_reg_881, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            travel_address0 <= travel_addr_reg_881;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            travel_address0 <= zext_ln241_fu_520_p1(12 - 1 downto 0);
        else 
            travel_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    travel_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            travel_ce0 <= ap_const_logic_1;
        else 
            travel_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    travel_d0 <= ap_const_lv1_1;

    travel_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, travel_q0, ap_block_pp0_stage0_11001, icmp_ln237_reg_845_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln237_reg_845_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (travel_q0 = ap_const_lv1_0))) then 
            travel_we0 <= ap_const_logic_1;
        else 
            travel_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln233_fu_394_p1 <= q_array_q1(12 - 1 downto 0);
    trunc_ln239_1_fu_484_p1 <= column_buf_q0(13 - 1 downto 0);
    trunc_ln239_fu_480_p1 <= column_buf_q0(15 - 1 downto 0);
    ush_fu_698_p3 <= 
        sext_ln1512_fu_694_p1 when (isNeg_fu_680_p3(0) = '1') else 
        add_ln346_fu_674_p2;

    v_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, v_i, icmp_ln227_reg_803_pp0_iter3_reg, q_array_load_reg_812_pp0_iter3_reg, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln227_reg_803_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v_o <= q_array_load_reg_812_pp0_iter3_reg;
        else 
            v_o <= v_i;
        end if; 
    end process;


    v_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, icmp_ln227_reg_803_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln227_reg_803_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v_o_ap_vld <= ap_const_logic_1;
        else 
            v_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    val_fu_748_p3 <= 
        zext_ln818_fu_734_p1 when (isNeg_fu_680_p3(0) = '1') else 
        tmp_6_fu_738_p4;
    w <= column_buf_q0(12 - 1 downto 0);

    w_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, icmp_ln237_reg_845)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln237_reg_845 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w_ap_vld <= ap_const_logic_1;
        else 
            w_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xs_exp_V_fu_642_p4 <= data_V_fu_631_p1(30 downto 23);
    zext_ln1488_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_fu_706_p1),79));
    zext_ln15_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_656_p4),79));
    zext_ln209_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln209_1_fu_365_p3),64));
    zext_ln218_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln209_reg_792_pp0_iter1_reg),16));
    zext_ln231_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(q_array_load_reg_812),64));
    zext_ln233_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln233_reg_819),64));
    zext_ln239_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln238_fu_457_p2),64));
    zext_ln241_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(column_buf_load_reg_854),64));
    zext_ln243_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(q_index_load_reg_886),64));
    zext_ln255_1_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln255_1_reg_931),64));
    zext_ln255_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_index_array_q1),17));
    zext_ln346_fu_670_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_fu_642_p4),9));
    zext_ln818_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_726_p3),32));
end behav;
