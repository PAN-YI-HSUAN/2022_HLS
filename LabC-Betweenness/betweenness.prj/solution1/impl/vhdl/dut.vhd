-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut is
generic (
    C_M_AXI_GMEM0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM3_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM3_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM6_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM6_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM6_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM6_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM6_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM6_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM6_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM6_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM7_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM7_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM7_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM7_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM7_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM7_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM7_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM7_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM8_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM8_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM8_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM8_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM8_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM8_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM8_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM8_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM9_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM9_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM9_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM9_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM9_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM9_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM9_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM9_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM1_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM3_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM3_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM3_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_WUSER_WIDTH-1 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_RUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_BUSER_WIDTH-1 downto 0);
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_WUSER_WIDTH-1 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_RUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_BUSER_WIDTH-1 downto 0);
    m_axi_gmem3_AWVALID : OUT STD_LOGIC;
    m_axi_gmem3_AWREADY : IN STD_LOGIC;
    m_axi_gmem3_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ADDR_WIDTH-1 downto 0);
    m_axi_gmem3_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem3_WVALID : OUT STD_LOGIC;
    m_axi_gmem3_WREADY : IN STD_LOGIC;
    m_axi_gmem3_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_DATA_WIDTH-1 downto 0);
    m_axi_gmem3_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem3_WLAST : OUT STD_LOGIC;
    m_axi_gmem3_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_WUSER_WIDTH-1 downto 0);
    m_axi_gmem3_ARVALID : OUT STD_LOGIC;
    m_axi_gmem3_ARREADY : IN STD_LOGIC;
    m_axi_gmem3_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ADDR_WIDTH-1 downto 0);
    m_axi_gmem3_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem3_RVALID : IN STD_LOGIC;
    m_axi_gmem3_RREADY : OUT STD_LOGIC;
    m_axi_gmem3_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_DATA_WIDTH-1 downto 0);
    m_axi_gmem3_RLAST : IN STD_LOGIC;
    m_axi_gmem3_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_RUSER_WIDTH-1 downto 0);
    m_axi_gmem3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_BVALID : IN STD_LOGIC;
    m_axi_gmem3_BREADY : OUT STD_LOGIC;
    m_axi_gmem3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_BUSER_WIDTH-1 downto 0);
    m_axi_gmem6_AWVALID : OUT STD_LOGIC;
    m_axi_gmem6_AWREADY : IN STD_LOGIC;
    m_axi_gmem6_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM6_ADDR_WIDTH-1 downto 0);
    m_axi_gmem6_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM6_ID_WIDTH-1 downto 0);
    m_axi_gmem6_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem6_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem6_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem6_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem6_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem6_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem6_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem6_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem6_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM6_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem6_WVALID : OUT STD_LOGIC;
    m_axi_gmem6_WREADY : IN STD_LOGIC;
    m_axi_gmem6_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM6_DATA_WIDTH-1 downto 0);
    m_axi_gmem6_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM6_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem6_WLAST : OUT STD_LOGIC;
    m_axi_gmem6_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM6_ID_WIDTH-1 downto 0);
    m_axi_gmem6_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM6_WUSER_WIDTH-1 downto 0);
    m_axi_gmem6_ARVALID : OUT STD_LOGIC;
    m_axi_gmem6_ARREADY : IN STD_LOGIC;
    m_axi_gmem6_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM6_ADDR_WIDTH-1 downto 0);
    m_axi_gmem6_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM6_ID_WIDTH-1 downto 0);
    m_axi_gmem6_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem6_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem6_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem6_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem6_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem6_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem6_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem6_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem6_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM6_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem6_RVALID : IN STD_LOGIC;
    m_axi_gmem6_RREADY : OUT STD_LOGIC;
    m_axi_gmem6_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM6_DATA_WIDTH-1 downto 0);
    m_axi_gmem6_RLAST : IN STD_LOGIC;
    m_axi_gmem6_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM6_ID_WIDTH-1 downto 0);
    m_axi_gmem6_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM6_RUSER_WIDTH-1 downto 0);
    m_axi_gmem6_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem6_BVALID : IN STD_LOGIC;
    m_axi_gmem6_BREADY : OUT STD_LOGIC;
    m_axi_gmem6_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem6_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM6_ID_WIDTH-1 downto 0);
    m_axi_gmem6_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM6_BUSER_WIDTH-1 downto 0);
    m_axi_gmem7_AWVALID : OUT STD_LOGIC;
    m_axi_gmem7_AWREADY : IN STD_LOGIC;
    m_axi_gmem7_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM7_ADDR_WIDTH-1 downto 0);
    m_axi_gmem7_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM7_ID_WIDTH-1 downto 0);
    m_axi_gmem7_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem7_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem7_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem7_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem7_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem7_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem7_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem7_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem7_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM7_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem7_WVALID : OUT STD_LOGIC;
    m_axi_gmem7_WREADY : IN STD_LOGIC;
    m_axi_gmem7_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM7_DATA_WIDTH-1 downto 0);
    m_axi_gmem7_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM7_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem7_WLAST : OUT STD_LOGIC;
    m_axi_gmem7_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM7_ID_WIDTH-1 downto 0);
    m_axi_gmem7_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM7_WUSER_WIDTH-1 downto 0);
    m_axi_gmem7_ARVALID : OUT STD_LOGIC;
    m_axi_gmem7_ARREADY : IN STD_LOGIC;
    m_axi_gmem7_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM7_ADDR_WIDTH-1 downto 0);
    m_axi_gmem7_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM7_ID_WIDTH-1 downto 0);
    m_axi_gmem7_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem7_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem7_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem7_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem7_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem7_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem7_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem7_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem7_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM7_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem7_RVALID : IN STD_LOGIC;
    m_axi_gmem7_RREADY : OUT STD_LOGIC;
    m_axi_gmem7_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM7_DATA_WIDTH-1 downto 0);
    m_axi_gmem7_RLAST : IN STD_LOGIC;
    m_axi_gmem7_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM7_ID_WIDTH-1 downto 0);
    m_axi_gmem7_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM7_RUSER_WIDTH-1 downto 0);
    m_axi_gmem7_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem7_BVALID : IN STD_LOGIC;
    m_axi_gmem7_BREADY : OUT STD_LOGIC;
    m_axi_gmem7_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem7_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM7_ID_WIDTH-1 downto 0);
    m_axi_gmem7_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM7_BUSER_WIDTH-1 downto 0);
    m_axi_gmem8_AWVALID : OUT STD_LOGIC;
    m_axi_gmem8_AWREADY : IN STD_LOGIC;
    m_axi_gmem8_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM8_ADDR_WIDTH-1 downto 0);
    m_axi_gmem8_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM8_ID_WIDTH-1 downto 0);
    m_axi_gmem8_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem8_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem8_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem8_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem8_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem8_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem8_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem8_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem8_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM8_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem8_WVALID : OUT STD_LOGIC;
    m_axi_gmem8_WREADY : IN STD_LOGIC;
    m_axi_gmem8_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM8_DATA_WIDTH-1 downto 0);
    m_axi_gmem8_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM8_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem8_WLAST : OUT STD_LOGIC;
    m_axi_gmem8_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM8_ID_WIDTH-1 downto 0);
    m_axi_gmem8_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM8_WUSER_WIDTH-1 downto 0);
    m_axi_gmem8_ARVALID : OUT STD_LOGIC;
    m_axi_gmem8_ARREADY : IN STD_LOGIC;
    m_axi_gmem8_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM8_ADDR_WIDTH-1 downto 0);
    m_axi_gmem8_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM8_ID_WIDTH-1 downto 0);
    m_axi_gmem8_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem8_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem8_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem8_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem8_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem8_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem8_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem8_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem8_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM8_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem8_RVALID : IN STD_LOGIC;
    m_axi_gmem8_RREADY : OUT STD_LOGIC;
    m_axi_gmem8_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM8_DATA_WIDTH-1 downto 0);
    m_axi_gmem8_RLAST : IN STD_LOGIC;
    m_axi_gmem8_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM8_ID_WIDTH-1 downto 0);
    m_axi_gmem8_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM8_RUSER_WIDTH-1 downto 0);
    m_axi_gmem8_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem8_BVALID : IN STD_LOGIC;
    m_axi_gmem8_BREADY : OUT STD_LOGIC;
    m_axi_gmem8_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem8_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM8_ID_WIDTH-1 downto 0);
    m_axi_gmem8_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM8_BUSER_WIDTH-1 downto 0);
    m_axi_gmem9_AWVALID : OUT STD_LOGIC;
    m_axi_gmem9_AWREADY : IN STD_LOGIC;
    m_axi_gmem9_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM9_ADDR_WIDTH-1 downto 0);
    m_axi_gmem9_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM9_ID_WIDTH-1 downto 0);
    m_axi_gmem9_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem9_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem9_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem9_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem9_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem9_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem9_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem9_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem9_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM9_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem9_WVALID : OUT STD_LOGIC;
    m_axi_gmem9_WREADY : IN STD_LOGIC;
    m_axi_gmem9_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM9_DATA_WIDTH-1 downto 0);
    m_axi_gmem9_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM9_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem9_WLAST : OUT STD_LOGIC;
    m_axi_gmem9_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM9_ID_WIDTH-1 downto 0);
    m_axi_gmem9_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM9_WUSER_WIDTH-1 downto 0);
    m_axi_gmem9_ARVALID : OUT STD_LOGIC;
    m_axi_gmem9_ARREADY : IN STD_LOGIC;
    m_axi_gmem9_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM9_ADDR_WIDTH-1 downto 0);
    m_axi_gmem9_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM9_ID_WIDTH-1 downto 0);
    m_axi_gmem9_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem9_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem9_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem9_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem9_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem9_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem9_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem9_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem9_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM9_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem9_RVALID : IN STD_LOGIC;
    m_axi_gmem9_RREADY : OUT STD_LOGIC;
    m_axi_gmem9_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM9_DATA_WIDTH-1 downto 0);
    m_axi_gmem9_RLAST : IN STD_LOGIC;
    m_axi_gmem9_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM9_ID_WIDTH-1 downto 0);
    m_axi_gmem9_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM9_RUSER_WIDTH-1 downto 0);
    m_axi_gmem9_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem9_BVALID : IN STD_LOGIC;
    m_axi_gmem9_BREADY : OUT STD_LOGIC;
    m_axi_gmem9_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem9_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM9_ID_WIDTH-1 downto 0);
    m_axi_gmem9_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM9_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of dut is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dut_dut,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.330000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.430900,HLS_SYN_LAT=818208623,HLS_SYN_TPT=none,HLS_SYN_MEM=35,HLS_SYN_DSP=0,HLS_SYN_FF=6576,HLS_SYN_LUT=9393,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (87 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (87 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (87 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (87 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (87 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (87 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (87 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (87 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (87 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (87 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_GMEM6_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM6_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM6_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant C_M_AXI_GMEM7_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM7_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM7_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant C_M_AXI_GMEM8_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM8_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM8_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant C_M_AXI_GMEM9_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM9_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM9_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_DCF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000110111001111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv12_DCF : STD_LOGIC_VECTOR (11 downto 0) := "110111001111";
    constant ap_const_lv32_A27A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001010001001111010";
    constant ap_const_lv16_A27A : STD_LOGIC_VECTOR (15 downto 0) := "1010001001111010";
    constant ap_const_lv12_DCE : STD_LOGIC_VECTOR (11 downto 0) := "110111001110";
    constant ap_const_lv32_DCE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000110111001110";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal numVert : STD_LOGIC_VECTOR (31 downto 0);
    signal numEdge : STD_LOGIC_VECTOR (31 downto 0);
    signal offset : STD_LOGIC_VECTOR (63 downto 0);
    signal column : STD_LOGIC_VECTOR (63 downto 0);
    signal btwn : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp0 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp3 : STD_LOGIC_VECTOR (63 downto 0);
    signal offset_buf_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal offset_buf_ce0 : STD_LOGIC;
    signal offset_buf_we0 : STD_LOGIC;
    signal offset_buf_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal offset_buf_ce1 : STD_LOGIC;
    signal offset_buf_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal btwn_buf_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal btwn_buf_ce0 : STD_LOGIC;
    signal btwn_buf_we0 : STD_LOGIC;
    signal btwn_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal btwn_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal column_buf_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal column_buf_ce0 : STD_LOGIC;
    signal column_buf_we0 : STD_LOGIC;
    signal column_buf_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal q_index : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal dist_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal dist_array_ce0 : STD_LOGIC;
    signal dist_array_we0 : STD_LOGIC;
    signal dist_array_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal dist_array_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal dist_array_ce1 : STD_LOGIC;
    signal dist_array_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sigma_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sigma_array_ce0 : STD_LOGIC;
    signal sigma_array_we0 : STD_LOGIC;
    signal sigma_array_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sigma_array_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sigma_array_ce1 : STD_LOGIC;
    signal sigma_array_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal travel_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal travel_ce0 : STD_LOGIC;
    signal travel_we0 : STD_LOGIC;
    signal travel_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal travel_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal s_array_ce0 : STD_LOGIC;
    signal s_array_we0 : STD_LOGIC;
    signal s_array_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal s_array_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal s_array_ce1 : STD_LOGIC;
    signal s_array_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_index_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_index_array_ce0 : STD_LOGIC;
    signal p_index_array_we0 : STD_LOGIC;
    signal p_index_array_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_index_array_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_index_array_ce1 : STD_LOGIC;
    signal p_index_array_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal delta_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal delta_array_ce0 : STD_LOGIC;
    signal delta_array_we0 : STD_LOGIC;
    signal delta_array_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal delta_array_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal delta_array_ce1 : STD_LOGIC;
    signal delta_array_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal q_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal q_array_ce0 : STD_LOGIC;
    signal q_array_we0 : STD_LOGIC;
    signal q_array_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal q_array_ce1 : STD_LOGIC;
    signal q_array_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal v : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal w : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal sigma_tmp : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_array_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_array_ce0 : STD_LOGIC;
    signal p_array_we0 : STD_LOGIC;
    signal p_array_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem0_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal gmem1_blk_n_AR : STD_LOGIC;
    signal gmem3_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal gmem3_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal trunc_ln6_fu_381_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln6_reg_571 : STD_LOGIC_VECTOR (11 downto 0);
    signal btwn_read_reg_577 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_fu_394_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_reg_587 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_reg_592 : STD_LOGIC_VECTOR (61 downto 0);
    signal select_ln145_fu_420_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln145_reg_598 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln1_reg_603 : STD_LOGIC_VECTOR (61 downto 0);
    signal select_ln154_fu_444_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln154_reg_609 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln145_fu_462_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln154_fu_476_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_634 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal trunc_ln4_reg_648 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln165_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln300_fu_529_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln300_reg_654 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_ap_start : STD_LOGIC;
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_ap_done : STD_LOGIC;
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_ap_idle : STD_LOGIC;
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_ap_ready : STD_LOGIC;
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_AWVALID : STD_LOGIC;
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_WVALID : STD_LOGIC;
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_WLAST : STD_LOGIC;
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_ARVALID : STD_LOGIC;
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_RREADY : STD_LOGIC;
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_BREADY : STD_LOGIC;
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_offset_buf_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_offset_buf_ce0 : STD_LOGIC;
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_offset_buf_we0 : STD_LOGIC;
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_offset_buf_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_btwn_buf_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_btwn_buf_ce0 : STD_LOGIC;
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_btwn_buf_we0 : STD_LOGIC;
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_btwn_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_ap_start : STD_LOGIC;
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_ap_done : STD_LOGIC;
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_ap_idle : STD_LOGIC;
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_ap_ready : STD_LOGIC;
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_AWVALID : STD_LOGIC;
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_WVALID : STD_LOGIC;
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_WLAST : STD_LOGIC;
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_ARVALID : STD_LOGIC;
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_RREADY : STD_LOGIC;
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_BREADY : STD_LOGIC;
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_column_buf_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_column_buf_ce0 : STD_LOGIC;
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_column_buf_we0 : STD_LOGIC;
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_column_buf_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dut_Pipeline_Clear_loop_fu_282_ap_start : STD_LOGIC;
    signal grp_dut_Pipeline_Clear_loop_fu_282_ap_done : STD_LOGIC;
    signal grp_dut_Pipeline_Clear_loop_fu_282_ap_idle : STD_LOGIC;
    signal grp_dut_Pipeline_Clear_loop_fu_282_ap_ready : STD_LOGIC;
    signal grp_dut_Pipeline_Clear_loop_fu_282_dist_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dut_Pipeline_Clear_loop_fu_282_dist_array_ce0 : STD_LOGIC;
    signal grp_dut_Pipeline_Clear_loop_fu_282_dist_array_we0 : STD_LOGIC;
    signal grp_dut_Pipeline_Clear_loop_fu_282_dist_array_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dut_Pipeline_Clear_loop_fu_282_sigma_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dut_Pipeline_Clear_loop_fu_282_sigma_array_ce0 : STD_LOGIC;
    signal grp_dut_Pipeline_Clear_loop_fu_282_sigma_array_we0 : STD_LOGIC;
    signal grp_dut_Pipeline_Clear_loop_fu_282_sigma_array_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_Pipeline_Clear_loop_fu_282_travel_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dut_Pipeline_Clear_loop_fu_282_travel_ce0 : STD_LOGIC;
    signal grp_dut_Pipeline_Clear_loop_fu_282_travel_we0 : STD_LOGIC;
    signal grp_dut_Pipeline_Clear_loop_fu_282_travel_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dut_Pipeline_Clear_loop_fu_282_s_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dut_Pipeline_Clear_loop_fu_282_s_array_ce0 : STD_LOGIC;
    signal grp_dut_Pipeline_Clear_loop_fu_282_s_array_we0 : STD_LOGIC;
    signal grp_dut_Pipeline_Clear_loop_fu_282_s_array_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dut_Pipeline_Clear_loop_fu_282_p_index_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dut_Pipeline_Clear_loop_fu_282_p_index_array_ce0 : STD_LOGIC;
    signal grp_dut_Pipeline_Clear_loop_fu_282_p_index_array_we0 : STD_LOGIC;
    signal grp_dut_Pipeline_Clear_loop_fu_282_p_index_array_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_dut_Pipeline_Clear_loop_fu_282_delta_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dut_Pipeline_Clear_loop_fu_282_delta_array_ce0 : STD_LOGIC;
    signal grp_dut_Pipeline_Clear_loop_fu_282_delta_array_we0 : STD_LOGIC;
    signal grp_dut_Pipeline_Clear_loop_fu_282_delta_array_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_Pipeline_Clear_loop_fu_282_q_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dut_Pipeline_Clear_loop_fu_282_q_array_ce0 : STD_LOGIC;
    signal grp_dut_Pipeline_Clear_loop_fu_282_q_array_we0 : STD_LOGIC;
    signal grp_dut_Pipeline_Clear_loop_fu_282_q_array_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_ap_start : STD_LOGIC;
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_ap_done : STD_LOGIC;
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_ap_idle : STD_LOGIC;
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_ap_ready : STD_LOGIC;
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_q_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_q_array_ce0 : STD_LOGIC;
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_q_array_we0 : STD_LOGIC;
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_q_array_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_q_array_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_q_array_ce1 : STD_LOGIC;
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_v_o : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_v_o_ap_vld : STD_LOGIC;
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_s_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_s_array_ce0 : STD_LOGIC;
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_s_array_we0 : STD_LOGIC;
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_s_array_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_offset_buf_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_offset_buf_ce0 : STD_LOGIC;
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_offset_buf_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_offset_buf_ce1 : STD_LOGIC;
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_dist_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_dist_array_ce0 : STD_LOGIC;
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_dist_array_we0 : STD_LOGIC;
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_dist_array_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_dist_array_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_dist_array_ce1 : STD_LOGIC;
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_sigma_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_sigma_array_ce0 : STD_LOGIC;
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_sigma_array_we0 : STD_LOGIC;
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_sigma_array_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_sigma_array_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_sigma_array_ce1 : STD_LOGIC;
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_q_index_o : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_q_index_o_ap_vld : STD_LOGIC;
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_column_buf_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_column_buf_ce0 : STD_LOGIC;
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_w : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_w_ap_vld : STD_LOGIC;
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_travel_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_travel_ce0 : STD_LOGIC;
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_travel_we0 : STD_LOGIC;
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_travel_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_sigma_tmp : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_sigma_tmp_ap_vld : STD_LOGIC;
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_index_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_index_array_ce0 : STD_LOGIC;
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_index_array_we0 : STD_LOGIC;
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_index_array_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_index_array_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_index_array_ce1 : STD_LOGIC;
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_array_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_array_ce0 : STD_LOGIC;
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_array_we0 : STD_LOGIC;
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_array_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_grp_fu_667_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_grp_fu_667_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_grp_fu_667_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_grp_fu_667_p_ce : STD_LOGIC;
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_grp_fu_671_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_grp_fu_671_p_ce : STD_LOGIC;
    signal grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_ap_start : STD_LOGIC;
    signal grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_ap_done : STD_LOGIC;
    signal grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_ap_idle : STD_LOGIC;
    signal grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_ap_ready : STD_LOGIC;
    signal grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_s_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_s_array_ce0 : STD_LOGIC;
    signal grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_s_array_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_s_array_ce1 : STD_LOGIC;
    signal grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_sigma_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_sigma_array_ce0 : STD_LOGIC;
    signal grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_w_o : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_w_o_ap_vld : STD_LOGIC;
    signal grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_p_index_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_p_index_array_ce0 : STD_LOGIC;
    signal grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_delta_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_delta_array_ce0 : STD_LOGIC;
    signal grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_delta_array_we0 : STD_LOGIC;
    signal grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_delta_array_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_delta_array_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_delta_array_ce1 : STD_LOGIC;
    signal grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_btwn_buf_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_btwn_buf_ce0 : STD_LOGIC;
    signal grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_btwn_buf_we0 : STD_LOGIC;
    signal grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_btwn_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_sigma_tmp_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_sigma_tmp_o_ap_vld : STD_LOGIC;
    signal grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_p_array_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_p_array_ce0 : STD_LOGIC;
    signal grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_v : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_v_ap_vld : STD_LOGIC;
    signal grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_grp_fu_667_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_grp_fu_667_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_grp_fu_667_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_grp_fu_667_p_ce : STD_LOGIC;
    signal grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_grp_fu_671_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_grp_fu_671_p_ce : STD_LOGIC;
    signal grp_dut_Pipeline_Output_loop_fu_371_ap_start : STD_LOGIC;
    signal grp_dut_Pipeline_Output_loop_fu_371_ap_done : STD_LOGIC;
    signal grp_dut_Pipeline_Output_loop_fu_371_ap_idle : STD_LOGIC;
    signal grp_dut_Pipeline_Output_loop_fu_371_ap_ready : STD_LOGIC;
    signal grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_AWVALID : STD_LOGIC;
    signal grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_WVALID : STD_LOGIC;
    signal grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_WLAST : STD_LOGIC;
    signal grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_ARVALID : STD_LOGIC;
    signal grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_RREADY : STD_LOGIC;
    signal grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_BREADY : STD_LOGIC;
    signal grp_dut_Pipeline_Output_loop_fu_371_btwn_buf_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dut_Pipeline_Output_loop_fu_371_btwn_buf_ce0 : STD_LOGIC;
    signal gmem0_AWREADY : STD_LOGIC;
    signal gmem0_WREADY : STD_LOGIC;
    signal gmem0_ARVALID : STD_LOGIC;
    signal gmem0_ARREADY : STD_LOGIC;
    signal gmem0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_RVALID : STD_LOGIC;
    signal gmem0_RREADY : STD_LOGIC;
    signal gmem0_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_RFIFONUM : STD_LOGIC_VECTOR (12 downto 0);
    signal gmem0_BVALID : STD_LOGIC;
    signal gmem1_AWREADY : STD_LOGIC;
    signal gmem1_WREADY : STD_LOGIC;
    signal gmem1_ARVALID : STD_LOGIC;
    signal gmem1_ARREADY : STD_LOGIC;
    signal gmem1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem1_RVALID : STD_LOGIC;
    signal gmem1_RREADY : STD_LOGIC;
    signal gmem1_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem1_RFIFONUM : STD_LOGIC_VECTOR (12 downto 0);
    signal gmem1_BVALID : STD_LOGIC;
    signal gmem3_AWVALID : STD_LOGIC;
    signal gmem3_AWREADY : STD_LOGIC;
    signal gmem3_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem3_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem3_WVALID : STD_LOGIC;
    signal gmem3_WREADY : STD_LOGIC;
    signal gmem3_ARREADY : STD_LOGIC;
    signal gmem3_RVALID : STD_LOGIC;
    signal gmem3_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem3_RFIFONUM : STD_LOGIC_VECTOR (12 downto 0);
    signal gmem3_BVALID : STD_LOGIC;
    signal gmem3_BREADY : STD_LOGIC;
    signal grp_dut_Pipeline_Store_vertice_loop_fu_259_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal grp_dut_Pipeline_Store_edge_loop_fu_272_ap_start_reg : STD_LOGIC := '0';
    signal grp_dut_Pipeline_Clear_loop_fu_282_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (87 downto 0);
    signal ap_NS_fsm_state46 : STD_LOGIC;
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal grp_dut_Pipeline_Output_loop_fu_371_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal sext_ln145_fu_452_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln154_fu_466_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln300_fu_541_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state3_io : BOOLEAN;
    signal zext_ln300_fu_551_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_fu_206 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_3_fu_489_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln145_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln145_fu_399_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln154_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln6_1_fu_390_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln162_fu_495_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln300_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_667_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_667_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_667_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_667_ce : STD_LOGIC;
    signal grp_fu_671_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_671_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_671_ce : STD_LOGIC;
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_block_state42_on_subcall_done : BOOLEAN;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal ap_ST_fsm_state78_blk : STD_LOGIC;
    signal ap_ST_fsm_state79_blk : STD_LOGIC;
    signal ap_ST_fsm_state80_blk : STD_LOGIC;
    signal ap_ST_fsm_state81_blk : STD_LOGIC;
    signal ap_ST_fsm_state82_blk : STD_LOGIC;
    signal ap_ST_fsm_state83_blk : STD_LOGIC;
    signal ap_ST_fsm_state84_blk : STD_LOGIC;
    signal ap_ST_fsm_state85_blk : STD_LOGIC;
    signal ap_ST_fsm_state86_blk : STD_LOGIC;
    signal ap_ST_fsm_state87_blk : STD_LOGIC;
    signal ap_ST_fsm_state88_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dut_dut_Pipeline_Store_vertice_loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem0_AWREADY : IN STD_LOGIC;
        m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WVALID : OUT STD_LOGIC;
        m_axi_gmem0_WREADY : IN STD_LOGIC;
        m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_WLAST : OUT STD_LOGIC;
        m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem0_ARREADY : IN STD_LOGIC;
        m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RVALID : IN STD_LOGIC;
        m_axi_gmem0_RREADY : OUT STD_LOGIC;
        m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_RLAST : IN STD_LOGIC;
        m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
        m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BVALID : IN STD_LOGIC;
        m_axi_gmem0_BREADY : OUT STD_LOGIC;
        m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sext_ln145 : IN STD_LOGIC_VECTOR (61 downto 0);
        add : IN STD_LOGIC_VECTOR (31 downto 0);
        numVert : IN STD_LOGIC_VECTOR (31 downto 0);
        offset_buf_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        offset_buf_ce0 : OUT STD_LOGIC;
        offset_buf_we0 : OUT STD_LOGIC;
        offset_buf_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        btwn_buf_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        btwn_buf_ce0 : OUT STD_LOGIC;
        btwn_buf_we0 : OUT STD_LOGIC;
        btwn_buf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_dut_Pipeline_Store_edge_loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem1_AWVALID : OUT STD_LOGIC;
        m_axi_gmem1_AWREADY : IN STD_LOGIC;
        m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WVALID : OUT STD_LOGIC;
        m_axi_gmem1_WREADY : IN STD_LOGIC;
        m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_WLAST : OUT STD_LOGIC;
        m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARVALID : OUT STD_LOGIC;
        m_axi_gmem1_ARREADY : IN STD_LOGIC;
        m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RVALID : IN STD_LOGIC;
        m_axi_gmem1_RREADY : OUT STD_LOGIC;
        m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_RLAST : IN STD_LOGIC;
        m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
        m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BVALID : IN STD_LOGIC;
        m_axi_gmem1_BREADY : OUT STD_LOGIC;
        m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sext_ln154 : IN STD_LOGIC_VECTOR (61 downto 0);
        numEdge : IN STD_LOGIC_VECTOR (31 downto 0);
        column_buf_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        column_buf_ce0 : OUT STD_LOGIC;
        column_buf_we0 : OUT STD_LOGIC;
        column_buf_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component dut_dut_Pipeline_Clear_loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        idxprom52 : IN STD_LOGIC_VECTOR (11 downto 0);
        i_2 : IN STD_LOGIC_VECTOR (11 downto 0);
        zext_ln169 : IN STD_LOGIC_VECTOR (11 downto 0);
        dist_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        dist_array_ce0 : OUT STD_LOGIC;
        dist_array_we0 : OUT STD_LOGIC;
        dist_array_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        sigma_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        sigma_array_ce0 : OUT STD_LOGIC;
        sigma_array_we0 : OUT STD_LOGIC;
        sigma_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        travel_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        travel_ce0 : OUT STD_LOGIC;
        travel_we0 : OUT STD_LOGIC;
        travel_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        s_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        s_array_ce0 : OUT STD_LOGIC;
        s_array_we0 : OUT STD_LOGIC;
        s_array_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        p_index_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        p_index_array_ce0 : OUT STD_LOGIC;
        p_index_array_we0 : OUT STD_LOGIC;
        p_index_array_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        delta_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        delta_array_ce0 : OUT STD_LOGIC;
        delta_array_we0 : OUT STD_LOGIC;
        delta_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        q_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        q_array_ce0 : OUT STD_LOGIC;
        q_array_we0 : OUT STD_LOGIC;
        q_array_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component dut_dut_Pipeline_Queue_loop_Edge_loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        q_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        q_array_ce0 : OUT STD_LOGIC;
        q_array_we0 : OUT STD_LOGIC;
        q_array_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        q_array_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        q_array_ce1 : OUT STD_LOGIC;
        q_array_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        v_i : IN STD_LOGIC_VECTOR (15 downto 0);
        v_o : OUT STD_LOGIC_VECTOR (15 downto 0);
        v_o_ap_vld : OUT STD_LOGIC;
        s_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        s_array_ce0 : OUT STD_LOGIC;
        s_array_we0 : OUT STD_LOGIC;
        s_array_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        offset_buf_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        offset_buf_ce0 : OUT STD_LOGIC;
        offset_buf_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        offset_buf_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        offset_buf_ce1 : OUT STD_LOGIC;
        offset_buf_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dist_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        dist_array_ce0 : OUT STD_LOGIC;
        dist_array_we0 : OUT STD_LOGIC;
        dist_array_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dist_array_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        dist_array_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        dist_array_ce1 : OUT STD_LOGIC;
        dist_array_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        sigma_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        sigma_array_ce0 : OUT STD_LOGIC;
        sigma_array_we0 : OUT STD_LOGIC;
        sigma_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        sigma_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        sigma_array_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        sigma_array_ce1 : OUT STD_LOGIC;
        sigma_array_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q_index_i : IN STD_LOGIC_VECTOR (15 downto 0);
        q_index_o : OUT STD_LOGIC_VECTOR (15 downto 0);
        q_index_o_ap_vld : OUT STD_LOGIC;
        column_buf_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        column_buf_ce0 : OUT STD_LOGIC;
        column_buf_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        w : OUT STD_LOGIC_VECTOR (11 downto 0);
        w_ap_vld : OUT STD_LOGIC;
        travel_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        travel_ce0 : OUT STD_LOGIC;
        travel_we0 : OUT STD_LOGIC;
        travel_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        travel_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        sigma_tmp : OUT STD_LOGIC_VECTOR (31 downto 0);
        sigma_tmp_ap_vld : OUT STD_LOGIC;
        p_index_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        p_index_array_ce0 : OUT STD_LOGIC;
        p_index_array_we0 : OUT STD_LOGIC;
        p_index_array_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_index_array_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        p_index_array_ce1 : OUT STD_LOGIC;
        p_index_array_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_array_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        p_array_ce0 : OUT STD_LOGIC;
        p_array_we0 : OUT STD_LOGIC;
        p_array_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        grp_fu_667_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_667_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_667_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_667_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_667_p_ce : OUT STD_LOGIC;
        grp_fu_671_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_671_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_671_p_ce : OUT STD_LOGIC );
    end component;


    component dut_dut_Pipeline_Dequeue_loop_Computing_loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        zext_ln265 : IN STD_LOGIC_VECTOR (15 downto 0);
        zext_ln169 : IN STD_LOGIC_VECTOR (11 downto 0);
        s_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        s_array_ce0 : OUT STD_LOGIC;
        s_array_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        s_array_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        s_array_ce1 : OUT STD_LOGIC;
        s_array_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        sigma_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        sigma_array_ce0 : OUT STD_LOGIC;
        sigma_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_i : IN STD_LOGIC_VECTOR (11 downto 0);
        w_o : OUT STD_LOGIC_VECTOR (11 downto 0);
        w_o_ap_vld : OUT STD_LOGIC;
        p_index_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        p_index_array_ce0 : OUT STD_LOGIC;
        p_index_array_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        delta_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        delta_array_ce0 : OUT STD_LOGIC;
        delta_array_we0 : OUT STD_LOGIC;
        delta_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        delta_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        delta_array_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        delta_array_ce1 : OUT STD_LOGIC;
        delta_array_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        btwn_buf_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        btwn_buf_ce0 : OUT STD_LOGIC;
        btwn_buf_we0 : OUT STD_LOGIC;
        btwn_buf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        btwn_buf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        sigma_tmp_i : IN STD_LOGIC_VECTOR (31 downto 0);
        sigma_tmp_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        sigma_tmp_o_ap_vld : OUT STD_LOGIC;
        p_array_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        p_array_ce0 : OUT STD_LOGIC;
        p_array_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        v : OUT STD_LOGIC_VECTOR (15 downto 0);
        v_ap_vld : OUT STD_LOGIC;
        grp_fu_667_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_667_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_667_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_667_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_667_p_ce : OUT STD_LOGIC;
        grp_fu_671_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_671_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_671_p_ce : OUT STD_LOGIC );
    end component;


    component dut_dut_Pipeline_Output_loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem3_AWVALID : OUT STD_LOGIC;
        m_axi_gmem3_AWREADY : IN STD_LOGIC;
        m_axi_gmem3_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem3_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_WVALID : OUT STD_LOGIC;
        m_axi_gmem3_WREADY : IN STD_LOGIC;
        m_axi_gmem3_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_WLAST : OUT STD_LOGIC;
        m_axi_gmem3_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_ARVALID : OUT STD_LOGIC;
        m_axi_gmem3_ARREADY : IN STD_LOGIC;
        m_axi_gmem3_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem3_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_RVALID : IN STD_LOGIC;
        m_axi_gmem3_RREADY : OUT STD_LOGIC;
        m_axi_gmem3_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_RLAST : IN STD_LOGIC;
        m_axi_gmem3_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
        m_axi_gmem3_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_BVALID : IN STD_LOGIC;
        m_axi_gmem3_BREADY : OUT STD_LOGIC;
        m_axi_gmem3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sext_ln300 : IN STD_LOGIC_VECTOR (61 downto 0);
        numVert : IN STD_LOGIC_VECTOR (31 downto 0);
        btwn_buf_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        btwn_buf_ce0 : OUT STD_LOGIC;
        btwn_buf_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fadd_32ns_32ns_32_7_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_sitofp_32ns_32_5_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_offset_buf_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component dut_btwn_buf_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_column_buf_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component dut_sigma_array_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_travel_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dut_p_index_array_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component dut_q_array_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component dut_p_array_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component dut_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        numVert : OUT STD_LOGIC_VECTOR (31 downto 0);
        numEdge : OUT STD_LOGIC_VECTOR (31 downto 0);
        offset : OUT STD_LOGIC_VECTOR (63 downto 0);
        column : OUT STD_LOGIC_VECTOR (63 downto 0);
        btwn : OUT STD_LOGIC_VECTOR (63 downto 0);
        tmp0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        tmp1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        tmp2 : OUT STD_LOGIC_VECTOR (63 downto 0);
        tmp3 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_continue : OUT STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component dut_gmem0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (12 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component dut_gmem1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (12 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component dut_gmem3_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (12 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    offset_buf_U : component dut_offset_buf_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 3534,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => offset_buf_address0,
        ce0 => offset_buf_ce0,
        we0 => offset_buf_we0,
        d0 => grp_dut_Pipeline_Store_vertice_loop_fu_259_offset_buf_d0,
        q0 => offset_buf_q0,
        address1 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_offset_buf_address1,
        ce1 => offset_buf_ce1,
        q1 => offset_buf_q1);

    btwn_buf_U : component dut_btwn_buf_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 3534,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => btwn_buf_address0,
        ce0 => btwn_buf_ce0,
        we0 => btwn_buf_we0,
        d0 => btwn_buf_d0,
        q0 => btwn_buf_q0);

    column_buf_U : component dut_column_buf_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 41594,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => column_buf_address0,
        ce0 => column_buf_ce0,
        we0 => column_buf_we0,
        d0 => grp_dut_Pipeline_Store_edge_loop_fu_272_column_buf_d0,
        q0 => column_buf_q0);

    dist_array_U : component dut_offset_buf_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 3534,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dist_array_address0,
        ce0 => dist_array_ce0,
        we0 => dist_array_we0,
        d0 => dist_array_d0,
        q0 => dist_array_q0,
        address1 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_dist_array_address1,
        ce1 => dist_array_ce1,
        q1 => dist_array_q1);

    sigma_array_U : component dut_sigma_array_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 3534,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sigma_array_address0,
        ce0 => sigma_array_ce0,
        we0 => sigma_array_we0,
        d0 => sigma_array_d0,
        q0 => sigma_array_q0,
        address1 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_sigma_array_address1,
        ce1 => sigma_array_ce1,
        q1 => sigma_array_q1);

    travel_U : component dut_travel_RAM_AUTO_1R1W
    generic map (
        DataWidth => 1,
        AddressRange => 3534,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => travel_address0,
        ce0 => travel_ce0,
        we0 => travel_we0,
        d0 => travel_d0,
        q0 => travel_q0);

    s_array_U : component dut_offset_buf_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 3534,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => s_array_address0,
        ce0 => s_array_ce0,
        we0 => s_array_we0,
        d0 => s_array_d0,
        q0 => s_array_q0,
        address1 => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_s_array_address1,
        ce1 => s_array_ce1,
        q1 => s_array_q1);

    p_index_array_U : component dut_p_index_array_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 3534,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => p_index_array_address0,
        ce0 => p_index_array_ce0,
        we0 => p_index_array_we0,
        d0 => p_index_array_d0,
        q0 => p_index_array_q0,
        address1 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_index_array_address1,
        ce1 => p_index_array_ce1,
        q1 => p_index_array_q1);

    delta_array_U : component dut_sigma_array_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 3534,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => delta_array_address0,
        ce0 => delta_array_ce0,
        we0 => delta_array_we0,
        d0 => delta_array_d0,
        q0 => delta_array_q0,
        address1 => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_delta_array_address1,
        ce1 => delta_array_ce1,
        q1 => delta_array_q1);

    q_array_U : component dut_q_array_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 3534,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => q_array_address0,
        ce0 => q_array_ce0,
        we0 => q_array_we0,
        d0 => q_array_d0,
        address1 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_q_array_address1,
        ce1 => q_array_ce1,
        q1 => q_array_q1);

    p_array_U : component dut_p_array_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 70680,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => p_array_address0,
        ce0 => p_array_ce0,
        we0 => p_array_we0,
        d0 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_array_d0,
        q0 => p_array_q0);

    grp_dut_Pipeline_Store_vertice_loop_fu_259 : component dut_dut_Pipeline_Store_vertice_loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_dut_Pipeline_Store_vertice_loop_fu_259_ap_start,
        ap_done => grp_dut_Pipeline_Store_vertice_loop_fu_259_ap_done,
        ap_idle => grp_dut_Pipeline_Store_vertice_loop_fu_259_ap_idle,
        ap_ready => grp_dut_Pipeline_Store_vertice_loop_fu_259_ap_ready,
        m_axi_gmem0_AWVALID => grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY => ap_const_logic_0,
        m_axi_gmem0_AWADDR => grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID => grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN => grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE => grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST => grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK => grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE => grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT => grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS => grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION => grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER => grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID => grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY => ap_const_logic_0,
        m_axi_gmem0_WDATA => grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB => grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST => grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_WLAST,
        m_axi_gmem0_WID => grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_WID,
        m_axi_gmem0_WUSER => grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID => grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY => gmem0_ARREADY,
        m_axi_gmem0_ARADDR => grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID => grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN => grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE => grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST => grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK => grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE => grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT => grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS => grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION => grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER => grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID => gmem0_RVALID,
        m_axi_gmem0_RREADY => grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA => gmem0_RDATA,
        m_axi_gmem0_RLAST => ap_const_logic_0,
        m_axi_gmem0_RID => ap_const_lv1_0,
        m_axi_gmem0_RFIFONUM => gmem0_RFIFONUM,
        m_axi_gmem0_RUSER => ap_const_lv1_0,
        m_axi_gmem0_RRESP => ap_const_lv2_0,
        m_axi_gmem0_BVALID => ap_const_logic_0,
        m_axi_gmem0_BREADY => grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP => ap_const_lv2_0,
        m_axi_gmem0_BID => ap_const_lv1_0,
        m_axi_gmem0_BUSER => ap_const_lv1_0,
        sext_ln145 => trunc_ln_reg_592,
        add => add_reg_587,
        numVert => numVert,
        offset_buf_address0 => grp_dut_Pipeline_Store_vertice_loop_fu_259_offset_buf_address0,
        offset_buf_ce0 => grp_dut_Pipeline_Store_vertice_loop_fu_259_offset_buf_ce0,
        offset_buf_we0 => grp_dut_Pipeline_Store_vertice_loop_fu_259_offset_buf_we0,
        offset_buf_d0 => grp_dut_Pipeline_Store_vertice_loop_fu_259_offset_buf_d0,
        btwn_buf_address0 => grp_dut_Pipeline_Store_vertice_loop_fu_259_btwn_buf_address0,
        btwn_buf_ce0 => grp_dut_Pipeline_Store_vertice_loop_fu_259_btwn_buf_ce0,
        btwn_buf_we0 => grp_dut_Pipeline_Store_vertice_loop_fu_259_btwn_buf_we0,
        btwn_buf_d0 => grp_dut_Pipeline_Store_vertice_loop_fu_259_btwn_buf_d0);

    grp_dut_Pipeline_Store_edge_loop_fu_272 : component dut_dut_Pipeline_Store_edge_loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_dut_Pipeline_Store_edge_loop_fu_272_ap_start,
        ap_done => grp_dut_Pipeline_Store_edge_loop_fu_272_ap_done,
        ap_idle => grp_dut_Pipeline_Store_edge_loop_fu_272_ap_idle,
        ap_ready => grp_dut_Pipeline_Store_edge_loop_fu_272_ap_ready,
        m_axi_gmem1_AWVALID => grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY => ap_const_logic_0,
        m_axi_gmem1_AWADDR => grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID => grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN => grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE => grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST => grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK => grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE => grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT => grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS => grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION => grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER => grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID => grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY => ap_const_logic_0,
        m_axi_gmem1_WDATA => grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB => grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST => grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_WLAST,
        m_axi_gmem1_WID => grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_WID,
        m_axi_gmem1_WUSER => grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID => grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY => gmem1_ARREADY,
        m_axi_gmem1_ARADDR => grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID => grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN => grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE => grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST => grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK => grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE => grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT => grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS => grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION => grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER => grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID => gmem1_RVALID,
        m_axi_gmem1_RREADY => grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA => gmem1_RDATA,
        m_axi_gmem1_RLAST => ap_const_logic_0,
        m_axi_gmem1_RID => ap_const_lv1_0,
        m_axi_gmem1_RFIFONUM => gmem1_RFIFONUM,
        m_axi_gmem1_RUSER => ap_const_lv1_0,
        m_axi_gmem1_RRESP => ap_const_lv2_0,
        m_axi_gmem1_BVALID => ap_const_logic_0,
        m_axi_gmem1_BREADY => grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP => ap_const_lv2_0,
        m_axi_gmem1_BID => ap_const_lv1_0,
        m_axi_gmem1_BUSER => ap_const_lv1_0,
        sext_ln154 => trunc_ln1_reg_603,
        numEdge => numEdge,
        column_buf_address0 => grp_dut_Pipeline_Store_edge_loop_fu_272_column_buf_address0,
        column_buf_ce0 => grp_dut_Pipeline_Store_edge_loop_fu_272_column_buf_ce0,
        column_buf_we0 => grp_dut_Pipeline_Store_edge_loop_fu_272_column_buf_we0,
        column_buf_d0 => grp_dut_Pipeline_Store_edge_loop_fu_272_column_buf_d0);

    grp_dut_Pipeline_Clear_loop_fu_282 : component dut_dut_Pipeline_Clear_loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_dut_Pipeline_Clear_loop_fu_282_ap_start,
        ap_done => grp_dut_Pipeline_Clear_loop_fu_282_ap_done,
        ap_idle => grp_dut_Pipeline_Clear_loop_fu_282_ap_idle,
        ap_ready => grp_dut_Pipeline_Clear_loop_fu_282_ap_ready,
        idxprom52 => i_reg_634,
        i_2 => i_reg_634,
        zext_ln169 => i_reg_634,
        dist_array_address0 => grp_dut_Pipeline_Clear_loop_fu_282_dist_array_address0,
        dist_array_ce0 => grp_dut_Pipeline_Clear_loop_fu_282_dist_array_ce0,
        dist_array_we0 => grp_dut_Pipeline_Clear_loop_fu_282_dist_array_we0,
        dist_array_d0 => grp_dut_Pipeline_Clear_loop_fu_282_dist_array_d0,
        sigma_array_address0 => grp_dut_Pipeline_Clear_loop_fu_282_sigma_array_address0,
        sigma_array_ce0 => grp_dut_Pipeline_Clear_loop_fu_282_sigma_array_ce0,
        sigma_array_we0 => grp_dut_Pipeline_Clear_loop_fu_282_sigma_array_we0,
        sigma_array_d0 => grp_dut_Pipeline_Clear_loop_fu_282_sigma_array_d0,
        travel_address0 => grp_dut_Pipeline_Clear_loop_fu_282_travel_address0,
        travel_ce0 => grp_dut_Pipeline_Clear_loop_fu_282_travel_ce0,
        travel_we0 => grp_dut_Pipeline_Clear_loop_fu_282_travel_we0,
        travel_d0 => grp_dut_Pipeline_Clear_loop_fu_282_travel_d0,
        s_array_address0 => grp_dut_Pipeline_Clear_loop_fu_282_s_array_address0,
        s_array_ce0 => grp_dut_Pipeline_Clear_loop_fu_282_s_array_ce0,
        s_array_we0 => grp_dut_Pipeline_Clear_loop_fu_282_s_array_we0,
        s_array_d0 => grp_dut_Pipeline_Clear_loop_fu_282_s_array_d0,
        p_index_array_address0 => grp_dut_Pipeline_Clear_loop_fu_282_p_index_array_address0,
        p_index_array_ce0 => grp_dut_Pipeline_Clear_loop_fu_282_p_index_array_ce0,
        p_index_array_we0 => grp_dut_Pipeline_Clear_loop_fu_282_p_index_array_we0,
        p_index_array_d0 => grp_dut_Pipeline_Clear_loop_fu_282_p_index_array_d0,
        delta_array_address0 => grp_dut_Pipeline_Clear_loop_fu_282_delta_array_address0,
        delta_array_ce0 => grp_dut_Pipeline_Clear_loop_fu_282_delta_array_ce0,
        delta_array_we0 => grp_dut_Pipeline_Clear_loop_fu_282_delta_array_we0,
        delta_array_d0 => grp_dut_Pipeline_Clear_loop_fu_282_delta_array_d0,
        q_array_address0 => grp_dut_Pipeline_Clear_loop_fu_282_q_array_address0,
        q_array_ce0 => grp_dut_Pipeline_Clear_loop_fu_282_q_array_ce0,
        q_array_we0 => grp_dut_Pipeline_Clear_loop_fu_282_q_array_we0,
        q_array_d0 => grp_dut_Pipeline_Clear_loop_fu_282_q_array_d0);

    grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303 : component dut_dut_Pipeline_Queue_loop_Edge_loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_ap_start,
        ap_done => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_ap_done,
        ap_idle => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_ap_idle,
        ap_ready => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_ap_ready,
        q_array_address0 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_q_array_address0,
        q_array_ce0 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_q_array_ce0,
        q_array_we0 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_q_array_we0,
        q_array_d0 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_q_array_d0,
        q_array_address1 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_q_array_address1,
        q_array_ce1 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_q_array_ce1,
        q_array_q1 => q_array_q1,
        v_i => v,
        v_o => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_v_o,
        v_o_ap_vld => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_v_o_ap_vld,
        s_array_address0 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_s_array_address0,
        s_array_ce0 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_s_array_ce0,
        s_array_we0 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_s_array_we0,
        s_array_d0 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_s_array_d0,
        offset_buf_address0 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_offset_buf_address0,
        offset_buf_ce0 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_offset_buf_ce0,
        offset_buf_q0 => offset_buf_q0,
        offset_buf_address1 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_offset_buf_address1,
        offset_buf_ce1 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_offset_buf_ce1,
        offset_buf_q1 => offset_buf_q1,
        dist_array_address0 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_dist_array_address0,
        dist_array_ce0 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_dist_array_ce0,
        dist_array_we0 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_dist_array_we0,
        dist_array_d0 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_dist_array_d0,
        dist_array_q0 => dist_array_q0,
        dist_array_address1 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_dist_array_address1,
        dist_array_ce1 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_dist_array_ce1,
        dist_array_q1 => dist_array_q1,
        sigma_array_address0 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_sigma_array_address0,
        sigma_array_ce0 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_sigma_array_ce0,
        sigma_array_we0 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_sigma_array_we0,
        sigma_array_d0 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_sigma_array_d0,
        sigma_array_q0 => sigma_array_q0,
        sigma_array_address1 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_sigma_array_address1,
        sigma_array_ce1 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_sigma_array_ce1,
        sigma_array_q1 => sigma_array_q1,
        q_index_i => q_index,
        q_index_o => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_q_index_o,
        q_index_o_ap_vld => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_q_index_o_ap_vld,
        column_buf_address0 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_column_buf_address0,
        column_buf_ce0 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_column_buf_ce0,
        column_buf_q0 => column_buf_q0,
        w => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_w,
        w_ap_vld => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_w_ap_vld,
        travel_address0 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_travel_address0,
        travel_ce0 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_travel_ce0,
        travel_we0 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_travel_we0,
        travel_d0 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_travel_d0,
        travel_q0 => travel_q0,
        sigma_tmp => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_sigma_tmp,
        sigma_tmp_ap_vld => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_sigma_tmp_ap_vld,
        p_index_array_address0 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_index_array_address0,
        p_index_array_ce0 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_index_array_ce0,
        p_index_array_we0 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_index_array_we0,
        p_index_array_d0 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_index_array_d0,
        p_index_array_address1 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_index_array_address1,
        p_index_array_ce1 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_index_array_ce1,
        p_index_array_q1 => p_index_array_q1,
        p_array_address0 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_array_address0,
        p_array_ce0 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_array_ce0,
        p_array_we0 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_array_we0,
        p_array_d0 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_array_d0,
        grp_fu_667_p_din0 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_grp_fu_667_p_din0,
        grp_fu_667_p_din1 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_grp_fu_667_p_din1,
        grp_fu_667_p_opcode => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_grp_fu_667_p_opcode,
        grp_fu_667_p_dout0 => grp_fu_667_p2,
        grp_fu_667_p_ce => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_grp_fu_667_p_ce,
        grp_fu_671_p_din0 => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_grp_fu_671_p_din0,
        grp_fu_671_p_dout0 => grp_fu_671_p1,
        grp_fu_671_p_ce => grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_grp_fu_671_p_ce);

    grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345 : component dut_dut_Pipeline_Dequeue_loop_Computing_loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_ap_start,
        ap_done => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_ap_done,
        ap_idle => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_ap_idle,
        ap_ready => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_ap_ready,
        zext_ln265 => q_index,
        zext_ln169 => i_reg_634,
        s_array_address0 => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_s_array_address0,
        s_array_ce0 => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_s_array_ce0,
        s_array_q0 => s_array_q0,
        s_array_address1 => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_s_array_address1,
        s_array_ce1 => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_s_array_ce1,
        s_array_q1 => s_array_q1,
        sigma_array_address0 => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_sigma_array_address0,
        sigma_array_ce0 => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_sigma_array_ce0,
        sigma_array_q0 => sigma_array_q0,
        w_i => w,
        w_o => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_w_o,
        w_o_ap_vld => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_w_o_ap_vld,
        p_index_array_address0 => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_p_index_array_address0,
        p_index_array_ce0 => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_p_index_array_ce0,
        p_index_array_q0 => p_index_array_q0,
        delta_array_address0 => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_delta_array_address0,
        delta_array_ce0 => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_delta_array_ce0,
        delta_array_we0 => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_delta_array_we0,
        delta_array_d0 => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_delta_array_d0,
        delta_array_q0 => delta_array_q0,
        delta_array_address1 => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_delta_array_address1,
        delta_array_ce1 => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_delta_array_ce1,
        delta_array_q1 => delta_array_q1,
        btwn_buf_address0 => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_btwn_buf_address0,
        btwn_buf_ce0 => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_btwn_buf_ce0,
        btwn_buf_we0 => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_btwn_buf_we0,
        btwn_buf_d0 => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_btwn_buf_d0,
        btwn_buf_q0 => btwn_buf_q0,
        sigma_tmp_i => sigma_tmp,
        sigma_tmp_o => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_sigma_tmp_o,
        sigma_tmp_o_ap_vld => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_sigma_tmp_o_ap_vld,
        p_array_address0 => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_p_array_address0,
        p_array_ce0 => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_p_array_ce0,
        p_array_q0 => p_array_q0,
        v => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_v,
        v_ap_vld => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_v_ap_vld,
        grp_fu_667_p_din0 => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_grp_fu_667_p_din0,
        grp_fu_667_p_din1 => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_grp_fu_667_p_din1,
        grp_fu_667_p_opcode => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_grp_fu_667_p_opcode,
        grp_fu_667_p_dout0 => grp_fu_667_p2,
        grp_fu_667_p_ce => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_grp_fu_667_p_ce,
        grp_fu_671_p_din0 => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_grp_fu_671_p_din0,
        grp_fu_671_p_dout0 => grp_fu_671_p1,
        grp_fu_671_p_ce => grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_grp_fu_671_p_ce);

    grp_dut_Pipeline_Output_loop_fu_371 : component dut_dut_Pipeline_Output_loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_dut_Pipeline_Output_loop_fu_371_ap_start,
        ap_done => grp_dut_Pipeline_Output_loop_fu_371_ap_done,
        ap_idle => grp_dut_Pipeline_Output_loop_fu_371_ap_idle,
        ap_ready => grp_dut_Pipeline_Output_loop_fu_371_ap_ready,
        m_axi_gmem3_AWVALID => grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_AWVALID,
        m_axi_gmem3_AWREADY => gmem3_AWREADY,
        m_axi_gmem3_AWADDR => grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_AWADDR,
        m_axi_gmem3_AWID => grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_AWID,
        m_axi_gmem3_AWLEN => grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_AWLEN,
        m_axi_gmem3_AWSIZE => grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_AWSIZE,
        m_axi_gmem3_AWBURST => grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_AWBURST,
        m_axi_gmem3_AWLOCK => grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_AWLOCK,
        m_axi_gmem3_AWCACHE => grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_AWCACHE,
        m_axi_gmem3_AWPROT => grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_AWPROT,
        m_axi_gmem3_AWQOS => grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_AWQOS,
        m_axi_gmem3_AWREGION => grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_AWREGION,
        m_axi_gmem3_AWUSER => grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_AWUSER,
        m_axi_gmem3_WVALID => grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_WVALID,
        m_axi_gmem3_WREADY => gmem3_WREADY,
        m_axi_gmem3_WDATA => grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_WDATA,
        m_axi_gmem3_WSTRB => grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_WSTRB,
        m_axi_gmem3_WLAST => grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_WLAST,
        m_axi_gmem3_WID => grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_WID,
        m_axi_gmem3_WUSER => grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_WUSER,
        m_axi_gmem3_ARVALID => grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_ARVALID,
        m_axi_gmem3_ARREADY => ap_const_logic_0,
        m_axi_gmem3_ARADDR => grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_ARADDR,
        m_axi_gmem3_ARID => grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_ARID,
        m_axi_gmem3_ARLEN => grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_ARLEN,
        m_axi_gmem3_ARSIZE => grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_ARSIZE,
        m_axi_gmem3_ARBURST => grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_ARBURST,
        m_axi_gmem3_ARLOCK => grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_ARLOCK,
        m_axi_gmem3_ARCACHE => grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_ARCACHE,
        m_axi_gmem3_ARPROT => grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_ARPROT,
        m_axi_gmem3_ARQOS => grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_ARQOS,
        m_axi_gmem3_ARREGION => grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_ARREGION,
        m_axi_gmem3_ARUSER => grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_ARUSER,
        m_axi_gmem3_RVALID => ap_const_logic_0,
        m_axi_gmem3_RREADY => grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_RREADY,
        m_axi_gmem3_RDATA => ap_const_lv32_0,
        m_axi_gmem3_RLAST => ap_const_logic_0,
        m_axi_gmem3_RID => ap_const_lv1_0,
        m_axi_gmem3_RFIFONUM => ap_const_lv13_0,
        m_axi_gmem3_RUSER => ap_const_lv1_0,
        m_axi_gmem3_RRESP => ap_const_lv2_0,
        m_axi_gmem3_BVALID => gmem3_BVALID,
        m_axi_gmem3_BREADY => grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_BREADY,
        m_axi_gmem3_BRESP => ap_const_lv2_0,
        m_axi_gmem3_BID => ap_const_lv1_0,
        m_axi_gmem3_BUSER => ap_const_lv1_0,
        sext_ln300 => trunc_ln4_reg_648,
        numVert => numVert,
        btwn_buf_address0 => grp_dut_Pipeline_Output_loop_fu_371_btwn_buf_address0,
        btwn_buf_ce0 => grp_dut_Pipeline_Output_loop_fu_371_btwn_buf_ce0,
        btwn_buf_q0 => btwn_buf_q0);

    control_s_axi_U : component dut_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        numVert => numVert,
        numEdge => numEdge,
        offset => offset,
        column => column,
        btwn => btwn,
        tmp0 => tmp0,
        tmp1 => tmp1,
        tmp2 => tmp2,
        tmp3 => tmp3,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_continue => ap_continue,
        ap_idle => ap_idle);

    gmem0_m_axi_U : component dut_gmem0_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 37,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 1,
        MAX_READ_BURST_LENGTH => 256,
        MAX_WRITE_BURST_LENGTH => 2,
        USER_RFIFONUM_WIDTH => 13,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM0_CACHE_VALUE,
        USER_DW => 32,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_gmem0_AWVALID,
        AWREADY => m_axi_gmem0_AWREADY,
        AWADDR => m_axi_gmem0_AWADDR,
        AWID => m_axi_gmem0_AWID,
        AWLEN => m_axi_gmem0_AWLEN,
        AWSIZE => m_axi_gmem0_AWSIZE,
        AWBURST => m_axi_gmem0_AWBURST,
        AWLOCK => m_axi_gmem0_AWLOCK,
        AWCACHE => m_axi_gmem0_AWCACHE,
        AWPROT => m_axi_gmem0_AWPROT,
        AWQOS => m_axi_gmem0_AWQOS,
        AWREGION => m_axi_gmem0_AWREGION,
        AWUSER => m_axi_gmem0_AWUSER,
        WVALID => m_axi_gmem0_WVALID,
        WREADY => m_axi_gmem0_WREADY,
        WDATA => m_axi_gmem0_WDATA,
        WSTRB => m_axi_gmem0_WSTRB,
        WLAST => m_axi_gmem0_WLAST,
        WID => m_axi_gmem0_WID,
        WUSER => m_axi_gmem0_WUSER,
        ARVALID => m_axi_gmem0_ARVALID,
        ARREADY => m_axi_gmem0_ARREADY,
        ARADDR => m_axi_gmem0_ARADDR,
        ARID => m_axi_gmem0_ARID,
        ARLEN => m_axi_gmem0_ARLEN,
        ARSIZE => m_axi_gmem0_ARSIZE,
        ARBURST => m_axi_gmem0_ARBURST,
        ARLOCK => m_axi_gmem0_ARLOCK,
        ARCACHE => m_axi_gmem0_ARCACHE,
        ARPROT => m_axi_gmem0_ARPROT,
        ARQOS => m_axi_gmem0_ARQOS,
        ARREGION => m_axi_gmem0_ARREGION,
        ARUSER => m_axi_gmem0_ARUSER,
        RVALID => m_axi_gmem0_RVALID,
        RREADY => m_axi_gmem0_RREADY,
        RDATA => m_axi_gmem0_RDATA,
        RLAST => m_axi_gmem0_RLAST,
        RID => m_axi_gmem0_RID,
        RUSER => m_axi_gmem0_RUSER,
        RRESP => m_axi_gmem0_RRESP,
        BVALID => m_axi_gmem0_BVALID,
        BREADY => m_axi_gmem0_BREADY,
        BRESP => m_axi_gmem0_BRESP,
        BID => m_axi_gmem0_BID,
        BUSER => m_axi_gmem0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem0_ARVALID,
        I_ARREADY => gmem0_ARREADY,
        I_ARADDR => gmem0_ARADDR,
        I_ARLEN => gmem0_ARLEN,
        I_RVALID => gmem0_RVALID,
        I_RREADY => gmem0_RREADY,
        I_RDATA => gmem0_RDATA,
        I_RFIFONUM => gmem0_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem0_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem0_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => gmem0_BVALID,
        I_BREADY => ap_const_logic_0);

    gmem1_m_axi_U : component dut_gmem1_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 37,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 1,
        MAX_READ_BURST_LENGTH => 256,
        MAX_WRITE_BURST_LENGTH => 2,
        USER_RFIFONUM_WIDTH => 13,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM1_CACHE_VALUE,
        USER_DW => 32,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_gmem1_AWVALID,
        AWREADY => m_axi_gmem1_AWREADY,
        AWADDR => m_axi_gmem1_AWADDR,
        AWID => m_axi_gmem1_AWID,
        AWLEN => m_axi_gmem1_AWLEN,
        AWSIZE => m_axi_gmem1_AWSIZE,
        AWBURST => m_axi_gmem1_AWBURST,
        AWLOCK => m_axi_gmem1_AWLOCK,
        AWCACHE => m_axi_gmem1_AWCACHE,
        AWPROT => m_axi_gmem1_AWPROT,
        AWQOS => m_axi_gmem1_AWQOS,
        AWREGION => m_axi_gmem1_AWREGION,
        AWUSER => m_axi_gmem1_AWUSER,
        WVALID => m_axi_gmem1_WVALID,
        WREADY => m_axi_gmem1_WREADY,
        WDATA => m_axi_gmem1_WDATA,
        WSTRB => m_axi_gmem1_WSTRB,
        WLAST => m_axi_gmem1_WLAST,
        WID => m_axi_gmem1_WID,
        WUSER => m_axi_gmem1_WUSER,
        ARVALID => m_axi_gmem1_ARVALID,
        ARREADY => m_axi_gmem1_ARREADY,
        ARADDR => m_axi_gmem1_ARADDR,
        ARID => m_axi_gmem1_ARID,
        ARLEN => m_axi_gmem1_ARLEN,
        ARSIZE => m_axi_gmem1_ARSIZE,
        ARBURST => m_axi_gmem1_ARBURST,
        ARLOCK => m_axi_gmem1_ARLOCK,
        ARCACHE => m_axi_gmem1_ARCACHE,
        ARPROT => m_axi_gmem1_ARPROT,
        ARQOS => m_axi_gmem1_ARQOS,
        ARREGION => m_axi_gmem1_ARREGION,
        ARUSER => m_axi_gmem1_ARUSER,
        RVALID => m_axi_gmem1_RVALID,
        RREADY => m_axi_gmem1_RREADY,
        RDATA => m_axi_gmem1_RDATA,
        RLAST => m_axi_gmem1_RLAST,
        RID => m_axi_gmem1_RID,
        RUSER => m_axi_gmem1_RUSER,
        RRESP => m_axi_gmem1_RRESP,
        BVALID => m_axi_gmem1_BVALID,
        BREADY => m_axi_gmem1_BREADY,
        BRESP => m_axi_gmem1_BRESP,
        BID => m_axi_gmem1_BID,
        BUSER => m_axi_gmem1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem1_ARVALID,
        I_ARREADY => gmem1_ARREADY,
        I_ARADDR => gmem1_ARADDR,
        I_ARLEN => gmem1_ARLEN,
        I_RVALID => gmem1_RVALID,
        I_RREADY => gmem1_RREADY,
        I_RDATA => gmem1_RDATA,
        I_RFIFONUM => gmem1_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem1_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem1_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => gmem1_BVALID,
        I_BREADY => ap_const_logic_0);

    gmem3_m_axi_U : component dut_gmem3_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 37,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 1,
        MAX_READ_BURST_LENGTH => 256,
        MAX_WRITE_BURST_LENGTH => 2,
        USER_RFIFONUM_WIDTH => 13,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM3_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM3_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM3_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM3_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM3_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM3_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM3_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM3_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM3_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM3_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM3_CACHE_VALUE,
        USER_DW => 32,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_gmem3_AWVALID,
        AWREADY => m_axi_gmem3_AWREADY,
        AWADDR => m_axi_gmem3_AWADDR,
        AWID => m_axi_gmem3_AWID,
        AWLEN => m_axi_gmem3_AWLEN,
        AWSIZE => m_axi_gmem3_AWSIZE,
        AWBURST => m_axi_gmem3_AWBURST,
        AWLOCK => m_axi_gmem3_AWLOCK,
        AWCACHE => m_axi_gmem3_AWCACHE,
        AWPROT => m_axi_gmem3_AWPROT,
        AWQOS => m_axi_gmem3_AWQOS,
        AWREGION => m_axi_gmem3_AWREGION,
        AWUSER => m_axi_gmem3_AWUSER,
        WVALID => m_axi_gmem3_WVALID,
        WREADY => m_axi_gmem3_WREADY,
        WDATA => m_axi_gmem3_WDATA,
        WSTRB => m_axi_gmem3_WSTRB,
        WLAST => m_axi_gmem3_WLAST,
        WID => m_axi_gmem3_WID,
        WUSER => m_axi_gmem3_WUSER,
        ARVALID => m_axi_gmem3_ARVALID,
        ARREADY => m_axi_gmem3_ARREADY,
        ARADDR => m_axi_gmem3_ARADDR,
        ARID => m_axi_gmem3_ARID,
        ARLEN => m_axi_gmem3_ARLEN,
        ARSIZE => m_axi_gmem3_ARSIZE,
        ARBURST => m_axi_gmem3_ARBURST,
        ARLOCK => m_axi_gmem3_ARLOCK,
        ARCACHE => m_axi_gmem3_ARCACHE,
        ARPROT => m_axi_gmem3_ARPROT,
        ARQOS => m_axi_gmem3_ARQOS,
        ARREGION => m_axi_gmem3_ARREGION,
        ARUSER => m_axi_gmem3_ARUSER,
        RVALID => m_axi_gmem3_RVALID,
        RREADY => m_axi_gmem3_RREADY,
        RDATA => m_axi_gmem3_RDATA,
        RLAST => m_axi_gmem3_RLAST,
        RID => m_axi_gmem3_RID,
        RUSER => m_axi_gmem3_RUSER,
        RRESP => m_axi_gmem3_RRESP,
        BVALID => m_axi_gmem3_BVALID,
        BREADY => m_axi_gmem3_BREADY,
        BRESP => m_axi_gmem3_BRESP,
        BID => m_axi_gmem3_BID,
        BUSER => m_axi_gmem3_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem3_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARLEN => ap_const_lv32_0,
        I_RVALID => gmem3_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem3_RDATA,
        I_RFIFONUM => gmem3_RFIFONUM,
        I_AWVALID => gmem3_AWVALID,
        I_AWREADY => gmem3_AWREADY,
        I_AWADDR => gmem3_AWADDR,
        I_AWLEN => gmem3_AWLEN,
        I_WVALID => gmem3_WVALID,
        I_WREADY => gmem3_WREADY,
        I_WDATA => grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_WDATA,
        I_WSTRB => grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_WSTRB,
        I_BVALID => gmem3_BVALID,
        I_BREADY => gmem3_BREADY);

    fadd_32ns_32ns_32_7_full_dsp_1_U58 : component dut_fadd_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_667_p0,
        din1 => grp_fu_667_p1,
        ce => grp_fu_667_ce,
        dout => grp_fu_667_p2);

    sitofp_32ns_32_5_no_dsp_1_U59 : component dut_sitofp_32ns_32_5_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_671_p0,
        ce => grp_fu_671_ce,
        dout => grp_fu_671_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state88) and (gmem3_BVALID = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_dut_Pipeline_Clear_loop_fu_282_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_dut_Pipeline_Clear_loop_fu_282_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                    grp_dut_Pipeline_Clear_loop_fu_282_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dut_Pipeline_Clear_loop_fu_282_ap_ready = ap_const_logic_1)) then 
                    grp_dut_Pipeline_Clear_loop_fu_282_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                    grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_ap_ready = ap_const_logic_1)) then 
                    grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_dut_Pipeline_Output_loop_fu_371_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_dut_Pipeline_Output_loop_fu_371_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
                    grp_dut_Pipeline_Output_loop_fu_371_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dut_Pipeline_Output_loop_fu_371_ap_ready = ap_const_logic_1)) then 
                    grp_dut_Pipeline_Output_loop_fu_371_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state46) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                    grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_ap_ready = ap_const_logic_1)) then 
                    grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_dut_Pipeline_Store_edge_loop_fu_272_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_dut_Pipeline_Store_edge_loop_fu_272_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                    grp_dut_Pipeline_Store_edge_loop_fu_272_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dut_Pipeline_Store_edge_loop_fu_272_ap_ready = ap_const_logic_1)) then 
                    grp_dut_Pipeline_Store_edge_loop_fu_272_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_dut_Pipeline_Store_vertice_loop_fu_259_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_dut_Pipeline_Store_vertice_loop_fu_259_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                    grp_dut_Pipeline_Store_vertice_loop_fu_259_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dut_Pipeline_Store_vertice_loop_fu_259_ap_ready = ap_const_logic_1)) then 
                    grp_dut_Pipeline_Store_vertice_loop_fu_259_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;

    i_2_fu_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_2_fu_206 <= ap_const_lv12_0;
            elsif (((icmp_ln162_fu_483_p2 = ap_const_lv1_1) and (icmp_ln165_fu_499_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                i_2_fu_206 <= i_3_fu_489_p2;
            end if; 
        end if;
    end process;

    q_index_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln162_fu_483_p2 = ap_const_lv1_1) and (icmp_ln165_fu_499_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                q_index <= ap_const_lv16_1;
            elsif (((grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_q_index_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                q_index <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_q_index_o;
            end if; 
        end if;
    end process;

    sigma_tmp_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_sigma_tmp_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                sigma_tmp <= grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_sigma_tmp_o;
            elsif (((grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_sigma_tmp_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                sigma_tmp <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_sigma_tmp;
            end if; 
        end if;
    end process;

    v_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_v_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                v <= grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_v;
            elsif (((grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_v_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                v <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_v_o;
            end if; 
        end if;
    end process;

    w_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_w_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                w <= grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_w_o;
            elsif (((grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_w_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                w <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_w;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_reg_587 <= add_fu_394_p2;
                btwn_read_reg_577 <= btwn;
                select_ln145_reg_598 <= select_ln145_fu_420_p3;
                select_ln154_reg_609 <= select_ln154_fu_444_p3;
                trunc_ln1_reg_603 <= column(63 downto 2);
                trunc_ln_reg_592 <= offset(63 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                i_reg_634 <= i_2_fu_206;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) and ((icmp_ln162_fu_483_p2 = ap_const_lv1_0) or (icmp_ln165_fu_499_p2 = ap_const_lv1_0)))) then
                select_ln300_reg_654 <= select_ln300_fu_529_p3;
                trunc_ln4_reg_648 <= btwn_read_reg_577(63 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                trunc_ln6_reg_571 <= trunc_ln6_fu_381_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state50, ap_CS_fsm_state88, ap_CS_fsm_state43, icmp_ln165_fu_499_p2, icmp_ln162_fu_483_p2, grp_dut_Pipeline_Clear_loop_fu_282_ap_done, grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_ap_done, grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_ap_done, grp_dut_Pipeline_Output_loop_fu_371_ap_done, gmem3_AWREADY, gmem3_BVALID, ap_CS_fsm_state42, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state52, ap_block_state3_io, ap_block_state42_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state42) and (ap_const_boolean_0 = ap_block_state42_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                if (((icmp_ln162_fu_483_p2 = ap_const_lv1_1) and (icmp_ln165_fu_499_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                if (((grp_dut_Pipeline_Clear_loop_fu_282_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if (((grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                if (((grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state50 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state50) and (gmem3_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                if (((grp_dut_Pipeline_Output_loop_fu_371_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state88) and (gmem3_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state88;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_fu_394_p2 <= std_logic_vector(unsigned(numVert) + unsigned(ap_const_lv32_1));
    add_ln145_fu_399_p2 <= std_logic_vector(unsigned(trunc_ln6_reg_571) + unsigned(ap_const_lv12_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_NS_fsm_state46 <= ap_NS_fsm(45);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(ap_block_state3_io)
    begin
        if ((ap_const_boolean_1 = ap_block_state3_io)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;

    ap_ST_fsm_state42_blk_assign_proc : process(ap_block_state42_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state42_on_subcall_done)) then 
            ap_ST_fsm_state42_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state42_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;

    ap_ST_fsm_state45_blk_assign_proc : process(grp_dut_Pipeline_Clear_loop_fu_282_ap_done)
    begin
        if ((grp_dut_Pipeline_Clear_loop_fu_282_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state45_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state45_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state46_blk <= ap_const_logic_0;

    ap_ST_fsm_state47_blk_assign_proc : process(grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_ap_done)
    begin
        if ((grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state47_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state47_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state48_blk <= ap_const_logic_0;

    ap_ST_fsm_state49_blk_assign_proc : process(grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_ap_done)
    begin
        if ((grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state49_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state49_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state50_blk_assign_proc : process(gmem3_AWREADY)
    begin
        if ((gmem3_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state50_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state50_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state51_blk <= ap_const_logic_0;

    ap_ST_fsm_state52_blk_assign_proc : process(grp_dut_Pipeline_Output_loop_fu_371_ap_done)
    begin
        if ((grp_dut_Pipeline_Output_loop_fu_371_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state52_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state52_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;
    ap_ST_fsm_state73_blk <= ap_const_logic_0;
    ap_ST_fsm_state74_blk <= ap_const_logic_0;
    ap_ST_fsm_state75_blk <= ap_const_logic_0;
    ap_ST_fsm_state76_blk <= ap_const_logic_0;
    ap_ST_fsm_state77_blk <= ap_const_logic_0;
    ap_ST_fsm_state78_blk <= ap_const_logic_0;
    ap_ST_fsm_state79_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state80_blk <= ap_const_logic_0;
    ap_ST_fsm_state81_blk <= ap_const_logic_0;
    ap_ST_fsm_state82_blk <= ap_const_logic_0;
    ap_ST_fsm_state83_blk <= ap_const_logic_0;
    ap_ST_fsm_state84_blk <= ap_const_logic_0;
    ap_ST_fsm_state85_blk <= ap_const_logic_0;
    ap_ST_fsm_state86_blk <= ap_const_logic_0;
    ap_ST_fsm_state87_blk <= ap_const_logic_0;

    ap_ST_fsm_state88_blk_assign_proc : process(gmem3_BVALID)
    begin
        if ((gmem3_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state88_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state88_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state3_io_assign_proc : process(gmem0_ARREADY, gmem1_ARREADY)
    begin
                ap_block_state3_io <= ((gmem1_ARREADY = ap_const_logic_0) or (gmem0_ARREADY = ap_const_logic_0));
    end process;


    ap_block_state42_on_subcall_done_assign_proc : process(grp_dut_Pipeline_Store_vertice_loop_fu_259_ap_done, grp_dut_Pipeline_Store_edge_loop_fu_272_ap_done)
    begin
                ap_block_state42_on_subcall_done <= ((grp_dut_Pipeline_Store_edge_loop_fu_272_ap_done = ap_const_logic_0) or (grp_dut_Pipeline_Store_vertice_loop_fu_259_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state88, gmem3_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) and (gmem3_BVALID = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state88, gmem3_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) and (gmem3_BVALID = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    btwn_buf_address0_assign_proc : process(grp_dut_Pipeline_Store_vertice_loop_fu_259_btwn_buf_address0, grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_btwn_buf_address0, grp_dut_Pipeline_Output_loop_fu_371_btwn_buf_address0, ap_CS_fsm_state42, ap_CS_fsm_state49, ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            btwn_buf_address0 <= grp_dut_Pipeline_Output_loop_fu_371_btwn_buf_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            btwn_buf_address0 <= grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_btwn_buf_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            btwn_buf_address0 <= grp_dut_Pipeline_Store_vertice_loop_fu_259_btwn_buf_address0;
        else 
            btwn_buf_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    btwn_buf_ce0_assign_proc : process(grp_dut_Pipeline_Store_vertice_loop_fu_259_btwn_buf_ce0, grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_btwn_buf_ce0, grp_dut_Pipeline_Output_loop_fu_371_btwn_buf_ce0, ap_CS_fsm_state42, ap_CS_fsm_state49, ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            btwn_buf_ce0 <= grp_dut_Pipeline_Output_loop_fu_371_btwn_buf_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            btwn_buf_ce0 <= grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_btwn_buf_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            btwn_buf_ce0 <= grp_dut_Pipeline_Store_vertice_loop_fu_259_btwn_buf_ce0;
        else 
            btwn_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    btwn_buf_d0_assign_proc : process(grp_dut_Pipeline_Store_vertice_loop_fu_259_btwn_buf_d0, grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_btwn_buf_d0, ap_CS_fsm_state42, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            btwn_buf_d0 <= grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_btwn_buf_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            btwn_buf_d0 <= grp_dut_Pipeline_Store_vertice_loop_fu_259_btwn_buf_d0;
        else 
            btwn_buf_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    btwn_buf_we0_assign_proc : process(grp_dut_Pipeline_Store_vertice_loop_fu_259_btwn_buf_we0, grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_btwn_buf_we0, ap_CS_fsm_state42, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            btwn_buf_we0 <= grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_btwn_buf_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            btwn_buf_we0 <= grp_dut_Pipeline_Store_vertice_loop_fu_259_btwn_buf_we0;
        else 
            btwn_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    column_buf_address0_assign_proc : process(grp_dut_Pipeline_Store_edge_loop_fu_272_column_buf_address0, grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_column_buf_address0, ap_CS_fsm_state42, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            column_buf_address0 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_column_buf_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            column_buf_address0 <= grp_dut_Pipeline_Store_edge_loop_fu_272_column_buf_address0;
        else 
            column_buf_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    column_buf_ce0_assign_proc : process(grp_dut_Pipeline_Store_edge_loop_fu_272_column_buf_ce0, grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_column_buf_ce0, ap_CS_fsm_state42, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            column_buf_ce0 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_column_buf_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            column_buf_ce0 <= grp_dut_Pipeline_Store_edge_loop_fu_272_column_buf_ce0;
        else 
            column_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    column_buf_we0_assign_proc : process(grp_dut_Pipeline_Store_edge_loop_fu_272_column_buf_we0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            column_buf_we0 <= grp_dut_Pipeline_Store_edge_loop_fu_272_column_buf_we0;
        else 
            column_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delta_array_address0_assign_proc : process(grp_dut_Pipeline_Clear_loop_fu_282_delta_array_address0, grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_delta_array_address0, ap_CS_fsm_state45, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            delta_array_address0 <= grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_delta_array_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            delta_array_address0 <= grp_dut_Pipeline_Clear_loop_fu_282_delta_array_address0;
        else 
            delta_array_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    delta_array_ce0_assign_proc : process(grp_dut_Pipeline_Clear_loop_fu_282_delta_array_ce0, grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_delta_array_ce0, ap_CS_fsm_state45, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            delta_array_ce0 <= grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_delta_array_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            delta_array_ce0 <= grp_dut_Pipeline_Clear_loop_fu_282_delta_array_ce0;
        else 
            delta_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delta_array_ce1_assign_proc : process(grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_delta_array_ce1, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            delta_array_ce1 <= grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_delta_array_ce1;
        else 
            delta_array_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    delta_array_d0_assign_proc : process(grp_dut_Pipeline_Clear_loop_fu_282_delta_array_d0, grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_delta_array_d0, ap_CS_fsm_state45, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            delta_array_d0 <= grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_delta_array_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            delta_array_d0 <= grp_dut_Pipeline_Clear_loop_fu_282_delta_array_d0;
        else 
            delta_array_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    delta_array_we0_assign_proc : process(grp_dut_Pipeline_Clear_loop_fu_282_delta_array_we0, grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_delta_array_we0, ap_CS_fsm_state45, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            delta_array_we0 <= grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_delta_array_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            delta_array_we0 <= grp_dut_Pipeline_Clear_loop_fu_282_delta_array_we0;
        else 
            delta_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dist_array_address0_assign_proc : process(grp_dut_Pipeline_Clear_loop_fu_282_dist_array_address0, grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_dist_array_address0, ap_CS_fsm_state45, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            dist_array_address0 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_dist_array_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            dist_array_address0 <= grp_dut_Pipeline_Clear_loop_fu_282_dist_array_address0;
        else 
            dist_array_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    dist_array_ce0_assign_proc : process(grp_dut_Pipeline_Clear_loop_fu_282_dist_array_ce0, grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_dist_array_ce0, ap_CS_fsm_state45, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            dist_array_ce0 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_dist_array_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            dist_array_ce0 <= grp_dut_Pipeline_Clear_loop_fu_282_dist_array_ce0;
        else 
            dist_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dist_array_ce1_assign_proc : process(grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_dist_array_ce1, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            dist_array_ce1 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_dist_array_ce1;
        else 
            dist_array_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dist_array_d0_assign_proc : process(grp_dut_Pipeline_Clear_loop_fu_282_dist_array_d0, grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_dist_array_d0, ap_CS_fsm_state45, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            dist_array_d0 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_dist_array_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            dist_array_d0 <= grp_dut_Pipeline_Clear_loop_fu_282_dist_array_d0;
        else 
            dist_array_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dist_array_we0_assign_proc : process(grp_dut_Pipeline_Clear_loop_fu_282_dist_array_we0, grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_dist_array_we0, ap_CS_fsm_state45, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            dist_array_we0 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_dist_array_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            dist_array_we0 <= grp_dut_Pipeline_Clear_loop_fu_282_dist_array_we0;
        else 
            dist_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_ARADDR_assign_proc : process(ap_CS_fsm_state3, grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_ARADDR, ap_CS_fsm_state41, ap_CS_fsm_state42, sext_ln145_fu_452_p1, ap_block_state3_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_io))) then 
            gmem0_ARADDR <= sext_ln145_fu_452_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            gmem0_ARADDR <= grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_ARADDR;
        else 
            gmem0_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem0_ARLEN_assign_proc : process(ap_CS_fsm_state3, zext_ln145_fu_462_p1, grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_ARLEN, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_block_state3_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_io))) then 
            gmem0_ARLEN <= zext_ln145_fu_462_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            gmem0_ARLEN <= grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_ARLEN;
        else 
            gmem0_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem0_ARVALID_assign_proc : process(ap_CS_fsm_state3, grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_ARVALID, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_block_state3_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_io))) then 
            gmem0_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            gmem0_ARVALID <= grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_ARVALID;
        else 
            gmem0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_RREADY_assign_proc : process(grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_RREADY, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            gmem0_RREADY <= grp_dut_Pipeline_Store_vertice_loop_fu_259_m_axi_gmem0_RREADY;
        else 
            gmem0_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_blk_n_AR_assign_proc : process(m_axi_gmem0_ARREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            gmem0_blk_n_AR <= m_axi_gmem0_ARREADY;
        else 
            gmem0_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_ARADDR_assign_proc : process(ap_CS_fsm_state3, grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_ARADDR, ap_CS_fsm_state41, ap_CS_fsm_state42, sext_ln154_fu_466_p1, ap_block_state3_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_io))) then 
            gmem1_ARADDR <= sext_ln154_fu_466_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            gmem1_ARADDR <= grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_ARADDR;
        else 
            gmem1_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem1_ARLEN_assign_proc : process(ap_CS_fsm_state3, zext_ln154_fu_476_p1, grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_ARLEN, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_block_state3_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_io))) then 
            gmem1_ARLEN <= zext_ln154_fu_476_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            gmem1_ARLEN <= grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_ARLEN;
        else 
            gmem1_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem1_ARVALID_assign_proc : process(ap_CS_fsm_state3, grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_ARVALID, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_block_state3_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_io))) then 
            gmem1_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            gmem1_ARVALID <= grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_ARVALID;
        else 
            gmem1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_RREADY_assign_proc : process(grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_RREADY, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            gmem1_RREADY <= grp_dut_Pipeline_Store_edge_loop_fu_272_m_axi_gmem1_RREADY;
        else 
            gmem1_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_blk_n_AR_assign_proc : process(m_axi_gmem1_ARREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            gmem1_blk_n_AR <= m_axi_gmem1_ARREADY;
        else 
            gmem1_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem3_AWADDR_assign_proc : process(ap_CS_fsm_state50, grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_AWADDR, gmem3_AWREADY, ap_CS_fsm_state51, ap_CS_fsm_state52, sext_ln300_fu_541_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) and (gmem3_AWREADY = ap_const_logic_1))) then 
            gmem3_AWADDR <= sext_ln300_fu_541_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            gmem3_AWADDR <= grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_AWADDR;
        else 
            gmem3_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem3_AWLEN_assign_proc : process(ap_CS_fsm_state50, grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_AWLEN, gmem3_AWREADY, ap_CS_fsm_state51, ap_CS_fsm_state52, zext_ln300_fu_551_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) and (gmem3_AWREADY = ap_const_logic_1))) then 
            gmem3_AWLEN <= zext_ln300_fu_551_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            gmem3_AWLEN <= grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_AWLEN;
        else 
            gmem3_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem3_AWVALID_assign_proc : process(ap_CS_fsm_state50, grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_AWVALID, gmem3_AWREADY, ap_CS_fsm_state51, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) and (gmem3_AWREADY = ap_const_logic_1))) then 
            gmem3_AWVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            gmem3_AWVALID <= grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_AWVALID;
        else 
            gmem3_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem3_BREADY_assign_proc : process(ap_CS_fsm_state88, grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_BREADY, gmem3_BVALID, ap_CS_fsm_state51, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) and (gmem3_BVALID = ap_const_logic_1))) then 
            gmem3_BREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            gmem3_BREADY <= grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_BREADY;
        else 
            gmem3_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem3_WVALID_assign_proc : process(grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_WVALID, ap_CS_fsm_state51, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            gmem3_WVALID <= grp_dut_Pipeline_Output_loop_fu_371_m_axi_gmem3_WVALID;
        else 
            gmem3_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem3_blk_n_AW_assign_proc : process(m_axi_gmem3_AWREADY, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            gmem3_blk_n_AW <= m_axi_gmem3_AWREADY;
        else 
            gmem3_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem3_blk_n_B_assign_proc : process(m_axi_gmem3_BVALID, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            gmem3_blk_n_B <= m_axi_gmem3_BVALID;
        else 
            gmem3_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;

    grp_dut_Pipeline_Clear_loop_fu_282_ap_start <= grp_dut_Pipeline_Clear_loop_fu_282_ap_start_reg;
    grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_ap_start <= grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_ap_start_reg;
    grp_dut_Pipeline_Output_loop_fu_371_ap_start <= grp_dut_Pipeline_Output_loop_fu_371_ap_start_reg;
    grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_ap_start <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_ap_start_reg;
    grp_dut_Pipeline_Store_edge_loop_fu_272_ap_start <= grp_dut_Pipeline_Store_edge_loop_fu_272_ap_start_reg;
    grp_dut_Pipeline_Store_vertice_loop_fu_259_ap_start <= grp_dut_Pipeline_Store_vertice_loop_fu_259_ap_start_reg;

    grp_fu_667_ce_assign_proc : process(grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_grp_fu_667_p_ce, grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_grp_fu_667_p_ce, ap_CS_fsm_state47, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_667_ce <= grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_grp_fu_667_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_667_ce <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_grp_fu_667_p_ce;
        else 
            grp_fu_667_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_667_p0_assign_proc : process(grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_grp_fu_667_p_din0, grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_grp_fu_667_p_din0, ap_CS_fsm_state47, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_667_p0 <= grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_grp_fu_667_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_667_p0 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_grp_fu_667_p_din0;
        else 
            grp_fu_667_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_667_p1_assign_proc : process(grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_grp_fu_667_p_din1, grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_grp_fu_667_p_din1, ap_CS_fsm_state47, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_667_p1 <= grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_grp_fu_667_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_667_p1 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_grp_fu_667_p_din1;
        else 
            grp_fu_667_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_671_ce_assign_proc : process(grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_grp_fu_671_p_ce, grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_grp_fu_671_p_ce, ap_CS_fsm_state47, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_671_ce <= grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_grp_fu_671_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_671_ce <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_grp_fu_671_p_ce;
        else 
            grp_fu_671_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_671_p0_assign_proc : process(grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_grp_fu_671_p_din0, grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_grp_fu_671_p_din0, ap_CS_fsm_state47, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_671_p0 <= grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_grp_fu_671_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_671_p0 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_grp_fu_671_p_din0;
        else 
            grp_fu_671_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_3_fu_489_p2 <= std_logic_vector(unsigned(i_2_fu_206) + unsigned(ap_const_lv12_1));
    icmp_ln145_fu_404_p2 <= "1" when (unsigned(add_fu_394_p2) < unsigned(ap_const_lv32_DCF)) else "0";
    icmp_ln154_fu_428_p2 <= "1" when (unsigned(numEdge) < unsigned(ap_const_lv32_A27A)) else "0";
    icmp_ln162_fu_483_p2 <= "1" when (unsigned(i_2_fu_206) < unsigned(ap_const_lv12_DCE)) else "0";
    icmp_ln165_fu_499_p2 <= "1" when (unsigned(zext_ln162_fu_495_p1) < unsigned(numVert)) else "0";
    icmp_ln300_fu_515_p2 <= "1" when (unsigned(numVert) < unsigned(ap_const_lv32_DCE)) else "0";
    m_axi_gmem6_ARADDR <= ap_const_lv64_0;
    m_axi_gmem6_ARBURST <= ap_const_lv2_0;
    m_axi_gmem6_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem6_ARID <= ap_const_lv1_0;
    m_axi_gmem6_ARLEN <= ap_const_lv8_0;
    m_axi_gmem6_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem6_ARPROT <= ap_const_lv3_0;
    m_axi_gmem6_ARQOS <= ap_const_lv4_0;
    m_axi_gmem6_ARREGION <= ap_const_lv4_0;
    m_axi_gmem6_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem6_ARUSER <= ap_const_lv1_0;
    m_axi_gmem6_ARVALID <= ap_const_logic_0;
    m_axi_gmem6_AWADDR <= ap_const_lv64_0;
    m_axi_gmem6_AWBURST <= ap_const_lv2_0;
    m_axi_gmem6_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem6_AWID <= ap_const_lv1_0;
    m_axi_gmem6_AWLEN <= ap_const_lv8_0;
    m_axi_gmem6_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem6_AWPROT <= ap_const_lv3_0;
    m_axi_gmem6_AWQOS <= ap_const_lv4_0;
    m_axi_gmem6_AWREGION <= ap_const_lv4_0;
    m_axi_gmem6_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem6_AWUSER <= ap_const_lv1_0;
    m_axi_gmem6_AWVALID <= ap_const_logic_0;
    m_axi_gmem6_BREADY <= ap_const_logic_0;
    m_axi_gmem6_RREADY <= ap_const_logic_0;
    m_axi_gmem6_WDATA <= ap_const_lv32_0;
    m_axi_gmem6_WID <= ap_const_lv1_0;
    m_axi_gmem6_WLAST <= ap_const_logic_0;
    m_axi_gmem6_WSTRB <= ap_const_lv4_0;
    m_axi_gmem6_WUSER <= ap_const_lv1_0;
    m_axi_gmem6_WVALID <= ap_const_logic_0;
    m_axi_gmem7_ARADDR <= ap_const_lv64_0;
    m_axi_gmem7_ARBURST <= ap_const_lv2_0;
    m_axi_gmem7_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem7_ARID <= ap_const_lv1_0;
    m_axi_gmem7_ARLEN <= ap_const_lv8_0;
    m_axi_gmem7_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem7_ARPROT <= ap_const_lv3_0;
    m_axi_gmem7_ARQOS <= ap_const_lv4_0;
    m_axi_gmem7_ARREGION <= ap_const_lv4_0;
    m_axi_gmem7_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem7_ARUSER <= ap_const_lv1_0;
    m_axi_gmem7_ARVALID <= ap_const_logic_0;
    m_axi_gmem7_AWADDR <= ap_const_lv64_0;
    m_axi_gmem7_AWBURST <= ap_const_lv2_0;
    m_axi_gmem7_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem7_AWID <= ap_const_lv1_0;
    m_axi_gmem7_AWLEN <= ap_const_lv8_0;
    m_axi_gmem7_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem7_AWPROT <= ap_const_lv3_0;
    m_axi_gmem7_AWQOS <= ap_const_lv4_0;
    m_axi_gmem7_AWREGION <= ap_const_lv4_0;
    m_axi_gmem7_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem7_AWUSER <= ap_const_lv1_0;
    m_axi_gmem7_AWVALID <= ap_const_logic_0;
    m_axi_gmem7_BREADY <= ap_const_logic_0;
    m_axi_gmem7_RREADY <= ap_const_logic_0;
    m_axi_gmem7_WDATA <= ap_const_lv32_0;
    m_axi_gmem7_WID <= ap_const_lv1_0;
    m_axi_gmem7_WLAST <= ap_const_logic_0;
    m_axi_gmem7_WSTRB <= ap_const_lv4_0;
    m_axi_gmem7_WUSER <= ap_const_lv1_0;
    m_axi_gmem7_WVALID <= ap_const_logic_0;
    m_axi_gmem8_ARADDR <= ap_const_lv64_0;
    m_axi_gmem8_ARBURST <= ap_const_lv2_0;
    m_axi_gmem8_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem8_ARID <= ap_const_lv1_0;
    m_axi_gmem8_ARLEN <= ap_const_lv8_0;
    m_axi_gmem8_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem8_ARPROT <= ap_const_lv3_0;
    m_axi_gmem8_ARQOS <= ap_const_lv4_0;
    m_axi_gmem8_ARREGION <= ap_const_lv4_0;
    m_axi_gmem8_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem8_ARUSER <= ap_const_lv1_0;
    m_axi_gmem8_ARVALID <= ap_const_logic_0;
    m_axi_gmem8_AWADDR <= ap_const_lv64_0;
    m_axi_gmem8_AWBURST <= ap_const_lv2_0;
    m_axi_gmem8_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem8_AWID <= ap_const_lv1_0;
    m_axi_gmem8_AWLEN <= ap_const_lv8_0;
    m_axi_gmem8_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem8_AWPROT <= ap_const_lv3_0;
    m_axi_gmem8_AWQOS <= ap_const_lv4_0;
    m_axi_gmem8_AWREGION <= ap_const_lv4_0;
    m_axi_gmem8_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem8_AWUSER <= ap_const_lv1_0;
    m_axi_gmem8_AWVALID <= ap_const_logic_0;
    m_axi_gmem8_BREADY <= ap_const_logic_0;
    m_axi_gmem8_RREADY <= ap_const_logic_0;
    m_axi_gmem8_WDATA <= ap_const_lv32_0;
    m_axi_gmem8_WID <= ap_const_lv1_0;
    m_axi_gmem8_WLAST <= ap_const_logic_0;
    m_axi_gmem8_WSTRB <= ap_const_lv4_0;
    m_axi_gmem8_WUSER <= ap_const_lv1_0;
    m_axi_gmem8_WVALID <= ap_const_logic_0;
    m_axi_gmem9_ARADDR <= ap_const_lv64_0;
    m_axi_gmem9_ARBURST <= ap_const_lv2_0;
    m_axi_gmem9_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem9_ARID <= ap_const_lv1_0;
    m_axi_gmem9_ARLEN <= ap_const_lv8_0;
    m_axi_gmem9_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem9_ARPROT <= ap_const_lv3_0;
    m_axi_gmem9_ARQOS <= ap_const_lv4_0;
    m_axi_gmem9_ARREGION <= ap_const_lv4_0;
    m_axi_gmem9_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem9_ARUSER <= ap_const_lv1_0;
    m_axi_gmem9_ARVALID <= ap_const_logic_0;
    m_axi_gmem9_AWADDR <= ap_const_lv64_0;
    m_axi_gmem9_AWBURST <= ap_const_lv2_0;
    m_axi_gmem9_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem9_AWID <= ap_const_lv1_0;
    m_axi_gmem9_AWLEN <= ap_const_lv8_0;
    m_axi_gmem9_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem9_AWPROT <= ap_const_lv3_0;
    m_axi_gmem9_AWQOS <= ap_const_lv4_0;
    m_axi_gmem9_AWREGION <= ap_const_lv4_0;
    m_axi_gmem9_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem9_AWUSER <= ap_const_lv1_0;
    m_axi_gmem9_AWVALID <= ap_const_logic_0;
    m_axi_gmem9_BREADY <= ap_const_logic_0;
    m_axi_gmem9_RREADY <= ap_const_logic_0;
    m_axi_gmem9_WDATA <= ap_const_lv32_0;
    m_axi_gmem9_WID <= ap_const_lv1_0;
    m_axi_gmem9_WLAST <= ap_const_logic_0;
    m_axi_gmem9_WSTRB <= ap_const_lv4_0;
    m_axi_gmem9_WUSER <= ap_const_lv1_0;
    m_axi_gmem9_WVALID <= ap_const_logic_0;

    offset_buf_address0_assign_proc : process(grp_dut_Pipeline_Store_vertice_loop_fu_259_offset_buf_address0, grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_offset_buf_address0, ap_CS_fsm_state42, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            offset_buf_address0 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_offset_buf_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            offset_buf_address0 <= grp_dut_Pipeline_Store_vertice_loop_fu_259_offset_buf_address0;
        else 
            offset_buf_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    offset_buf_ce0_assign_proc : process(grp_dut_Pipeline_Store_vertice_loop_fu_259_offset_buf_ce0, grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_offset_buf_ce0, ap_CS_fsm_state42, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            offset_buf_ce0 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_offset_buf_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            offset_buf_ce0 <= grp_dut_Pipeline_Store_vertice_loop_fu_259_offset_buf_ce0;
        else 
            offset_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    offset_buf_ce1_assign_proc : process(grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_offset_buf_ce1, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            offset_buf_ce1 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_offset_buf_ce1;
        else 
            offset_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    offset_buf_we0_assign_proc : process(grp_dut_Pipeline_Store_vertice_loop_fu_259_offset_buf_we0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            offset_buf_we0 <= grp_dut_Pipeline_Store_vertice_loop_fu_259_offset_buf_we0;
        else 
            offset_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_array_address0_assign_proc : process(grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_array_address0, grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_p_array_address0, ap_CS_fsm_state47, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            p_array_address0 <= grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_p_array_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            p_array_address0 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_array_address0;
        else 
            p_array_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    p_array_ce0_assign_proc : process(grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_array_ce0, grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_p_array_ce0, ap_CS_fsm_state47, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            p_array_ce0 <= grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_p_array_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            p_array_ce0 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_array_ce0;
        else 
            p_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_array_we0_assign_proc : process(grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_array_we0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            p_array_we0 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_array_we0;
        else 
            p_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_index_array_address0_assign_proc : process(grp_dut_Pipeline_Clear_loop_fu_282_p_index_array_address0, grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_index_array_address0, grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_p_index_array_address0, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            p_index_array_address0 <= grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_p_index_array_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            p_index_array_address0 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_index_array_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            p_index_array_address0 <= grp_dut_Pipeline_Clear_loop_fu_282_p_index_array_address0;
        else 
            p_index_array_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    p_index_array_ce0_assign_proc : process(grp_dut_Pipeline_Clear_loop_fu_282_p_index_array_ce0, grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_index_array_ce0, grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_p_index_array_ce0, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            p_index_array_ce0 <= grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_p_index_array_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            p_index_array_ce0 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_index_array_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            p_index_array_ce0 <= grp_dut_Pipeline_Clear_loop_fu_282_p_index_array_ce0;
        else 
            p_index_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_index_array_ce1_assign_proc : process(grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_index_array_ce1, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            p_index_array_ce1 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_index_array_ce1;
        else 
            p_index_array_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_index_array_d0_assign_proc : process(grp_dut_Pipeline_Clear_loop_fu_282_p_index_array_d0, grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_index_array_d0, ap_CS_fsm_state45, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            p_index_array_d0 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_index_array_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            p_index_array_d0 <= grp_dut_Pipeline_Clear_loop_fu_282_p_index_array_d0;
        else 
            p_index_array_d0 <= "XXXXXXXX";
        end if; 
    end process;


    p_index_array_we0_assign_proc : process(grp_dut_Pipeline_Clear_loop_fu_282_p_index_array_we0, grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_index_array_we0, ap_CS_fsm_state45, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            p_index_array_we0 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_p_index_array_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            p_index_array_we0 <= grp_dut_Pipeline_Clear_loop_fu_282_p_index_array_we0;
        else 
            p_index_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    q_array_address0_assign_proc : process(grp_dut_Pipeline_Clear_loop_fu_282_q_array_address0, grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_q_array_address0, ap_CS_fsm_state45, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            q_array_address0 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_q_array_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            q_array_address0 <= grp_dut_Pipeline_Clear_loop_fu_282_q_array_address0;
        else 
            q_array_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    q_array_ce0_assign_proc : process(grp_dut_Pipeline_Clear_loop_fu_282_q_array_ce0, grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_q_array_ce0, ap_CS_fsm_state45, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            q_array_ce0 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_q_array_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            q_array_ce0 <= grp_dut_Pipeline_Clear_loop_fu_282_q_array_ce0;
        else 
            q_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    q_array_ce1_assign_proc : process(grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_q_array_ce1, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            q_array_ce1 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_q_array_ce1;
        else 
            q_array_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    q_array_d0_assign_proc : process(grp_dut_Pipeline_Clear_loop_fu_282_q_array_d0, grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_q_array_d0, ap_CS_fsm_state45, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            q_array_d0 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_q_array_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            q_array_d0 <= grp_dut_Pipeline_Clear_loop_fu_282_q_array_d0;
        else 
            q_array_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    q_array_we0_assign_proc : process(grp_dut_Pipeline_Clear_loop_fu_282_q_array_we0, grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_q_array_we0, ap_CS_fsm_state45, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            q_array_we0 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_q_array_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            q_array_we0 <= grp_dut_Pipeline_Clear_loop_fu_282_q_array_we0;
        else 
            q_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    s_array_address0_assign_proc : process(grp_dut_Pipeline_Clear_loop_fu_282_s_array_address0, grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_s_array_address0, grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_s_array_address0, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            s_array_address0 <= grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_s_array_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            s_array_address0 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_s_array_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            s_array_address0 <= grp_dut_Pipeline_Clear_loop_fu_282_s_array_address0;
        else 
            s_array_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    s_array_ce0_assign_proc : process(grp_dut_Pipeline_Clear_loop_fu_282_s_array_ce0, grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_s_array_ce0, grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_s_array_ce0, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            s_array_ce0 <= grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_s_array_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            s_array_ce0 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_s_array_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            s_array_ce0 <= grp_dut_Pipeline_Clear_loop_fu_282_s_array_ce0;
        else 
            s_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s_array_ce1_assign_proc : process(grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_s_array_ce1, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            s_array_ce1 <= grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_s_array_ce1;
        else 
            s_array_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s_array_d0_assign_proc : process(grp_dut_Pipeline_Clear_loop_fu_282_s_array_d0, grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_s_array_d0, ap_CS_fsm_state45, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            s_array_d0 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_s_array_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            s_array_d0 <= grp_dut_Pipeline_Clear_loop_fu_282_s_array_d0;
        else 
            s_array_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    s_array_we0_assign_proc : process(grp_dut_Pipeline_Clear_loop_fu_282_s_array_we0, grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_s_array_we0, ap_CS_fsm_state45, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            s_array_we0 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_s_array_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            s_array_we0 <= grp_dut_Pipeline_Clear_loop_fu_282_s_array_we0;
        else 
            s_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln145_fu_420_p3 <= 
        add_ln145_fu_399_p2 when (icmp_ln145_fu_404_p2(0) = '1') else 
        ap_const_lv12_DCF;
    select_ln154_fu_444_p3 <= 
        trunc_ln6_1_fu_390_p1 when (icmp_ln154_fu_428_p2(0) = '1') else 
        ap_const_lv16_A27A;
    select_ln300_fu_529_p3 <= 
        trunc_ln6_reg_571 when (icmp_ln300_fu_515_p2(0) = '1') else 
        ap_const_lv12_DCE;
        sext_ln145_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_592),64));

        sext_ln154_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_reg_603),64));

        sext_ln300_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln4_reg_648),64));


    sigma_array_address0_assign_proc : process(grp_dut_Pipeline_Clear_loop_fu_282_sigma_array_address0, grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_sigma_array_address0, grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_sigma_array_address0, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            sigma_array_address0 <= grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_sigma_array_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            sigma_array_address0 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_sigma_array_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            sigma_array_address0 <= grp_dut_Pipeline_Clear_loop_fu_282_sigma_array_address0;
        else 
            sigma_array_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sigma_array_ce0_assign_proc : process(grp_dut_Pipeline_Clear_loop_fu_282_sigma_array_ce0, grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_sigma_array_ce0, grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_sigma_array_ce0, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            sigma_array_ce0 <= grp_dut_Pipeline_Dequeue_loop_Computing_loop_fu_345_sigma_array_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            sigma_array_ce0 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_sigma_array_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            sigma_array_ce0 <= grp_dut_Pipeline_Clear_loop_fu_282_sigma_array_ce0;
        else 
            sigma_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sigma_array_ce1_assign_proc : process(grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_sigma_array_ce1, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            sigma_array_ce1 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_sigma_array_ce1;
        else 
            sigma_array_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sigma_array_d0_assign_proc : process(grp_dut_Pipeline_Clear_loop_fu_282_sigma_array_d0, grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_sigma_array_d0, ap_CS_fsm_state45, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            sigma_array_d0 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_sigma_array_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            sigma_array_d0 <= grp_dut_Pipeline_Clear_loop_fu_282_sigma_array_d0;
        else 
            sigma_array_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sigma_array_we0_assign_proc : process(grp_dut_Pipeline_Clear_loop_fu_282_sigma_array_we0, grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_sigma_array_we0, ap_CS_fsm_state45, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            sigma_array_we0 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_sigma_array_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            sigma_array_we0 <= grp_dut_Pipeline_Clear_loop_fu_282_sigma_array_we0;
        else 
            sigma_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    travel_address0_assign_proc : process(grp_dut_Pipeline_Clear_loop_fu_282_travel_address0, grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_travel_address0, ap_CS_fsm_state45, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            travel_address0 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_travel_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            travel_address0 <= grp_dut_Pipeline_Clear_loop_fu_282_travel_address0;
        else 
            travel_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    travel_ce0_assign_proc : process(grp_dut_Pipeline_Clear_loop_fu_282_travel_ce0, grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_travel_ce0, ap_CS_fsm_state45, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            travel_ce0 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_travel_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            travel_ce0 <= grp_dut_Pipeline_Clear_loop_fu_282_travel_ce0;
        else 
            travel_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    travel_d0_assign_proc : process(grp_dut_Pipeline_Clear_loop_fu_282_travel_d0, grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_travel_d0, ap_CS_fsm_state45, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            travel_d0 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_travel_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            travel_d0 <= grp_dut_Pipeline_Clear_loop_fu_282_travel_d0;
        else 
            travel_d0 <= "X";
        end if; 
    end process;


    travel_we0_assign_proc : process(grp_dut_Pipeline_Clear_loop_fu_282_travel_we0, grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_travel_we0, ap_CS_fsm_state45, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            travel_we0 <= grp_dut_Pipeline_Queue_loop_Edge_loop_fu_303_travel_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            travel_we0 <= grp_dut_Pipeline_Clear_loop_fu_282_travel_we0;
        else 
            travel_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln6_1_fu_390_p1 <= numEdge(16 - 1 downto 0);
    trunc_ln6_fu_381_p1 <= numVert(12 - 1 downto 0);
    zext_ln145_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln145_reg_598),32));
    zext_ln154_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln154_reg_609),32));
    zext_ln162_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_fu_206),32));
    zext_ln300_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln300_reg_654),32));
end behav;
