-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_dut_Pipeline_Dequeue_loop_Computing_loop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    zext_ln265 : IN STD_LOGIC_VECTOR (15 downto 0);
    zext_ln169 : IN STD_LOGIC_VECTOR (11 downto 0);
    s_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    s_array_ce0 : OUT STD_LOGIC;
    s_array_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    s_array_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    s_array_ce1 : OUT STD_LOGIC;
    s_array_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    sigma_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sigma_array_ce0 : OUT STD_LOGIC;
    sigma_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    w_i : IN STD_LOGIC_VECTOR (11 downto 0);
    w_o : OUT STD_LOGIC_VECTOR (11 downto 0);
    w_o_ap_vld : OUT STD_LOGIC;
    p_index_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    p_index_array_ce0 : OUT STD_LOGIC;
    p_index_array_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    delta_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    delta_array_ce0 : OUT STD_LOGIC;
    delta_array_we0 : OUT STD_LOGIC;
    delta_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    delta_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    delta_array_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    delta_array_ce1 : OUT STD_LOGIC;
    delta_array_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    btwn_buf_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    btwn_buf_ce0 : OUT STD_LOGIC;
    btwn_buf_we0 : OUT STD_LOGIC;
    btwn_buf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    btwn_buf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sigma_tmp_i : IN STD_LOGIC_VECTOR (31 downto 0);
    sigma_tmp_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    sigma_tmp_o_ap_vld : OUT STD_LOGIC;
    p_array_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    p_array_ce0 : OUT STD_LOGIC;
    p_array_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    v : OUT STD_LOGIC_VECTOR (15 downto 0);
    v_ap_vld : OUT STD_LOGIC;
    grp_fu_667_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_667_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_667_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_667_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_667_p_ce : OUT STD_LOGIC;
    grp_fu_671_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_671_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_671_p_ce : OUT STD_LOGIC );
end;


architecture behav of dut_dut_Pipeline_Dequeue_loop_Computing_loop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv13_DCD : STD_LOGIC_VECTOR (12 downto 0) := "0110111001101";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv17_174BA : STD_LOGIC_VECTOR (16 downto 0) := "10111010010111010";
    constant ap_const_lv13_1FFF : STD_LOGIC_VECTOR (12 downto 0) := "1111111111111";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state16_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state22_pp0_stage1_iter10 : BOOLEAN;
    signal ap_block_state24_pp0_stage1_iter11 : BOOLEAN;
    signal ap_block_state26_pp0_stage1_iter12 : BOOLEAN;
    signal ap_block_state28_pp0_stage1_iter13 : BOOLEAN;
    signal ap_block_state30_pp0_stage1_iter14 : BOOLEAN;
    signal ap_block_state32_pp0_stage1_iter15 : BOOLEAN;
    signal ap_block_state34_pp0_stage1_iter16 : BOOLEAN;
    signal ap_block_state36_pp0_stage1_iter17 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln265_reg_552 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal delta_tmp : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_229 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln265_1_reg_574 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln265_1_reg_574_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln277_reg_587 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln277_reg_587_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln265_3_reg_583 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln265_3_reg_583_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal select_ln265_1_reg_574_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln287_reg_636 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln287_reg_636_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln169_cast_fu_235_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln169_cast_reg_524 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln265_cast_fu_239_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln265_cast_reg_530 : STD_LOGIC_VECTOR (16 downto 0);
    signal j_1_reg_536 : STD_LOGIC_VECTOR (12 downto 0);
    signal indvar_flatten13_load_reg_542 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln265_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln265_reg_552_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln265_reg_552_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln265_reg_552_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln265_reg_552_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln265_reg_552_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln265_reg_552_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln265_reg_552_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln265_reg_552_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln265_reg_552_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln265_reg_552_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln265_reg_552_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln265_reg_552_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln265_reg_552_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln265_reg_552_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln265_reg_552_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln265_reg_552_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln265_fu_275_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln265_reg_556 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln265_fu_313_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln265_reg_567 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln265_1_fu_329_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln265_1_reg_574_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln265_1_reg_574_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln265_1_reg_574_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln265_1_reg_574_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln265_1_reg_574_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln265_1_reg_574_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln265_1_reg_574_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln265_1_reg_574_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln265_1_reg_574_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln265_1_reg_574_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln265_1_reg_574_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln265_1_reg_574_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln265_1_reg_574_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln265_1_reg_574_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln265_1_reg_574_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln265_2_fu_345_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln265_2_reg_578 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln265_3_fu_358_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln265_3_reg_583_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln265_3_reg_583_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln265_3_reg_583_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln277_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln277_reg_587_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln277_reg_587_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln277_reg_587_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal btwn_buf_addr_reg_601 : STD_LOGIC_VECTOR (11 downto 0);
    signal btwn_buf_addr_reg_601_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal btwn_buf_addr_reg_601_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal btwn_buf_addr_reg_601_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal btwn_buf_addr_reg_601_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln288_1_fu_442_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln288_1_reg_606 : STD_LOGIC_VECTOR (16 downto 0);
    signal sigma_array_load_1_reg_616 : STD_LOGIC_VECTOR (31 downto 0);
    signal delta_array_load_reg_621 : STD_LOGIC_VECTOR (31 downto 0);
    signal btwn_buf_load_reg_626 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln287_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln287_reg_636_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln287_reg_636_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln287_reg_636_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln287_reg_636_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln287_reg_636_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln287_reg_636_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln287_reg_636_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln287_reg_636_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln287_reg_636_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln287_reg_636_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln287_reg_636_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln287_reg_636_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln287_reg_636_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln287_reg_636_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln287_reg_636_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_array_load_reg_640 : STD_LOGIC_VECTOR (15 downto 0);
    signal delta_array_addr_1_reg_655 : STD_LOGIC_VECTOR (11 downto 0);
    signal delta_array_addr_1_reg_655_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal delta_array_addr_1_reg_655_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal delta_array_addr_1_reg_655_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal delta_array_addr_1_reg_655_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal delta_array_addr_1_reg_655_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal delta_array_addr_1_reg_655_pp0_iter8_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal delta_array_addr_1_reg_655_pp0_iter9_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal delta_array_addr_1_reg_655_pp0_iter10_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal delta_array_addr_1_reg_655_pp0_iter11_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal delta_array_addr_1_reg_655_pp0_iter12_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal delta_array_addr_1_reg_655_pp0_iter13_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal delta_array_addr_1_reg_655_pp0_iter14_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal delta_array_addr_1_reg_655_pp0_iter15_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal delta_array_addr_1_reg_655_pp0_iter16_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal delta_array_addr_1_reg_655_pp0_iter17_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal sigma_array_load_reg_660 : STD_LOGIC_VECTOR (31 downto 0);
    signal sigma_tmp_load_reg_665 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_213_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add3_reg_670 : STD_LOGIC_VECTOR (31 downto 0);
    signal add3_reg_670_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add3_reg_670_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add3_reg_670_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add3_reg_670_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add3_reg_670_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add3_reg_670_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal conv3_reg_675 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_222_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal div_reg_680 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_218_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_685 : STD_LOGIC_VECTOR (31 downto 0);
    signal delta_array_load_1_reg_690 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln265_1_fu_264_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln265_2_fu_281_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_3_fu_394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_fu_407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln288_2_fu_467_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln289_fu_488_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_1_fu_76 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln269_fu_448_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_80 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln265_4_fu_366_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_allocacmp_j_1 : STD_LOGIC_VECTOR (12 downto 0);
    signal indvar_flatten13_fu_84 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln265_1_fu_299_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_sig_allocacmp_indvar_flatten13_load : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_209_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_209_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_226_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln265_1_fu_264_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln265_fu_275_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln265_fu_286_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln269_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln265_1_fu_321_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal cmp169_mid1_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp169_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln265_fu_337_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln265_1_fu_341_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln282_1_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln282_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_412_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_424_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln288_fu_420_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln288_1_fu_432_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln288_fu_436_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln269_fu_400_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln270_fu_458_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter17_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to16 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to18 : STD_LOGIC;
    signal ap_block_pp0 : BOOLEAN;
    signal ap_predicate_op94_load_state3 : BOOLEAN;
    signal ap_enable_operation_94 : BOOLEAN;
    signal ap_enable_state3_pp0_iter1_stage0 : BOOLEAN;
    signal ap_predicate_op112_load_state4 : BOOLEAN;
    signal ap_enable_operation_112 : BOOLEAN;
    signal ap_enable_state4_pp0_iter1_stage1 : BOOLEAN;
    signal ap_predicate_op186_store_state37 : BOOLEAN;
    signal ap_enable_operation_186 : BOOLEAN;
    signal ap_enable_state37_pp0_iter18_stage0 : BOOLEAN;
    signal ap_predicate_op96_load_state3 : BOOLEAN;
    signal ap_enable_operation_96 : BOOLEAN;
    signal ap_predicate_op114_load_state4 : BOOLEAN;
    signal ap_enable_operation_114 : BOOLEAN;
    signal ap_predicate_op158_store_state12 : BOOLEAN;
    signal ap_enable_operation_158 : BOOLEAN;
    signal ap_enable_state12_pp0_iter5_stage1 : BOOLEAN;
    signal ap_predicate_op176_load_state28 : BOOLEAN;
    signal ap_enable_operation_176 : BOOLEAN;
    signal ap_enable_state28_pp0_iter13_stage1 : BOOLEAN;
    signal ap_predicate_op178_load_state29 : BOOLEAN;
    signal ap_enable_operation_178 : BOOLEAN;
    signal ap_enable_state29_pp0_iter14_stage0 : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component dut_fadd_32ns_32ns_32_7_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fdiv_32ns_32ns_32_12_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_sitofp_32ns_32_5_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fadd_32ns_32ns_32_7_full_dsp_1_U37 : component dut_fadd_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => delta_tmp,
        din1 => ap_const_lv32_3F800000,
        ce => ap_const_logic_1,
        dout => grp_fu_213_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U38 : component dut_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => div_reg_680,
        din1 => add3_reg_670_pp0_iter11_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_218_p2);

    fdiv_32ns_32ns_32_12_no_dsp_1_U39 : component dut_fdiv_32ns_32ns_32_12_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv3_reg_675,
        din1 => sigma_tmp_load_reg_665,
        ce => ap_const_logic_1,
        dout => grp_fu_222_p2);

    flow_control_loop_pipe_sequential_init_U : component dut_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter17_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter10_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to16 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter17_stage0))) then 
                ap_loop_exit_ready_pp0_iter10_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter11_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to16 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter17_stage0))) then 
                ap_loop_exit_ready_pp0_iter11_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter12_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to16 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter17_stage0))) then 
                ap_loop_exit_ready_pp0_iter12_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter13_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to16 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter17_stage0))) then 
                ap_loop_exit_ready_pp0_iter13_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter14_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to16 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter17_stage0))) then 
                ap_loop_exit_ready_pp0_iter14_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter15_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to16 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter17_stage0))) then 
                ap_loop_exit_ready_pp0_iter15_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter16_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to16 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter17_stage0))) then 
                ap_loop_exit_ready_pp0_iter16_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter17_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to16 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter17_stage0))) then 
                ap_loop_exit_ready_pp0_iter17_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to16 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter17_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to16 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter17_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to16 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter17_stage0))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to16 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter17_stage0))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to16 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter17_stage0))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter6_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to16 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter17_stage0))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter7_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to16 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter17_stage0))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter8_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to16 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter17_stage0))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter9_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to16 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter17_stage0))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
            end if; 
        end if;
    end process;

    indvar_flatten13_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten13_fu_84 <= ap_const_lv17_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln265_reg_552 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                indvar_flatten13_fu_84 <= add_ln265_1_fu_299_p2;
            end if; 
        end if;
    end process;

    j_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_fu_80 <= ap_const_lv13_DCD;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln265_reg_552 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                j_fu_80 <= select_ln265_4_fu_366_p3;
            end if; 
        end if;
    end process;

    k_1_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    k_1_fu_76 <= ap_const_lv5_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    k_1_fu_76 <= add_ln269_fu_448_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln287_reg_636_pp0_iter4_reg = ap_const_lv1_1) and (select_ln265_1_reg_574_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add3_reg_670 <= grp_fu_213_p2;
                sigma_tmp_load_reg_665 <= sigma_tmp_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add3_reg_670_pp0_iter10_reg <= add3_reg_670_pp0_iter9_reg;
                add3_reg_670_pp0_iter11_reg <= add3_reg_670_pp0_iter10_reg;
                add3_reg_670_pp0_iter6_reg <= add3_reg_670;
                add3_reg_670_pp0_iter7_reg <= add3_reg_670_pp0_iter6_reg;
                add3_reg_670_pp0_iter8_reg <= add3_reg_670_pp0_iter7_reg;
                add3_reg_670_pp0_iter9_reg <= add3_reg_670_pp0_iter8_reg;
                btwn_buf_addr_reg_601_pp0_iter2_reg <= btwn_buf_addr_reg_601;
                btwn_buf_addr_reg_601_pp0_iter3_reg <= btwn_buf_addr_reg_601_pp0_iter2_reg;
                btwn_buf_addr_reg_601_pp0_iter4_reg <= btwn_buf_addr_reg_601_pp0_iter3_reg;
                btwn_buf_addr_reg_601_pp0_iter5_reg <= btwn_buf_addr_reg_601_pp0_iter4_reg;
                icmp_ln265_reg_552 <= icmp_ln265_fu_269_p2;
                icmp_ln265_reg_552_pp0_iter10_reg <= icmp_ln265_reg_552_pp0_iter9_reg;
                icmp_ln265_reg_552_pp0_iter11_reg <= icmp_ln265_reg_552_pp0_iter10_reg;
                icmp_ln265_reg_552_pp0_iter12_reg <= icmp_ln265_reg_552_pp0_iter11_reg;
                icmp_ln265_reg_552_pp0_iter13_reg <= icmp_ln265_reg_552_pp0_iter12_reg;
                icmp_ln265_reg_552_pp0_iter14_reg <= icmp_ln265_reg_552_pp0_iter13_reg;
                icmp_ln265_reg_552_pp0_iter15_reg <= icmp_ln265_reg_552_pp0_iter14_reg;
                icmp_ln265_reg_552_pp0_iter16_reg <= icmp_ln265_reg_552_pp0_iter15_reg;
                icmp_ln265_reg_552_pp0_iter1_reg <= icmp_ln265_reg_552;
                icmp_ln265_reg_552_pp0_iter2_reg <= icmp_ln265_reg_552_pp0_iter1_reg;
                icmp_ln265_reg_552_pp0_iter3_reg <= icmp_ln265_reg_552_pp0_iter2_reg;
                icmp_ln265_reg_552_pp0_iter4_reg <= icmp_ln265_reg_552_pp0_iter3_reg;
                icmp_ln265_reg_552_pp0_iter5_reg <= icmp_ln265_reg_552_pp0_iter4_reg;
                icmp_ln265_reg_552_pp0_iter6_reg <= icmp_ln265_reg_552_pp0_iter5_reg;
                icmp_ln265_reg_552_pp0_iter7_reg <= icmp_ln265_reg_552_pp0_iter6_reg;
                icmp_ln265_reg_552_pp0_iter8_reg <= icmp_ln265_reg_552_pp0_iter7_reg;
                icmp_ln265_reg_552_pp0_iter9_reg <= icmp_ln265_reg_552_pp0_iter8_reg;
                indvar_flatten13_load_reg_542 <= ap_sig_allocacmp_indvar_flatten13_load;
                j_1_reg_536 <= ap_sig_allocacmp_j_1;
                    zext_ln169_cast_reg_524(11 downto 0) <= zext_ln169_cast_fu_235_p1(11 downto 0);
                    zext_ln265_cast_reg_530(15 downto 0) <= zext_ln265_cast_fu_239_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln265_fu_269_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln265_reg_556 <= add_ln265_fu_275_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln265_1_reg_574 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln288_1_reg_606 <= add_ln288_1_fu_442_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln277_reg_587 = ap_const_lv1_1) and (select_ln265_1_reg_574 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                btwn_buf_addr_reg_601 <= zext_ln265_3_fu_394_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln277_reg_587 = ap_const_lv1_1) and (select_ln265_1_reg_574 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                btwn_buf_load_reg_626 <= btwn_buf_q0;
                delta_array_load_reg_621 <= delta_array_q1;
                delta_tmp <= delta_array_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln287_reg_636_pp0_iter4_reg = ap_const_lv1_1) and (select_ln265_1_reg_574_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                conv3_reg_675 <= grp_fu_671_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln265_1_reg_574_pp0_iter1_reg = ap_const_lv1_1) and (icmp_ln287_reg_636 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                delta_array_addr_1_reg_655 <= zext_ln289_fu_488_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                delta_array_addr_1_reg_655_pp0_iter10_reg <= delta_array_addr_1_reg_655_pp0_iter9_reg;
                delta_array_addr_1_reg_655_pp0_iter11_reg <= delta_array_addr_1_reg_655_pp0_iter10_reg;
                delta_array_addr_1_reg_655_pp0_iter12_reg <= delta_array_addr_1_reg_655_pp0_iter11_reg;
                delta_array_addr_1_reg_655_pp0_iter13_reg <= delta_array_addr_1_reg_655_pp0_iter12_reg;
                delta_array_addr_1_reg_655_pp0_iter14_reg <= delta_array_addr_1_reg_655_pp0_iter13_reg;
                delta_array_addr_1_reg_655_pp0_iter15_reg <= delta_array_addr_1_reg_655_pp0_iter14_reg;
                delta_array_addr_1_reg_655_pp0_iter16_reg <= delta_array_addr_1_reg_655_pp0_iter15_reg;
                delta_array_addr_1_reg_655_pp0_iter17_reg <= delta_array_addr_1_reg_655_pp0_iter16_reg;
                delta_array_addr_1_reg_655_pp0_iter3_reg <= delta_array_addr_1_reg_655;
                delta_array_addr_1_reg_655_pp0_iter4_reg <= delta_array_addr_1_reg_655_pp0_iter3_reg;
                delta_array_addr_1_reg_655_pp0_iter5_reg <= delta_array_addr_1_reg_655_pp0_iter4_reg;
                delta_array_addr_1_reg_655_pp0_iter6_reg <= delta_array_addr_1_reg_655_pp0_iter5_reg;
                delta_array_addr_1_reg_655_pp0_iter7_reg <= delta_array_addr_1_reg_655_pp0_iter6_reg;
                delta_array_addr_1_reg_655_pp0_iter8_reg <= delta_array_addr_1_reg_655_pp0_iter7_reg;
                delta_array_addr_1_reg_655_pp0_iter9_reg <= delta_array_addr_1_reg_655_pp0_iter8_reg;
                icmp_ln277_reg_587_pp0_iter1_reg <= icmp_ln277_reg_587;
                icmp_ln277_reg_587_pp0_iter2_reg <= icmp_ln277_reg_587_pp0_iter1_reg;
                icmp_ln277_reg_587_pp0_iter3_reg <= icmp_ln277_reg_587_pp0_iter2_reg;
                icmp_ln277_reg_587_pp0_iter4_reg <= icmp_ln277_reg_587_pp0_iter3_reg;
                icmp_ln287_reg_636_pp0_iter10_reg <= icmp_ln287_reg_636_pp0_iter9_reg;
                icmp_ln287_reg_636_pp0_iter11_reg <= icmp_ln287_reg_636_pp0_iter10_reg;
                icmp_ln287_reg_636_pp0_iter12_reg <= icmp_ln287_reg_636_pp0_iter11_reg;
                icmp_ln287_reg_636_pp0_iter13_reg <= icmp_ln287_reg_636_pp0_iter12_reg;
                icmp_ln287_reg_636_pp0_iter14_reg <= icmp_ln287_reg_636_pp0_iter13_reg;
                icmp_ln287_reg_636_pp0_iter15_reg <= icmp_ln287_reg_636_pp0_iter14_reg;
                icmp_ln287_reg_636_pp0_iter16_reg <= icmp_ln287_reg_636_pp0_iter15_reg;
                icmp_ln287_reg_636_pp0_iter17_reg <= icmp_ln287_reg_636_pp0_iter16_reg;
                icmp_ln287_reg_636_pp0_iter2_reg <= icmp_ln287_reg_636;
                icmp_ln287_reg_636_pp0_iter3_reg <= icmp_ln287_reg_636_pp0_iter2_reg;
                icmp_ln287_reg_636_pp0_iter4_reg <= icmp_ln287_reg_636_pp0_iter3_reg;
                icmp_ln287_reg_636_pp0_iter5_reg <= icmp_ln287_reg_636_pp0_iter4_reg;
                icmp_ln287_reg_636_pp0_iter6_reg <= icmp_ln287_reg_636_pp0_iter5_reg;
                icmp_ln287_reg_636_pp0_iter7_reg <= icmp_ln287_reg_636_pp0_iter6_reg;
                icmp_ln287_reg_636_pp0_iter8_reg <= icmp_ln287_reg_636_pp0_iter7_reg;
                icmp_ln287_reg_636_pp0_iter9_reg <= icmp_ln287_reg_636_pp0_iter8_reg;
                select_ln265_1_reg_574_pp0_iter10_reg <= select_ln265_1_reg_574_pp0_iter9_reg;
                select_ln265_1_reg_574_pp0_iter11_reg <= select_ln265_1_reg_574_pp0_iter10_reg;
                select_ln265_1_reg_574_pp0_iter12_reg <= select_ln265_1_reg_574_pp0_iter11_reg;
                select_ln265_1_reg_574_pp0_iter13_reg <= select_ln265_1_reg_574_pp0_iter12_reg;
                select_ln265_1_reg_574_pp0_iter14_reg <= select_ln265_1_reg_574_pp0_iter13_reg;
                select_ln265_1_reg_574_pp0_iter15_reg <= select_ln265_1_reg_574_pp0_iter14_reg;
                select_ln265_1_reg_574_pp0_iter16_reg <= select_ln265_1_reg_574_pp0_iter15_reg;
                select_ln265_1_reg_574_pp0_iter17_reg <= select_ln265_1_reg_574_pp0_iter16_reg;
                select_ln265_1_reg_574_pp0_iter1_reg <= select_ln265_1_reg_574;
                select_ln265_1_reg_574_pp0_iter2_reg <= select_ln265_1_reg_574_pp0_iter1_reg;
                select_ln265_1_reg_574_pp0_iter3_reg <= select_ln265_1_reg_574_pp0_iter2_reg;
                select_ln265_1_reg_574_pp0_iter4_reg <= select_ln265_1_reg_574_pp0_iter3_reg;
                select_ln265_1_reg_574_pp0_iter5_reg <= select_ln265_1_reg_574_pp0_iter4_reg;
                select_ln265_1_reg_574_pp0_iter6_reg <= select_ln265_1_reg_574_pp0_iter5_reg;
                select_ln265_1_reg_574_pp0_iter7_reg <= select_ln265_1_reg_574_pp0_iter6_reg;
                select_ln265_1_reg_574_pp0_iter8_reg <= select_ln265_1_reg_574_pp0_iter7_reg;
                select_ln265_1_reg_574_pp0_iter9_reg <= select_ln265_1_reg_574_pp0_iter8_reg;
                select_ln265_3_reg_583_pp0_iter1_reg <= select_ln265_3_reg_583;
                select_ln265_3_reg_583_pp0_iter2_reg <= select_ln265_3_reg_583_pp0_iter1_reg;
                select_ln265_3_reg_583_pp0_iter3_reg <= select_ln265_3_reg_583_pp0_iter2_reg;
                select_ln265_3_reg_583_pp0_iter4_reg <= select_ln265_3_reg_583_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (icmp_ln287_reg_636_pp0_iter13_reg = ap_const_lv1_1) and (select_ln265_1_reg_574_pp0_iter13_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                delta_array_load_1_reg_690 <= delta_array_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln287_reg_636_pp0_iter10_reg = ap_const_lv1_1) and (select_ln265_1_reg_574_pp0_iter10_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                div_reg_680 <= grp_fu_222_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln265_1_fu_329_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln265_reg_552 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                icmp_ln277_reg_587 <= icmp_ln277_fu_372_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln265_1_reg_574 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                icmp_ln287_reg_636 <= icmp_ln287_fu_471_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln287_reg_636_pp0_iter12_reg = ap_const_lv1_1) and (select_ln265_1_reg_574_pp0_iter12_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                mul_reg_685 <= grp_fu_218_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln265_1_reg_574_pp0_iter1_reg = ap_const_lv1_1) and (icmp_ln287_reg_636 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_array_load_reg_640 <= p_array_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (icmp_ln287_reg_636_pp0_iter16_reg = ap_const_lv1_1) and (select_ln265_1_reg_574_pp0_iter16_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (select_ln265_3_reg_583_pp0_iter4_reg = ap_const_lv1_0) and (icmp_ln277_reg_587_pp0_iter4_reg = ap_const_lv1_1) and (select_ln265_1_reg_574_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then
                reg_229 <= grp_fu_667_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln265_reg_552 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                select_ln265_1_reg_574 <= select_ln265_1_fu_329_p3;
                select_ln265_2_reg_578 <= select_ln265_2_fu_345_p3;
                select_ln265_3_reg_583 <= select_ln265_3_fu_358_p3;
                select_ln265_reg_567 <= select_ln265_fu_313_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                sigma_array_load_1_reg_616 <= sigma_array_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln287_reg_636_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (select_ln265_1_reg_574_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sigma_array_load_reg_660 <= sigma_array_q0;
            end if;
        end if;
    end process;
    zext_ln169_cast_reg_524(15 downto 12) <= "0000";
    zext_ln265_cast_reg_530(16) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter17_stage0, ap_idle_pp0_0to16, ap_idle_pp0_1to18, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to16 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter17_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to18 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln265_1_fu_299_p2 <= std_logic_vector(unsigned(indvar_flatten13_load_reg_542) + unsigned(ap_const_lv17_1));
    add_ln265_fu_275_p0 <= ap_sig_allocacmp_j_1;
    add_ln265_fu_275_p2 <= std_logic_vector(signed(add_ln265_fu_275_p0) + signed(ap_const_lv13_1FFF));
    add_ln269_fu_448_p2 <= std_logic_vector(unsigned(select_ln265_reg_567) + unsigned(ap_const_lv5_1));
    add_ln288_1_fu_442_p2 <= std_logic_vector(unsigned(add_ln288_fu_436_p2) + unsigned(zext_ln269_fu_400_p1));
    add_ln288_fu_436_p2 <= std_logic_vector(unsigned(zext_ln288_fu_420_p1) + unsigned(zext_ln288_1_fu_432_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= (((ap_ST_fsm_pp0_stage1 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage1_subdone)) or ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone)));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage1_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage1_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage1_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage1_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage1_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage1_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage1_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln265_reg_552)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln265_reg_552 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter17_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter17, icmp_ln265_reg_552_pp0_iter16_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (icmp_ln265_reg_552_pp0_iter16_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter17_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter17_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter17_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter17_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_enable_operation_112_assign_proc : process(ap_predicate_op112_load_state4)
    begin
                ap_enable_operation_112 <= (ap_predicate_op112_load_state4 = ap_const_boolean_1);
    end process;


    ap_enable_operation_114_assign_proc : process(ap_predicate_op114_load_state4)
    begin
                ap_enable_operation_114 <= (ap_predicate_op114_load_state4 = ap_const_boolean_1);
    end process;


    ap_enable_operation_158_assign_proc : process(ap_predicate_op158_store_state12)
    begin
                ap_enable_operation_158 <= (ap_predicate_op158_store_state12 = ap_const_boolean_1);
    end process;


    ap_enable_operation_176_assign_proc : process(ap_predicate_op176_load_state28)
    begin
                ap_enable_operation_176 <= (ap_predicate_op176_load_state28 = ap_const_boolean_1);
    end process;


    ap_enable_operation_178_assign_proc : process(ap_predicate_op178_load_state29)
    begin
                ap_enable_operation_178 <= (ap_predicate_op178_load_state29 = ap_const_boolean_1);
    end process;


    ap_enable_operation_186_assign_proc : process(ap_predicate_op186_store_state37)
    begin
                ap_enable_operation_186 <= (ap_predicate_op186_store_state37 = ap_const_boolean_1);
    end process;


    ap_enable_operation_94_assign_proc : process(ap_predicate_op94_load_state3)
    begin
                ap_enable_operation_94 <= (ap_predicate_op94_load_state3 = ap_const_boolean_1);
    end process;


    ap_enable_operation_96_assign_proc : process(ap_predicate_op96_load_state3)
    begin
                ap_enable_operation_96 <= (ap_predicate_op96_load_state3 = ap_const_boolean_1);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_enable_state12_pp0_iter5_stage1_assign_proc : process(ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1)
    begin
                ap_enable_state12_pp0_iter5_stage1 <= ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_enable_state28_pp0_iter13_stage1_assign_proc : process(ap_enable_reg_pp0_iter13, ap_CS_fsm_pp0_stage1)
    begin
                ap_enable_state28_pp0_iter13_stage1 <= ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_enable_state29_pp0_iter14_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter14)
    begin
                ap_enable_state29_pp0_iter14_stage0 <= ((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state37_pp0_iter18_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter18)
    begin
                ap_enable_state37_pp0_iter18_stage0 <= ((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state3_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
                ap_enable_state3_pp0_iter1_stage0 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state4_pp0_iter1_stage1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1)
    begin
                ap_enable_state4_pp0_iter1_stage1 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to16_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to16 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to18_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to18 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to18 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_predicate_op112_load_state4_assign_proc : process(select_ln265_1_reg_574, icmp_ln277_reg_587)
    begin
                ap_predicate_op112_load_state4 <= ((icmp_ln277_reg_587 = ap_const_lv1_1) and (select_ln265_1_reg_574 = ap_const_lv1_1));
    end process;


    ap_predicate_op114_load_state4_assign_proc : process(select_ln265_1_reg_574, icmp_ln277_reg_587)
    begin
                ap_predicate_op114_load_state4 <= ((icmp_ln277_reg_587 = ap_const_lv1_1) and (select_ln265_1_reg_574 = ap_const_lv1_1));
    end process;


    ap_predicate_op158_store_state12_assign_proc : process(select_ln265_1_reg_574_pp0_iter4_reg, icmp_ln277_reg_587_pp0_iter4_reg, select_ln265_3_reg_583_pp0_iter4_reg)
    begin
                ap_predicate_op158_store_state12 <= ((select_ln265_3_reg_583_pp0_iter4_reg = ap_const_lv1_0) and (icmp_ln277_reg_587_pp0_iter4_reg = ap_const_lv1_1) and (select_ln265_1_reg_574_pp0_iter4_reg = ap_const_lv1_1));
    end process;


    ap_predicate_op176_load_state28_assign_proc : process(select_ln265_1_reg_574_pp0_iter12_reg, icmp_ln287_reg_636_pp0_iter12_reg)
    begin
                ap_predicate_op176_load_state28 <= ((icmp_ln287_reg_636_pp0_iter12_reg = ap_const_lv1_1) and (select_ln265_1_reg_574_pp0_iter12_reg = ap_const_lv1_1));
    end process;


    ap_predicate_op178_load_state29_assign_proc : process(select_ln265_1_reg_574_pp0_iter13_reg, icmp_ln287_reg_636_pp0_iter13_reg)
    begin
                ap_predicate_op178_load_state29 <= ((icmp_ln287_reg_636_pp0_iter13_reg = ap_const_lv1_1) and (select_ln265_1_reg_574_pp0_iter13_reg = ap_const_lv1_1));
    end process;


    ap_predicate_op186_store_state37_assign_proc : process(select_ln265_1_reg_574_pp0_iter17_reg, icmp_ln287_reg_636_pp0_iter17_reg)
    begin
                ap_predicate_op186_store_state37 <= ((icmp_ln287_reg_636_pp0_iter17_reg = ap_const_lv1_1) and (select_ln265_1_reg_574_pp0_iter17_reg = ap_const_lv1_1));
    end process;


    ap_predicate_op94_load_state3_assign_proc : process(select_ln265_1_reg_574, icmp_ln277_reg_587)
    begin
                ap_predicate_op94_load_state3 <= ((icmp_ln277_reg_587 = ap_const_lv1_1) and (select_ln265_1_reg_574 = ap_const_lv1_1));
    end process;


    ap_predicate_op96_load_state3_assign_proc : process(select_ln265_1_reg_574, icmp_ln277_reg_587)
    begin
                ap_predicate_op96_load_state3 <= ((icmp_ln277_reg_587 = ap_const_lv1_1) and (select_ln265_1_reg_574 = ap_const_lv1_1));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten13_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten13_fu_84)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten13_load <= ap_const_lv17_0;
        else 
            ap_sig_allocacmp_indvar_flatten13_load <= indvar_flatten13_fu_84;
        end if; 
    end process;


    ap_sig_allocacmp_j_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_80)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_j_1 <= ap_const_lv13_DCD;
        else 
            ap_sig_allocacmp_j_1 <= j_fu_80;
        end if; 
    end process;


    btwn_buf_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, btwn_buf_addr_reg_601_pp0_iter5_reg, ap_block_pp0_stage0, zext_ln265_3_fu_394_p1, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            btwn_buf_address0 <= btwn_buf_addr_reg_601_pp0_iter5_reg;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            btwn_buf_address0 <= zext_ln265_3_fu_394_p1(12 - 1 downto 0);
        else 
            btwn_buf_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    btwn_buf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            btwn_buf_ce0 <= ap_const_logic_1;
        else 
            btwn_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    btwn_buf_d0 <= reg_229;

    btwn_buf_we0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, select_ln265_1_reg_574_pp0_iter4_reg, icmp_ln277_reg_587_pp0_iter4_reg, select_ln265_3_reg_583_pp0_iter4_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (select_ln265_3_reg_583_pp0_iter4_reg = ap_const_lv1_0) and (icmp_ln277_reg_587_pp0_iter4_reg = ap_const_lv1_1) and (select_ln265_1_reg_574_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            btwn_buf_we0 <= ap_const_logic_1;
        else 
            btwn_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cmp169_fu_289_p2 <= "1" when (signed(sext_ln265_fu_286_p1) < signed(zext_ln265_cast_reg_530)) else "0";
    cmp169_mid1_fu_324_p2 <= "1" when (signed(sext_ln265_1_fu_321_p1) < signed(zext_ln265_cast_reg_530)) else "0";

    delta_array_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter18, ap_CS_fsm_pp0_stage1, delta_array_addr_1_reg_655_pp0_iter12_reg, delta_array_addr_1_reg_655_pp0_iter17_reg, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            delta_array_address0 <= delta_array_addr_1_reg_655_pp0_iter17_reg;
        elsif (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            delta_array_address0 <= delta_array_addr_1_reg_655_pp0_iter12_reg;
        else 
            delta_array_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    delta_array_address1 <= zext_ln265_3_fu_394_p1(12 - 1 downto 0);

    delta_array_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter18, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            delta_array_ce0 <= ap_const_logic_1;
        else 
            delta_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delta_array_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            delta_array_ce1 <= ap_const_logic_1;
        else 
            delta_array_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    delta_array_d0 <= reg_229;

    delta_array_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001, select_ln265_1_reg_574_pp0_iter17_reg, icmp_ln287_reg_636_pp0_iter17_reg)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (icmp_ln287_reg_636_pp0_iter17_reg = ap_const_lv1_1) and (select_ln265_1_reg_574_pp0_iter17_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            delta_array_we0 <= ap_const_logic_1;
        else 
            delta_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_209_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter14, ap_CS_fsm_pp0_stage1, btwn_buf_load_reg_626, delta_array_load_1_reg_690, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_209_p0 <= delta_array_load_1_reg_690;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_209_p0 <= btwn_buf_load_reg_626;
        else 
            grp_fu_209_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_209_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter14, ap_CS_fsm_pp0_stage1, delta_array_load_reg_621, mul_reg_685, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_209_p1 <= mul_reg_685;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_209_p1 <= delta_array_load_reg_621;
        else 
            grp_fu_209_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_226_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, sigma_array_load_1_reg_616, sigma_array_load_reg_660, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_226_p0 <= sigma_array_load_reg_660;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_226_p0 <= sigma_array_load_1_reg_616;
        else 
            grp_fu_226_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_667_p_ce <= ap_const_logic_1;
    grp_fu_667_p_din0 <= grp_fu_209_p0;
    grp_fu_667_p_din1 <= grp_fu_209_p1;
    grp_fu_667_p_opcode <= ap_const_lv2_0;
    grp_fu_671_p_ce <= ap_const_logic_1;
    grp_fu_671_p_din0 <= grp_fu_226_p0;
    icmp_ln265_fu_269_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten13_load = ap_const_lv17_174BA) else "0";
    icmp_ln269_fu_307_p2 <= "1" when (k_1_fu_76 = ap_const_lv5_1B) else "0";
    icmp_ln277_fu_372_p2 <= "1" when (select_ln265_fu_313_p3 = ap_const_lv5_0) else "0";
    icmp_ln282_1_fu_353_p2 <= "1" when (s_array_q0 = zext_ln169_cast_reg_524) else "0";
    icmp_ln282_fu_294_p2 <= "1" when (s_array_q1 = zext_ln169_cast_reg_524) else "0";
    icmp_ln287_fu_471_p2 <= "1" when (unsigned(zext_ln270_fu_458_p1) < unsigned(p_index_array_q0)) else "0";
    p_array_address0 <= zext_ln288_2_fu_467_p1(17 - 1 downto 0);

    p_array_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            p_array_ce0 <= ap_const_logic_1;
        else 
            p_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_index_array_address0 <= zext_ln287_fu_407_p1(12 - 1 downto 0);

    p_index_array_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_index_array_ce0 <= ap_const_logic_1;
        else 
            p_index_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    s_array_address0 <= zext_ln265_2_fu_281_p1(12 - 1 downto 0);
    s_array_address1 <= zext_ln265_1_fu_264_p1(12 - 1 downto 0);

    s_array_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            s_array_ce0 <= ap_const_logic_1;
        else 
            s_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s_array_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            s_array_ce1 <= ap_const_logic_1;
        else 
            s_array_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln265_1_fu_329_p3 <= 
        cmp169_mid1_fu_324_p2 when (icmp_ln269_fu_307_p2(0) = '1') else 
        cmp169_fu_289_p2;
    select_ln265_2_fu_345_p3 <= 
        trunc_ln265_fu_337_p1 when (icmp_ln269_fu_307_p2(0) = '1') else 
        trunc_ln265_1_fu_341_p1;
    select_ln265_3_fu_358_p3 <= 
        icmp_ln282_1_fu_353_p2 when (icmp_ln269_fu_307_p2(0) = '1') else 
        icmp_ln282_fu_294_p2;
    select_ln265_4_fu_366_p3 <= 
        add_ln265_reg_556 when (icmp_ln269_fu_307_p2(0) = '1') else 
        j_1_reg_536;
    select_ln265_fu_313_p3 <= 
        ap_const_lv5_0 when (icmp_ln269_fu_307_p2(0) = '1') else 
        k_1_fu_76;
        sext_ln265_1_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln265_reg_556),17));

        sext_ln265_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_1_reg_536),17));


    sigma_array_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln265_3_fu_394_p1, ap_block_pp0_stage1, zext_ln289_fu_488_p1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            sigma_array_address0 <= zext_ln289_fu_488_p1(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            sigma_array_address0 <= zext_ln265_3_fu_394_p1(12 - 1 downto 0);
        else 
            sigma_array_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sigma_array_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            sigma_array_ce0 <= ap_const_logic_1;
        else 
            sigma_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sigma_tmp_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, sigma_tmp_i, select_ln265_1_reg_574_pp0_iter3_reg, icmp_ln277_reg_587_pp0_iter3_reg, ap_block_pp0_stage0, grp_fu_671_p_dout0)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln277_reg_587_pp0_iter3_reg = ap_const_lv1_1) and (select_ln265_1_reg_574_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            sigma_tmp_o <= grp_fu_671_p_dout0;
        else 
            sigma_tmp_o <= sigma_tmp_i;
        end if; 
    end process;


    sigma_tmp_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, select_ln265_1_reg_574_pp0_iter3_reg, icmp_ln277_reg_587_pp0_iter3_reg)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln277_reg_587_pp0_iter3_reg = ap_const_lv1_1) and (select_ln265_1_reg_574_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            sigma_tmp_o_ap_vld <= ap_const_logic_1;
        else 
            sigma_tmp_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_7_fu_412_p3 <= (w_i & ap_const_lv4_0);
    tmp_8_fu_424_p3 <= (w_i & ap_const_lv2_0);
    trunc_ln265_1_fu_341_p1 <= s_array_q1(12 - 1 downto 0);
    trunc_ln265_fu_337_p1 <= s_array_q0(12 - 1 downto 0);
    v <= p_array_q0;

    v_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln287_reg_636, select_ln265_1_reg_574_pp0_iter1_reg)
    begin
        if (((select_ln265_1_reg_574_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln287_reg_636 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            v_ap_vld <= ap_const_logic_1;
        else 
            v_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    w_o_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln265_reg_552, w_i, select_ln265_1_fu_329_p3, select_ln265_2_fu_345_p3, icmp_ln277_fu_372_p2, ap_block_pp0_stage1)
    begin
        if (((icmp_ln277_fu_372_p2 = ap_const_lv1_1) and (select_ln265_1_fu_329_p3 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln265_reg_552 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            w_o <= select_ln265_2_fu_345_p3;
        else 
            w_o <= w_i;
        end if; 
    end process;


    w_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln265_reg_552, ap_block_pp0_stage1_11001, select_ln265_1_fu_329_p3, icmp_ln277_fu_372_p2)
    begin
        if (((icmp_ln277_fu_372_p2 = ap_const_lv1_1) and (select_ln265_1_fu_329_p3 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln265_reg_552 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            w_o_ap_vld <= ap_const_logic_1;
        else 
            w_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln169_cast_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln169),16));
    zext_ln265_1_fu_264_p0 <= ap_sig_allocacmp_j_1;
    zext_ln265_1_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln265_1_fu_264_p0),64));
    zext_ln265_2_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln265_fu_275_p2),64));
    zext_ln265_3_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln265_2_reg_578),64));
    zext_ln265_cast_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln265),17));
    zext_ln269_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln265_reg_567),17));
    zext_ln270_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln265_reg_567),8));
    zext_ln287_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_i),64));
    zext_ln288_1_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_424_p3),17));
    zext_ln288_2_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln288_1_reg_606),64));
    zext_ln288_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_412_p3),17));
    zext_ln289_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_array_load_reg_640),64));
end behav;
