// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dut_dut_Pipeline_Dequeue_loop_Computing_loop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln265,
        zext_ln169,
        s_array_address0,
        s_array_ce0,
        s_array_q0,
        s_array_address1,
        s_array_ce1,
        s_array_q1,
        sigma_array_address0,
        sigma_array_ce0,
        sigma_array_q0,
        w_i,
        w_o,
        w_o_ap_vld,
        p_index_array_address0,
        p_index_array_ce0,
        p_index_array_q0,
        delta_array_address0,
        delta_array_ce0,
        delta_array_we0,
        delta_array_d0,
        delta_array_q0,
        delta_array_address1,
        delta_array_ce1,
        delta_array_q1,
        btwn_buf_address0,
        btwn_buf_ce0,
        btwn_buf_we0,
        btwn_buf_d0,
        btwn_buf_q0,
        sigma_tmp_i,
        sigma_tmp_o,
        sigma_tmp_o_ap_vld,
        p_array_address0,
        p_array_ce0,
        p_array_q0,
        v,
        v_ap_vld,
        grp_fu_667_p_din0,
        grp_fu_667_p_din1,
        grp_fu_667_p_opcode,
        grp_fu_667_p_dout0,
        grp_fu_667_p_ce,
        grp_fu_671_p_din0,
        grp_fu_671_p_dout0,
        grp_fu_671_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] zext_ln265;
input  [11:0] zext_ln169;
output  [11:0] s_array_address0;
output   s_array_ce0;
input  [15:0] s_array_q0;
output  [11:0] s_array_address1;
output   s_array_ce1;
input  [15:0] s_array_q1;
output  [11:0] sigma_array_address0;
output   sigma_array_ce0;
input  [31:0] sigma_array_q0;
input  [11:0] w_i;
output  [11:0] w_o;
output   w_o_ap_vld;
output  [11:0] p_index_array_address0;
output   p_index_array_ce0;
input  [7:0] p_index_array_q0;
output  [11:0] delta_array_address0;
output   delta_array_ce0;
output   delta_array_we0;
output  [31:0] delta_array_d0;
input  [31:0] delta_array_q0;
output  [11:0] delta_array_address1;
output   delta_array_ce1;
input  [31:0] delta_array_q1;
output  [11:0] btwn_buf_address0;
output   btwn_buf_ce0;
output   btwn_buf_we0;
output  [31:0] btwn_buf_d0;
input  [31:0] btwn_buf_q0;
input  [31:0] sigma_tmp_i;
output  [31:0] sigma_tmp_o;
output   sigma_tmp_o_ap_vld;
output  [16:0] p_array_address0;
output   p_array_ce0;
input  [15:0] p_array_q0;
output  [15:0] v;
output   v_ap_vld;
output  [31:0] grp_fu_667_p_din0;
output  [31:0] grp_fu_667_p_din1;
output  [1:0] grp_fu_667_p_opcode;
input  [31:0] grp_fu_667_p_dout0;
output   grp_fu_667_p_ce;
output  [31:0] grp_fu_671_p_din0;
input  [31:0] grp_fu_671_p_dout0;
output   grp_fu_671_p_ce;

reg ap_idle;
reg s_array_ce0;
reg s_array_ce1;
reg[11:0] sigma_array_address0;
reg sigma_array_ce0;
reg[11:0] w_o;
reg w_o_ap_vld;
reg p_index_array_ce0;
reg[11:0] delta_array_address0;
reg delta_array_ce0;
reg delta_array_we0;
reg delta_array_ce1;
reg[11:0] btwn_buf_address0;
reg btwn_buf_ce0;
reg btwn_buf_we0;
reg[31:0] sigma_tmp_o;
reg sigma_tmp_o_ap_vld;
reg p_array_ce0;
reg v_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_state8_pp0_stage1_iter3;
wire    ap_block_state10_pp0_stage1_iter4;
wire    ap_block_state12_pp0_stage1_iter5;
wire    ap_block_state14_pp0_stage1_iter6;
wire    ap_block_state16_pp0_stage1_iter7;
wire    ap_block_state18_pp0_stage1_iter8;
wire    ap_block_state20_pp0_stage1_iter9;
wire    ap_block_state22_pp0_stage1_iter10;
wire    ap_block_state24_pp0_stage1_iter11;
wire    ap_block_state26_pp0_stage1_iter12;
wire    ap_block_state28_pp0_stage1_iter13;
wire    ap_block_state30_pp0_stage1_iter14;
wire    ap_block_state32_pp0_stage1_iter15;
wire    ap_block_state34_pp0_stage1_iter16;
wire    ap_block_state36_pp0_stage1_iter17;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln265_reg_552;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [31:0] delta_tmp;
reg   [31:0] reg_229;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_state11_pp0_stage0_iter5;
wire    ap_block_state13_pp0_stage0_iter6;
wire    ap_block_state15_pp0_stage0_iter7;
wire    ap_block_state17_pp0_stage0_iter8;
wire    ap_block_state19_pp0_stage0_iter9;
wire    ap_block_state21_pp0_stage0_iter10;
wire    ap_block_state23_pp0_stage0_iter11;
wire    ap_block_state25_pp0_stage0_iter12;
wire    ap_block_state27_pp0_stage0_iter13;
wire    ap_block_state29_pp0_stage0_iter14;
wire    ap_block_state31_pp0_stage0_iter15;
wire    ap_block_state33_pp0_stage0_iter16;
wire    ap_block_state35_pp0_stage0_iter17;
wire    ap_block_state37_pp0_stage0_iter18;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] select_ln265_1_reg_574;
reg   [0:0] select_ln265_1_reg_574_pp0_iter4_reg;
reg   [0:0] icmp_ln277_reg_587;
reg   [0:0] icmp_ln277_reg_587_pp0_iter4_reg;
reg   [0:0] select_ln265_3_reg_583;
reg   [0:0] select_ln265_3_reg_583_pp0_iter4_reg;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] select_ln265_1_reg_574_pp0_iter16_reg;
reg   [0:0] icmp_ln287_reg_636;
reg   [0:0] icmp_ln287_reg_636_pp0_iter16_reg;
wire   [15:0] zext_ln169_cast_fu_235_p1;
reg   [15:0] zext_ln169_cast_reg_524;
wire   [16:0] zext_ln265_cast_fu_239_p1;
reg   [16:0] zext_ln265_cast_reg_530;
reg  signed [12:0] j_1_reg_536;
reg   [16:0] indvar_flatten13_load_reg_542;
wire   [0:0] icmp_ln265_fu_269_p2;
reg   [0:0] icmp_ln265_reg_552_pp0_iter1_reg;
reg   [0:0] icmp_ln265_reg_552_pp0_iter2_reg;
reg   [0:0] icmp_ln265_reg_552_pp0_iter3_reg;
reg   [0:0] icmp_ln265_reg_552_pp0_iter4_reg;
reg   [0:0] icmp_ln265_reg_552_pp0_iter5_reg;
reg   [0:0] icmp_ln265_reg_552_pp0_iter6_reg;
reg   [0:0] icmp_ln265_reg_552_pp0_iter7_reg;
reg   [0:0] icmp_ln265_reg_552_pp0_iter8_reg;
reg   [0:0] icmp_ln265_reg_552_pp0_iter9_reg;
reg   [0:0] icmp_ln265_reg_552_pp0_iter10_reg;
reg   [0:0] icmp_ln265_reg_552_pp0_iter11_reg;
reg   [0:0] icmp_ln265_reg_552_pp0_iter12_reg;
reg   [0:0] icmp_ln265_reg_552_pp0_iter13_reg;
reg   [0:0] icmp_ln265_reg_552_pp0_iter14_reg;
reg   [0:0] icmp_ln265_reg_552_pp0_iter15_reg;
reg   [0:0] icmp_ln265_reg_552_pp0_iter16_reg;
wire  signed [12:0] add_ln265_fu_275_p2;
reg  signed [12:0] add_ln265_reg_556;
wire   [4:0] select_ln265_fu_313_p3;
reg   [4:0] select_ln265_reg_567;
wire   [0:0] select_ln265_1_fu_329_p3;
reg   [0:0] select_ln265_1_reg_574_pp0_iter1_reg;
reg   [0:0] select_ln265_1_reg_574_pp0_iter2_reg;
reg   [0:0] select_ln265_1_reg_574_pp0_iter3_reg;
reg   [0:0] select_ln265_1_reg_574_pp0_iter5_reg;
reg   [0:0] select_ln265_1_reg_574_pp0_iter6_reg;
reg   [0:0] select_ln265_1_reg_574_pp0_iter7_reg;
reg   [0:0] select_ln265_1_reg_574_pp0_iter8_reg;
reg   [0:0] select_ln265_1_reg_574_pp0_iter9_reg;
reg   [0:0] select_ln265_1_reg_574_pp0_iter10_reg;
reg   [0:0] select_ln265_1_reg_574_pp0_iter11_reg;
reg   [0:0] select_ln265_1_reg_574_pp0_iter12_reg;
reg   [0:0] select_ln265_1_reg_574_pp0_iter13_reg;
reg   [0:0] select_ln265_1_reg_574_pp0_iter14_reg;
reg   [0:0] select_ln265_1_reg_574_pp0_iter15_reg;
reg   [0:0] select_ln265_1_reg_574_pp0_iter17_reg;
wire   [11:0] select_ln265_2_fu_345_p3;
reg   [11:0] select_ln265_2_reg_578;
wire   [0:0] select_ln265_3_fu_358_p3;
reg   [0:0] select_ln265_3_reg_583_pp0_iter1_reg;
reg   [0:0] select_ln265_3_reg_583_pp0_iter2_reg;
reg   [0:0] select_ln265_3_reg_583_pp0_iter3_reg;
wire   [0:0] icmp_ln277_fu_372_p2;
reg   [0:0] icmp_ln277_reg_587_pp0_iter1_reg;
reg   [0:0] icmp_ln277_reg_587_pp0_iter2_reg;
reg   [0:0] icmp_ln277_reg_587_pp0_iter3_reg;
reg   [11:0] btwn_buf_addr_reg_601;
reg   [11:0] btwn_buf_addr_reg_601_pp0_iter2_reg;
reg   [11:0] btwn_buf_addr_reg_601_pp0_iter3_reg;
reg   [11:0] btwn_buf_addr_reg_601_pp0_iter4_reg;
reg   [11:0] btwn_buf_addr_reg_601_pp0_iter5_reg;
wire   [16:0] add_ln288_1_fu_442_p2;
reg   [16:0] add_ln288_1_reg_606;
reg   [31:0] sigma_array_load_1_reg_616;
reg   [31:0] delta_array_load_reg_621;
reg   [31:0] btwn_buf_load_reg_626;
wire   [0:0] icmp_ln287_fu_471_p2;
reg   [0:0] icmp_ln287_reg_636_pp0_iter2_reg;
reg   [0:0] icmp_ln287_reg_636_pp0_iter3_reg;
reg   [0:0] icmp_ln287_reg_636_pp0_iter4_reg;
reg   [0:0] icmp_ln287_reg_636_pp0_iter5_reg;
reg   [0:0] icmp_ln287_reg_636_pp0_iter6_reg;
reg   [0:0] icmp_ln287_reg_636_pp0_iter7_reg;
reg   [0:0] icmp_ln287_reg_636_pp0_iter8_reg;
reg   [0:0] icmp_ln287_reg_636_pp0_iter9_reg;
reg   [0:0] icmp_ln287_reg_636_pp0_iter10_reg;
reg   [0:0] icmp_ln287_reg_636_pp0_iter11_reg;
reg   [0:0] icmp_ln287_reg_636_pp0_iter12_reg;
reg   [0:0] icmp_ln287_reg_636_pp0_iter13_reg;
reg   [0:0] icmp_ln287_reg_636_pp0_iter14_reg;
reg   [0:0] icmp_ln287_reg_636_pp0_iter15_reg;
reg   [0:0] icmp_ln287_reg_636_pp0_iter17_reg;
reg   [15:0] p_array_load_reg_640;
reg   [11:0] delta_array_addr_1_reg_655;
reg   [11:0] delta_array_addr_1_reg_655_pp0_iter3_reg;
reg   [11:0] delta_array_addr_1_reg_655_pp0_iter4_reg;
reg   [11:0] delta_array_addr_1_reg_655_pp0_iter5_reg;
reg   [11:0] delta_array_addr_1_reg_655_pp0_iter6_reg;
reg   [11:0] delta_array_addr_1_reg_655_pp0_iter7_reg;
reg   [11:0] delta_array_addr_1_reg_655_pp0_iter8_reg;
reg   [11:0] delta_array_addr_1_reg_655_pp0_iter9_reg;
reg   [11:0] delta_array_addr_1_reg_655_pp0_iter10_reg;
reg   [11:0] delta_array_addr_1_reg_655_pp0_iter11_reg;
reg   [11:0] delta_array_addr_1_reg_655_pp0_iter12_reg;
reg   [11:0] delta_array_addr_1_reg_655_pp0_iter13_reg;
reg   [11:0] delta_array_addr_1_reg_655_pp0_iter14_reg;
reg   [11:0] delta_array_addr_1_reg_655_pp0_iter15_reg;
reg   [11:0] delta_array_addr_1_reg_655_pp0_iter16_reg;
reg   [11:0] delta_array_addr_1_reg_655_pp0_iter17_reg;
reg   [31:0] sigma_array_load_reg_660;
reg   [31:0] sigma_tmp_load_reg_665;
wire   [31:0] grp_fu_213_p2;
reg   [31:0] add3_reg_670;
reg   [31:0] add3_reg_670_pp0_iter6_reg;
reg   [31:0] add3_reg_670_pp0_iter7_reg;
reg   [31:0] add3_reg_670_pp0_iter8_reg;
reg   [31:0] add3_reg_670_pp0_iter9_reg;
reg   [31:0] add3_reg_670_pp0_iter10_reg;
reg   [31:0] add3_reg_670_pp0_iter11_reg;
reg   [31:0] conv3_reg_675;
wire   [31:0] grp_fu_222_p2;
reg   [31:0] div_reg_680;
wire   [31:0] grp_fu_218_p2;
reg   [31:0] mul_reg_685;
reg   [31:0] delta_array_load_1_reg_690;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln265_1_fu_264_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln265_2_fu_281_p1;
wire   [63:0] zext_ln265_3_fu_394_p1;
wire   [63:0] zext_ln287_fu_407_p1;
wire   [63:0] zext_ln288_2_fu_467_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln289_fu_488_p1;
reg   [4:0] k_1_fu_76;
wire   [4:0] add_ln269_fu_448_p2;
wire    ap_loop_init;
reg   [12:0] j_fu_80;
wire   [12:0] select_ln265_4_fu_366_p3;
reg   [12:0] ap_sig_allocacmp_j_1;
reg   [16:0] indvar_flatten13_fu_84;
wire   [16:0] add_ln265_1_fu_299_p2;
reg   [16:0] ap_sig_allocacmp_indvar_flatten13_load;
reg   [31:0] grp_fu_209_p0;
reg   [31:0] grp_fu_209_p1;
reg   [31:0] grp_fu_226_p0;
wire  signed [12:0] zext_ln265_1_fu_264_p0;
wire  signed [12:0] add_ln265_fu_275_p0;
wire  signed [16:0] sext_ln265_fu_286_p1;
wire   [0:0] icmp_ln269_fu_307_p2;
wire  signed [16:0] sext_ln265_1_fu_321_p1;
wire   [0:0] cmp169_mid1_fu_324_p2;
wire   [0:0] cmp169_fu_289_p2;
wire   [11:0] trunc_ln265_fu_337_p1;
wire   [11:0] trunc_ln265_1_fu_341_p1;
wire   [0:0] icmp_ln282_1_fu_353_p2;
wire   [0:0] icmp_ln282_fu_294_p2;
wire   [15:0] tmp_7_fu_412_p3;
wire   [13:0] tmp_8_fu_424_p3;
wire   [16:0] zext_ln288_fu_420_p1;
wire   [16:0] zext_ln288_1_fu_432_p1;
wire   [16:0] add_ln288_fu_436_p2;
wire   [16:0] zext_ln269_fu_400_p1;
wire   [7:0] zext_ln270_fu_458_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter17_stage0;
reg    ap_idle_pp0_0to16;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to18;
reg    ap_block_pp0;
reg    ap_predicate_op94_load_state3;
reg    ap_enable_operation_94;
reg    ap_enable_state3_pp0_iter1_stage0;
reg    ap_predicate_op112_load_state4;
reg    ap_enable_operation_112;
reg    ap_enable_state4_pp0_iter1_stage1;
reg    ap_predicate_op186_store_state37;
reg    ap_enable_operation_186;
reg    ap_enable_state37_pp0_iter18_stage0;
reg    ap_predicate_op96_load_state3;
reg    ap_enable_operation_96;
reg    ap_predicate_op114_load_state4;
reg    ap_enable_operation_114;
reg    ap_predicate_op158_store_state12;
reg    ap_enable_operation_158;
reg    ap_enable_state12_pp0_iter5_stage1;
reg    ap_predicate_op176_load_state28;
reg    ap_enable_operation_176;
reg    ap_enable_state28_pp0_iter13_stage1;
reg    ap_predicate_op178_load_state29;
reg    ap_enable_operation_178;
reg    ap_enable_state29_pp0_iter14_stage0;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_block_pp0_stage0_00001;
wire    ap_block_pp0_stage1_00001;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 delta_tmp = 32'd0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

dut_fadd_32ns_32ns_32_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_7_full_dsp_1_U37(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(delta_tmp),
    .din1(32'd1065353216),
    .ce(1'b1),
    .dout(grp_fu_213_p2)
);

dut_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U38(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(div_reg_680),
    .din1(add3_reg_670_pp0_iter11_reg),
    .ce(1'b1),
    .dout(grp_fu_218_p2)
);

dut_fdiv_32ns_32ns_32_12_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_12_no_dsp_1_U39(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv3_reg_675),
    .din1(sigma_tmp_load_reg_665),
    .ce(1'b1),
    .dout(grp_fu_222_p2)
);

dut_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter17_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter18 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to16 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter17_stage0))) begin
        ap_loop_exit_ready_pp0_iter10_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to16 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter17_stage0))) begin
        ap_loop_exit_ready_pp0_iter11_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to16 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter17_stage0))) begin
        ap_loop_exit_ready_pp0_iter12_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to16 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter17_stage0))) begin
        ap_loop_exit_ready_pp0_iter13_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to16 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter17_stage0))) begin
        ap_loop_exit_ready_pp0_iter14_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to16 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter17_stage0))) begin
        ap_loop_exit_ready_pp0_iter15_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to16 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter17_stage0))) begin
        ap_loop_exit_ready_pp0_iter16_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to16 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter17_stage0))) begin
        ap_loop_exit_ready_pp0_iter17_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to16 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter17_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to16 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter17_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to16 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter17_stage0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to16 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter17_stage0))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to16 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter17_stage0))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to16 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter17_stage0))) begin
        ap_loop_exit_ready_pp0_iter6_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to16 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter17_stage0))) begin
        ap_loop_exit_ready_pp0_iter7_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to16 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter17_stage0))) begin
        ap_loop_exit_ready_pp0_iter8_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to16 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter17_stage0))) begin
        ap_loop_exit_ready_pp0_iter9_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten13_fu_84 <= 17'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln265_reg_552 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        indvar_flatten13_fu_84 <= add_ln265_1_fu_299_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_fu_80 <= 13'd3533;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln265_reg_552 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        j_fu_80 <= select_ln265_4_fu_366_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            k_1_fu_76 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            k_1_fu_76 <= add_ln269_fu_448_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln287_reg_636_pp0_iter4_reg == 1'd1) & (select_ln265_1_reg_574_pp0_iter4_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add3_reg_670 <= grp_fu_213_p2;
        sigma_tmp_load_reg_665 <= sigma_tmp_i;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add3_reg_670_pp0_iter10_reg <= add3_reg_670_pp0_iter9_reg;
        add3_reg_670_pp0_iter11_reg <= add3_reg_670_pp0_iter10_reg;
        add3_reg_670_pp0_iter6_reg <= add3_reg_670;
        add3_reg_670_pp0_iter7_reg <= add3_reg_670_pp0_iter6_reg;
        add3_reg_670_pp0_iter8_reg <= add3_reg_670_pp0_iter7_reg;
        add3_reg_670_pp0_iter9_reg <= add3_reg_670_pp0_iter8_reg;
        btwn_buf_addr_reg_601_pp0_iter2_reg <= btwn_buf_addr_reg_601;
        btwn_buf_addr_reg_601_pp0_iter3_reg <= btwn_buf_addr_reg_601_pp0_iter2_reg;
        btwn_buf_addr_reg_601_pp0_iter4_reg <= btwn_buf_addr_reg_601_pp0_iter3_reg;
        btwn_buf_addr_reg_601_pp0_iter5_reg <= btwn_buf_addr_reg_601_pp0_iter4_reg;
        icmp_ln265_reg_552 <= icmp_ln265_fu_269_p2;
        icmp_ln265_reg_552_pp0_iter10_reg <= icmp_ln265_reg_552_pp0_iter9_reg;
        icmp_ln265_reg_552_pp0_iter11_reg <= icmp_ln265_reg_552_pp0_iter10_reg;
        icmp_ln265_reg_552_pp0_iter12_reg <= icmp_ln265_reg_552_pp0_iter11_reg;
        icmp_ln265_reg_552_pp0_iter13_reg <= icmp_ln265_reg_552_pp0_iter12_reg;
        icmp_ln265_reg_552_pp0_iter14_reg <= icmp_ln265_reg_552_pp0_iter13_reg;
        icmp_ln265_reg_552_pp0_iter15_reg <= icmp_ln265_reg_552_pp0_iter14_reg;
        icmp_ln265_reg_552_pp0_iter16_reg <= icmp_ln265_reg_552_pp0_iter15_reg;
        icmp_ln265_reg_552_pp0_iter1_reg <= icmp_ln265_reg_552;
        icmp_ln265_reg_552_pp0_iter2_reg <= icmp_ln265_reg_552_pp0_iter1_reg;
        icmp_ln265_reg_552_pp0_iter3_reg <= icmp_ln265_reg_552_pp0_iter2_reg;
        icmp_ln265_reg_552_pp0_iter4_reg <= icmp_ln265_reg_552_pp0_iter3_reg;
        icmp_ln265_reg_552_pp0_iter5_reg <= icmp_ln265_reg_552_pp0_iter4_reg;
        icmp_ln265_reg_552_pp0_iter6_reg <= icmp_ln265_reg_552_pp0_iter5_reg;
        icmp_ln265_reg_552_pp0_iter7_reg <= icmp_ln265_reg_552_pp0_iter6_reg;
        icmp_ln265_reg_552_pp0_iter8_reg <= icmp_ln265_reg_552_pp0_iter7_reg;
        icmp_ln265_reg_552_pp0_iter9_reg <= icmp_ln265_reg_552_pp0_iter8_reg;
        indvar_flatten13_load_reg_542 <= ap_sig_allocacmp_indvar_flatten13_load;
        j_1_reg_536 <= ap_sig_allocacmp_j_1;
        zext_ln169_cast_reg_524[11 : 0] <= zext_ln169_cast_fu_235_p1[11 : 0];
        zext_ln265_cast_reg_530[15 : 0] <= zext_ln265_cast_fu_239_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln265_fu_269_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln265_reg_556 <= add_ln265_fu_275_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln265_1_reg_574 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln288_1_reg_606 <= add_ln288_1_fu_442_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln277_reg_587 == 1'd1) & (select_ln265_1_reg_574 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        btwn_buf_addr_reg_601 <= zext_ln265_3_fu_394_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln277_reg_587 == 1'd1) & (select_ln265_1_reg_574 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        btwn_buf_load_reg_626 <= btwn_buf_q0;
        delta_array_load_reg_621 <= delta_array_q1;
        delta_tmp <= delta_array_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln287_reg_636_pp0_iter4_reg == 1'd1) & (select_ln265_1_reg_574_pp0_iter4_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        conv3_reg_675 <= grp_fu_671_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln265_1_reg_574_pp0_iter1_reg == 1'd1) & (icmp_ln287_reg_636 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        delta_array_addr_1_reg_655 <= zext_ln289_fu_488_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        delta_array_addr_1_reg_655_pp0_iter10_reg <= delta_array_addr_1_reg_655_pp0_iter9_reg;
        delta_array_addr_1_reg_655_pp0_iter11_reg <= delta_array_addr_1_reg_655_pp0_iter10_reg;
        delta_array_addr_1_reg_655_pp0_iter12_reg <= delta_array_addr_1_reg_655_pp0_iter11_reg;
        delta_array_addr_1_reg_655_pp0_iter13_reg <= delta_array_addr_1_reg_655_pp0_iter12_reg;
        delta_array_addr_1_reg_655_pp0_iter14_reg <= delta_array_addr_1_reg_655_pp0_iter13_reg;
        delta_array_addr_1_reg_655_pp0_iter15_reg <= delta_array_addr_1_reg_655_pp0_iter14_reg;
        delta_array_addr_1_reg_655_pp0_iter16_reg <= delta_array_addr_1_reg_655_pp0_iter15_reg;
        delta_array_addr_1_reg_655_pp0_iter17_reg <= delta_array_addr_1_reg_655_pp0_iter16_reg;
        delta_array_addr_1_reg_655_pp0_iter3_reg <= delta_array_addr_1_reg_655;
        delta_array_addr_1_reg_655_pp0_iter4_reg <= delta_array_addr_1_reg_655_pp0_iter3_reg;
        delta_array_addr_1_reg_655_pp0_iter5_reg <= delta_array_addr_1_reg_655_pp0_iter4_reg;
        delta_array_addr_1_reg_655_pp0_iter6_reg <= delta_array_addr_1_reg_655_pp0_iter5_reg;
        delta_array_addr_1_reg_655_pp0_iter7_reg <= delta_array_addr_1_reg_655_pp0_iter6_reg;
        delta_array_addr_1_reg_655_pp0_iter8_reg <= delta_array_addr_1_reg_655_pp0_iter7_reg;
        delta_array_addr_1_reg_655_pp0_iter9_reg <= delta_array_addr_1_reg_655_pp0_iter8_reg;
        icmp_ln277_reg_587_pp0_iter1_reg <= icmp_ln277_reg_587;
        icmp_ln277_reg_587_pp0_iter2_reg <= icmp_ln277_reg_587_pp0_iter1_reg;
        icmp_ln277_reg_587_pp0_iter3_reg <= icmp_ln277_reg_587_pp0_iter2_reg;
        icmp_ln277_reg_587_pp0_iter4_reg <= icmp_ln277_reg_587_pp0_iter3_reg;
        icmp_ln287_reg_636_pp0_iter10_reg <= icmp_ln287_reg_636_pp0_iter9_reg;
        icmp_ln287_reg_636_pp0_iter11_reg <= icmp_ln287_reg_636_pp0_iter10_reg;
        icmp_ln287_reg_636_pp0_iter12_reg <= icmp_ln287_reg_636_pp0_iter11_reg;
        icmp_ln287_reg_636_pp0_iter13_reg <= icmp_ln287_reg_636_pp0_iter12_reg;
        icmp_ln287_reg_636_pp0_iter14_reg <= icmp_ln287_reg_636_pp0_iter13_reg;
        icmp_ln287_reg_636_pp0_iter15_reg <= icmp_ln287_reg_636_pp0_iter14_reg;
        icmp_ln287_reg_636_pp0_iter16_reg <= icmp_ln287_reg_636_pp0_iter15_reg;
        icmp_ln287_reg_636_pp0_iter17_reg <= icmp_ln287_reg_636_pp0_iter16_reg;
        icmp_ln287_reg_636_pp0_iter2_reg <= icmp_ln287_reg_636;
        icmp_ln287_reg_636_pp0_iter3_reg <= icmp_ln287_reg_636_pp0_iter2_reg;
        icmp_ln287_reg_636_pp0_iter4_reg <= icmp_ln287_reg_636_pp0_iter3_reg;
        icmp_ln287_reg_636_pp0_iter5_reg <= icmp_ln287_reg_636_pp0_iter4_reg;
        icmp_ln287_reg_636_pp0_iter6_reg <= icmp_ln287_reg_636_pp0_iter5_reg;
        icmp_ln287_reg_636_pp0_iter7_reg <= icmp_ln287_reg_636_pp0_iter6_reg;
        icmp_ln287_reg_636_pp0_iter8_reg <= icmp_ln287_reg_636_pp0_iter7_reg;
        icmp_ln287_reg_636_pp0_iter9_reg <= icmp_ln287_reg_636_pp0_iter8_reg;
        select_ln265_1_reg_574_pp0_iter10_reg <= select_ln265_1_reg_574_pp0_iter9_reg;
        select_ln265_1_reg_574_pp0_iter11_reg <= select_ln265_1_reg_574_pp0_iter10_reg;
        select_ln265_1_reg_574_pp0_iter12_reg <= select_ln265_1_reg_574_pp0_iter11_reg;
        select_ln265_1_reg_574_pp0_iter13_reg <= select_ln265_1_reg_574_pp0_iter12_reg;
        select_ln265_1_reg_574_pp0_iter14_reg <= select_ln265_1_reg_574_pp0_iter13_reg;
        select_ln265_1_reg_574_pp0_iter15_reg <= select_ln265_1_reg_574_pp0_iter14_reg;
        select_ln265_1_reg_574_pp0_iter16_reg <= select_ln265_1_reg_574_pp0_iter15_reg;
        select_ln265_1_reg_574_pp0_iter17_reg <= select_ln265_1_reg_574_pp0_iter16_reg;
        select_ln265_1_reg_574_pp0_iter1_reg <= select_ln265_1_reg_574;
        select_ln265_1_reg_574_pp0_iter2_reg <= select_ln265_1_reg_574_pp0_iter1_reg;
        select_ln265_1_reg_574_pp0_iter3_reg <= select_ln265_1_reg_574_pp0_iter2_reg;
        select_ln265_1_reg_574_pp0_iter4_reg <= select_ln265_1_reg_574_pp0_iter3_reg;
        select_ln265_1_reg_574_pp0_iter5_reg <= select_ln265_1_reg_574_pp0_iter4_reg;
        select_ln265_1_reg_574_pp0_iter6_reg <= select_ln265_1_reg_574_pp0_iter5_reg;
        select_ln265_1_reg_574_pp0_iter7_reg <= select_ln265_1_reg_574_pp0_iter6_reg;
        select_ln265_1_reg_574_pp0_iter8_reg <= select_ln265_1_reg_574_pp0_iter7_reg;
        select_ln265_1_reg_574_pp0_iter9_reg <= select_ln265_1_reg_574_pp0_iter8_reg;
        select_ln265_3_reg_583_pp0_iter1_reg <= select_ln265_3_reg_583;
        select_ln265_3_reg_583_pp0_iter2_reg <= select_ln265_3_reg_583_pp0_iter1_reg;
        select_ln265_3_reg_583_pp0_iter3_reg <= select_ln265_3_reg_583_pp0_iter2_reg;
        select_ln265_3_reg_583_pp0_iter4_reg <= select_ln265_3_reg_583_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter14 == 1'b1) & (icmp_ln287_reg_636_pp0_iter13_reg == 1'd1) & (select_ln265_1_reg_574_pp0_iter13_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        delta_array_load_1_reg_690 <= delta_array_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln287_reg_636_pp0_iter10_reg == 1'd1) & (select_ln265_1_reg_574_pp0_iter10_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        div_reg_680 <= grp_fu_222_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln265_1_fu_329_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln265_reg_552 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        icmp_ln277_reg_587 <= icmp_ln277_fu_372_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln265_1_reg_574 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        icmp_ln287_reg_636 <= icmp_ln287_fu_471_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln287_reg_636_pp0_iter12_reg == 1'd1) & (select_ln265_1_reg_574_pp0_iter12_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        mul_reg_685 <= grp_fu_218_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln265_1_reg_574_pp0_iter1_reg == 1'd1) & (icmp_ln287_reg_636 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_array_load_reg_640 <= p_array_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter17 == 1'b1) & (icmp_ln287_reg_636_pp0_iter16_reg == 1'd1) & (select_ln265_1_reg_574_pp0_iter16_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (select_ln265_3_reg_583_pp0_iter4_reg == 1'd0) & (icmp_ln277_reg_587_pp0_iter4_reg == 1'd1) & (select_ln265_1_reg_574_pp0_iter4_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        reg_229 <= grp_fu_667_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln265_reg_552 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        select_ln265_1_reg_574 <= select_ln265_1_fu_329_p3;
        select_ln265_2_reg_578 <= select_ln265_2_fu_345_p3;
        select_ln265_3_reg_583 <= select_ln265_3_fu_358_p3;
        select_ln265_reg_567 <= select_ln265_fu_313_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        sigma_array_load_1_reg_616 <= sigma_array_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln287_reg_636_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (select_ln265_1_reg_574_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sigma_array_load_reg_660 <= sigma_array_q0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln265_reg_552 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter17 == 1'b1) & (icmp_ln265_reg_552_pp0_iter16_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter17_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter17_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter17_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to16 = 1'b1;
    end else begin
        ap_idle_pp0_0to16 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to18 = 1'b1;
    end else begin
        ap_idle_pp0_1to18 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten13_load = 17'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten13_load = indvar_flatten13_fu_84;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_j_1 = 13'd3533;
    end else begin
        ap_sig_allocacmp_j_1 = j_fu_80;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        btwn_buf_address0 = btwn_buf_addr_reg_601_pp0_iter5_reg;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        btwn_buf_address0 = zext_ln265_3_fu_394_p1;
    end else begin
        btwn_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        btwn_buf_ce0 = 1'b1;
    end else begin
        btwn_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (select_ln265_3_reg_583_pp0_iter4_reg == 1'd0) & (icmp_ln277_reg_587_pp0_iter4_reg == 1'd1) & (select_ln265_1_reg_574_pp0_iter4_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        btwn_buf_we0 = 1'b1;
    end else begin
        btwn_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        delta_array_address0 = delta_array_addr_1_reg_655_pp0_iter17_reg;
    end else if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        delta_array_address0 = delta_array_addr_1_reg_655_pp0_iter12_reg;
    end else begin
        delta_array_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        delta_array_ce0 = 1'b1;
    end else begin
        delta_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        delta_array_ce1 = 1'b1;
    end else begin
        delta_array_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (icmp_ln287_reg_636_pp0_iter17_reg == 1'd1) & (select_ln265_1_reg_574_pp0_iter17_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        delta_array_we0 = 1'b1;
    end else begin
        delta_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter14 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_209_p0 = delta_array_load_1_reg_690;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_209_p0 = btwn_buf_load_reg_626;
    end else begin
        grp_fu_209_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter14 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_209_p1 = mul_reg_685;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_209_p1 = delta_array_load_reg_621;
    end else begin
        grp_fu_209_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_226_p0 = sigma_array_load_reg_660;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_226_p0 = sigma_array_load_1_reg_616;
    end else begin
        grp_fu_226_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        p_array_ce0 = 1'b1;
    end else begin
        p_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_index_array_ce0 = 1'b1;
    end else begin
        p_index_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        s_array_ce0 = 1'b1;
    end else begin
        s_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        s_array_ce1 = 1'b1;
    end else begin
        s_array_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        sigma_array_address0 = zext_ln289_fu_488_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        sigma_array_address0 = zext_ln265_3_fu_394_p1;
    end else begin
        sigma_array_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        sigma_array_ce0 = 1'b1;
    end else begin
        sigma_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln277_reg_587_pp0_iter3_reg == 1'd1) & (select_ln265_1_reg_574_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        sigma_tmp_o = grp_fu_671_p_dout0;
    end else begin
        sigma_tmp_o = sigma_tmp_i;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln277_reg_587_pp0_iter3_reg == 1'd1) & (select_ln265_1_reg_574_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sigma_tmp_o_ap_vld = 1'b1;
    end else begin
        sigma_tmp_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln265_1_reg_574_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln287_reg_636 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v_ap_vld = 1'b1;
    end else begin
        v_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln277_fu_372_p2 == 1'd1) & (select_ln265_1_fu_329_p3 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln265_reg_552 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        w_o = select_ln265_2_fu_345_p3;
    end else begin
        w_o = w_i;
    end
end

always @ (*) begin
    if (((icmp_ln277_fu_372_p2 == 1'd1) & (select_ln265_1_fu_329_p3 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln265_reg_552 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        w_o_ap_vld = 1'b1;
    end else begin
        w_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to16 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter17_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to18 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln265_1_fu_299_p2 = (indvar_flatten13_load_reg_542 + 17'd1);

assign add_ln265_fu_275_p0 = ap_sig_allocacmp_j_1;

assign add_ln265_fu_275_p2 = ($signed(add_ln265_fu_275_p0) + $signed(13'd8191));

assign add_ln269_fu_448_p2 = (select_ln265_reg_567 + 5'd1);

assign add_ln288_1_fu_442_p2 = (add_ln288_fu_436_p2 + zext_ln269_fu_400_p1);

assign add_ln288_fu_436_p2 = (zext_ln288_fu_420_p1 + zext_ln288_1_fu_432_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_pp0 = (((ap_ST_fsm_pp0_stage1 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage1_subdone)) | ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone)));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage1_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage1_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage1_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage1_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage1_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage1_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage1_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage1_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage1_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage1_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_enable_operation_112 = (ap_predicate_op112_load_state4 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_114 = (ap_predicate_op114_load_state4 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_158 = (ap_predicate_op158_store_state12 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_176 = (ap_predicate_op176_load_state28 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_178 = (ap_predicate_op178_load_state29 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_186 = (ap_predicate_op186_store_state37 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_94 = (ap_predicate_op94_load_state3 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_96 = (ap_predicate_op96_load_state3 == 1'b1);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_enable_state12_pp0_iter5_stage1 = ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_enable_state28_pp0_iter13_stage1 = ((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_enable_state29_pp0_iter14_stage0 = ((ap_enable_reg_pp0_iter14 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state37_pp0_iter18_stage0 = ((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state3_pp0_iter1_stage0 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state4_pp0_iter1_stage1 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

always @ (*) begin
    ap_predicate_op112_load_state4 = ((icmp_ln277_reg_587 == 1'd1) & (select_ln265_1_reg_574 == 1'd1));
end

always @ (*) begin
    ap_predicate_op114_load_state4 = ((icmp_ln277_reg_587 == 1'd1) & (select_ln265_1_reg_574 == 1'd1));
end

always @ (*) begin
    ap_predicate_op158_store_state12 = ((select_ln265_3_reg_583_pp0_iter4_reg == 1'd0) & (icmp_ln277_reg_587_pp0_iter4_reg == 1'd1) & (select_ln265_1_reg_574_pp0_iter4_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_op176_load_state28 = ((icmp_ln287_reg_636_pp0_iter12_reg == 1'd1) & (select_ln265_1_reg_574_pp0_iter12_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_op178_load_state29 = ((icmp_ln287_reg_636_pp0_iter13_reg == 1'd1) & (select_ln265_1_reg_574_pp0_iter13_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_op186_store_state37 = ((icmp_ln287_reg_636_pp0_iter17_reg == 1'd1) & (select_ln265_1_reg_574_pp0_iter17_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_op94_load_state3 = ((icmp_ln277_reg_587 == 1'd1) & (select_ln265_1_reg_574 == 1'd1));
end

always @ (*) begin
    ap_predicate_op96_load_state3 = ((icmp_ln277_reg_587 == 1'd1) & (select_ln265_1_reg_574 == 1'd1));
end

assign btwn_buf_d0 = reg_229;

assign cmp169_fu_289_p2 = (($signed(sext_ln265_fu_286_p1) < $signed(zext_ln265_cast_reg_530)) ? 1'b1 : 1'b0);

assign cmp169_mid1_fu_324_p2 = (($signed(sext_ln265_1_fu_321_p1) < $signed(zext_ln265_cast_reg_530)) ? 1'b1 : 1'b0);

assign delta_array_address1 = zext_ln265_3_fu_394_p1;

assign delta_array_d0 = reg_229;

assign grp_fu_667_p_ce = 1'b1;

assign grp_fu_667_p_din0 = grp_fu_209_p0;

assign grp_fu_667_p_din1 = grp_fu_209_p1;

assign grp_fu_667_p_opcode = 2'd0;

assign grp_fu_671_p_ce = 1'b1;

assign grp_fu_671_p_din0 = grp_fu_226_p0;

assign icmp_ln265_fu_269_p2 = ((ap_sig_allocacmp_indvar_flatten13_load == 17'd95418) ? 1'b1 : 1'b0);

assign icmp_ln269_fu_307_p2 = ((k_1_fu_76 == 5'd27) ? 1'b1 : 1'b0);

assign icmp_ln277_fu_372_p2 = ((select_ln265_fu_313_p3 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln282_1_fu_353_p2 = ((s_array_q0 == zext_ln169_cast_reg_524) ? 1'b1 : 1'b0);

assign icmp_ln282_fu_294_p2 = ((s_array_q1 == zext_ln169_cast_reg_524) ? 1'b1 : 1'b0);

assign icmp_ln287_fu_471_p2 = ((zext_ln270_fu_458_p1 < p_index_array_q0) ? 1'b1 : 1'b0);

assign p_array_address0 = zext_ln288_2_fu_467_p1;

assign p_index_array_address0 = zext_ln287_fu_407_p1;

assign s_array_address0 = zext_ln265_2_fu_281_p1;

assign s_array_address1 = zext_ln265_1_fu_264_p1;

assign select_ln265_1_fu_329_p3 = ((icmp_ln269_fu_307_p2[0:0] == 1'b1) ? cmp169_mid1_fu_324_p2 : cmp169_fu_289_p2);

assign select_ln265_2_fu_345_p3 = ((icmp_ln269_fu_307_p2[0:0] == 1'b1) ? trunc_ln265_fu_337_p1 : trunc_ln265_1_fu_341_p1);

assign select_ln265_3_fu_358_p3 = ((icmp_ln269_fu_307_p2[0:0] == 1'b1) ? icmp_ln282_1_fu_353_p2 : icmp_ln282_fu_294_p2);

assign select_ln265_4_fu_366_p3 = ((icmp_ln269_fu_307_p2[0:0] == 1'b1) ? add_ln265_reg_556 : j_1_reg_536);

assign select_ln265_fu_313_p3 = ((icmp_ln269_fu_307_p2[0:0] == 1'b1) ? 5'd0 : k_1_fu_76);

assign sext_ln265_1_fu_321_p1 = add_ln265_reg_556;

assign sext_ln265_fu_286_p1 = j_1_reg_536;

assign tmp_7_fu_412_p3 = {{w_i}, {4'd0}};

assign tmp_8_fu_424_p3 = {{w_i}, {2'd0}};

assign trunc_ln265_1_fu_341_p1 = s_array_q1[11:0];

assign trunc_ln265_fu_337_p1 = s_array_q0[11:0];

assign v = p_array_q0;

assign zext_ln169_cast_fu_235_p1 = zext_ln169;

assign zext_ln265_1_fu_264_p0 = ap_sig_allocacmp_j_1;

assign zext_ln265_1_fu_264_p1 = $unsigned(zext_ln265_1_fu_264_p0);

assign zext_ln265_2_fu_281_p1 = $unsigned(add_ln265_fu_275_p2);

assign zext_ln265_3_fu_394_p1 = select_ln265_2_reg_578;

assign zext_ln265_cast_fu_239_p1 = zext_ln265;

assign zext_ln269_fu_400_p1 = select_ln265_reg_567;

assign zext_ln270_fu_458_p1 = select_ln265_reg_567;

assign zext_ln287_fu_407_p1 = w_i;

assign zext_ln288_1_fu_432_p1 = tmp_8_fu_424_p3;

assign zext_ln288_2_fu_467_p1 = add_ln288_1_reg_606;

assign zext_ln288_fu_420_p1 = tmp_7_fu_412_p3;

assign zext_ln289_fu_488_p1 = p_array_load_reg_640;

always @ (posedge ap_clk) begin
    zext_ln169_cast_reg_524[15:12] <= 4'b0000;
    zext_ln265_cast_reg_530[16] <= 1'b0;
end

endmodule //dut_dut_Pipeline_Dequeue_loop_Computing_loop
