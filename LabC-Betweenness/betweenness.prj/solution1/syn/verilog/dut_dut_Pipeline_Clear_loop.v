// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dut_dut_Pipeline_Clear_loop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        idxprom52,
        i_2,
        zext_ln169,
        dist_array_address0,
        dist_array_ce0,
        dist_array_we0,
        dist_array_d0,
        sigma_array_address0,
        sigma_array_ce0,
        sigma_array_we0,
        sigma_array_d0,
        travel_address0,
        travel_ce0,
        travel_we0,
        travel_d0,
        s_array_address0,
        s_array_ce0,
        s_array_we0,
        s_array_d0,
        p_index_array_address0,
        p_index_array_ce0,
        p_index_array_we0,
        p_index_array_d0,
        delta_array_address0,
        delta_array_ce0,
        delta_array_we0,
        delta_array_d0,
        q_array_address0,
        q_array_ce0,
        q_array_we0,
        q_array_d0
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [11:0] idxprom52;
input  [11:0] i_2;
input  [11:0] zext_ln169;
output  [11:0] dist_array_address0;
output   dist_array_ce0;
output   dist_array_we0;
output  [15:0] dist_array_d0;
output  [11:0] sigma_array_address0;
output   sigma_array_ce0;
output   sigma_array_we0;
output  [31:0] sigma_array_d0;
output  [11:0] travel_address0;
output   travel_ce0;
output   travel_we0;
output  [0:0] travel_d0;
output  [11:0] s_array_address0;
output   s_array_ce0;
output   s_array_we0;
output  [15:0] s_array_d0;
output  [11:0] p_index_array_address0;
output   p_index_array_ce0;
output   p_index_array_we0;
output  [7:0] p_index_array_d0;
output  [11:0] delta_array_address0;
output   delta_array_ce0;
output   delta_array_we0;
output  [31:0] delta_array_d0;
output  [11:0] q_array_address0;
output   q_array_ce0;
output   q_array_we0;
output  [15:0] q_array_d0;

reg ap_idle;
reg[11:0] dist_array_address0;
reg dist_array_ce0;
reg dist_array_we0;
reg[15:0] dist_array_d0;
reg[11:0] sigma_array_address0;
reg sigma_array_ce0;
reg sigma_array_we0;
reg[31:0] sigma_array_d0;
reg[11:0] travel_address0;
reg travel_ce0;
reg travel_we0;
reg[0:0] travel_d0;
reg s_array_ce0;
reg s_array_we0;
reg p_index_array_ce0;
reg p_index_array_we0;
reg delta_array_ce0;
reg delta_array_we0;
reg[11:0] q_array_address0;
reg q_array_ce0;
reg q_array_we0;
reg[15:0] q_array_d0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln173_fu_228_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] idxprom52_cast_fu_213_p1;
wire   [63:0] zext_ln173_fu_240_p1;
wire   [0:0] icmp_ln189_fu_251_p2;
wire   [0:0] icmp_ln195_fu_257_p2;
reg   [11:0] j_fu_60;
wire   [11:0] add_ln173_fu_234_p2;
wire    ap_loop_init;
reg   [11:0] ap_sig_allocacmp_j_2;
wire   [15:0] zext_ln169_cast_fu_208_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_predicate_op32_store_state1;
reg    ap_enable_operation_32;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_state1_pp0_iter0_stage0;
reg    ap_predicate_op34_store_state1;
reg    ap_enable_operation_34;
reg    ap_predicate_op39_store_state1;
reg    ap_enable_operation_39;
reg    ap_predicate_op45_store_state1;
reg    ap_enable_operation_45;
reg    ap_predicate_op41_store_state1;
reg    ap_enable_operation_41;
reg    ap_predicate_op46_store_state1;
reg    ap_enable_operation_46;
reg    ap_predicate_op43_store_state1;
reg    ap_enable_operation_43;
reg    ap_predicate_op47_store_state1;
reg    ap_enable_operation_47;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

dut_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln173_fu_228_p2 == 1'd0)) begin
            j_fu_60 <= add_ln173_fu_234_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_60 <= 12'd0;
        end
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln173_fu_228_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_2 = 12'd0;
    end else begin
        ap_sig_allocacmp_j_2 = j_fu_60;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        delta_array_ce0 = 1'b1;
    end else begin
        delta_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln173_fu_228_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        delta_array_we0 = 1'b1;
    end else begin
        delta_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln173_fu_228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln195_fu_257_p2 == 1'd1)) begin
            dist_array_address0 = idxprom52_cast_fu_213_p1;
        end else if ((icmp_ln195_fu_257_p2 == 1'd0)) begin
            dist_array_address0 = zext_ln173_fu_240_p1;
        end else begin
            dist_array_address0 = 'bx;
        end
    end else begin
        dist_array_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln173_fu_228_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln195_fu_257_p2 == 1'd1)) | ((icmp_ln173_fu_228_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln195_fu_257_p2 == 1'd0)))) begin
        dist_array_ce0 = 1'b1;
    end else begin
        dist_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln173_fu_228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln195_fu_257_p2 == 1'd1)) begin
            dist_array_d0 = 16'd0;
        end else if ((icmp_ln195_fu_257_p2 == 1'd0)) begin
            dist_array_d0 = 16'd65535;
        end else begin
            dist_array_d0 = 'bx;
        end
    end else begin
        dist_array_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln173_fu_228_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln195_fu_257_p2 == 1'd1)) | ((icmp_ln173_fu_228_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln195_fu_257_p2 == 1'd0)))) begin
        dist_array_we0 = 1'b1;
    end else begin
        dist_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_index_array_ce0 = 1'b1;
    end else begin
        p_index_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln173_fu_228_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_index_array_we0 = 1'b1;
    end else begin
        p_index_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln173_fu_228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln189_fu_251_p2 == 1'd1)) begin
            q_array_address0 = 12'd0;
        end else if ((icmp_ln189_fu_251_p2 == 1'd0)) begin
            q_array_address0 = zext_ln173_fu_240_p1;
        end else begin
            q_array_address0 = 'bx;
        end
    end else begin
        q_array_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln189_fu_251_p2 == 1'd0) & (icmp_ln173_fu_228_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln189_fu_251_p2 == 1'd1) & (icmp_ln173_fu_228_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        q_array_ce0 = 1'b1;
    end else begin
        q_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln173_fu_228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln189_fu_251_p2 == 1'd1)) begin
            q_array_d0 = zext_ln169_cast_fu_208_p1;
        end else if ((icmp_ln189_fu_251_p2 == 1'd0)) begin
            q_array_d0 = 16'd65535;
        end else begin
            q_array_d0 = 'bx;
        end
    end else begin
        q_array_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln189_fu_251_p2 == 1'd0) & (icmp_ln173_fu_228_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln189_fu_251_p2 == 1'd1) & (icmp_ln173_fu_228_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        q_array_we0 = 1'b1;
    end else begin
        q_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        s_array_ce0 = 1'b1;
    end else begin
        s_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln173_fu_228_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        s_array_we0 = 1'b1;
    end else begin
        s_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln173_fu_228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln195_fu_257_p2 == 1'd1)) begin
            sigma_array_address0 = idxprom52_cast_fu_213_p1;
        end else if ((icmp_ln195_fu_257_p2 == 1'd0)) begin
            sigma_array_address0 = zext_ln173_fu_240_p1;
        end else begin
            sigma_array_address0 = 'bx;
        end
    end else begin
        sigma_array_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln173_fu_228_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln195_fu_257_p2 == 1'd1)) | ((icmp_ln173_fu_228_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln195_fu_257_p2 == 1'd0)))) begin
        sigma_array_ce0 = 1'b1;
    end else begin
        sigma_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln173_fu_228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln195_fu_257_p2 == 1'd1)) begin
            sigma_array_d0 = 32'd1;
        end else if ((icmp_ln195_fu_257_p2 == 1'd0)) begin
            sigma_array_d0 = 32'd0;
        end else begin
            sigma_array_d0 = 'bx;
        end
    end else begin
        sigma_array_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln173_fu_228_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln195_fu_257_p2 == 1'd1)) | ((icmp_ln173_fu_228_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln195_fu_257_p2 == 1'd0)))) begin
        sigma_array_we0 = 1'b1;
    end else begin
        sigma_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln173_fu_228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln195_fu_257_p2 == 1'd1)) begin
            travel_address0 = idxprom52_cast_fu_213_p1;
        end else if ((icmp_ln195_fu_257_p2 == 1'd0)) begin
            travel_address0 = zext_ln173_fu_240_p1;
        end else begin
            travel_address0 = 'bx;
        end
    end else begin
        travel_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln173_fu_228_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln195_fu_257_p2 == 1'd1)) | ((icmp_ln173_fu_228_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln195_fu_257_p2 == 1'd0)))) begin
        travel_ce0 = 1'b1;
    end else begin
        travel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln173_fu_228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln195_fu_257_p2 == 1'd1)) begin
            travel_d0 = 1'd1;
        end else if ((icmp_ln195_fu_257_p2 == 1'd0)) begin
            travel_d0 = 1'd0;
        end else begin
            travel_d0 = 'bx;
        end
    end else begin
        travel_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln173_fu_228_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln195_fu_257_p2 == 1'd1)) | ((icmp_ln173_fu_228_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln195_fu_257_p2 == 1'd0)))) begin
        travel_we0 = 1'b1;
    end else begin
        travel_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln173_fu_234_p2 = (ap_sig_allocacmp_j_2 + 12'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_enable_operation_32 = (ap_predicate_op32_store_state1 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_34 = (ap_predicate_op34_store_state1 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_39 = (ap_predicate_op39_store_state1 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_41 = (ap_predicate_op41_store_state1 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_43 = (ap_predicate_op43_store_state1 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_45 = (ap_predicate_op45_store_state1 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_46 = (ap_predicate_op46_store_state1 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_47 = (ap_predicate_op47_store_state1 == 1'b1);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = 1'b0;

always @ (*) begin
    ap_enable_state1_pp0_iter0_stage0 = ((1'b1 == ap_CS_fsm_state1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op32_store_state1 = ((icmp_ln189_fu_251_p2 == 1'd0) & (icmp_ln173_fu_228_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op34_store_state1 = ((icmp_ln189_fu_251_p2 == 1'd1) & (icmp_ln173_fu_228_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op39_store_state1 = ((icmp_ln173_fu_228_p2 == 1'd0) & (icmp_ln195_fu_257_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op41_store_state1 = ((icmp_ln173_fu_228_p2 == 1'd0) & (icmp_ln195_fu_257_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op43_store_state1 = ((icmp_ln173_fu_228_p2 == 1'd0) & (icmp_ln195_fu_257_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op45_store_state1 = ((icmp_ln173_fu_228_p2 == 1'd0) & (icmp_ln195_fu_257_p2 == 1'd1));
end

always @ (*) begin
    ap_predicate_op46_store_state1 = ((icmp_ln173_fu_228_p2 == 1'd0) & (icmp_ln195_fu_257_p2 == 1'd1));
end

always @ (*) begin
    ap_predicate_op47_store_state1 = ((icmp_ln173_fu_228_p2 == 1'd0) & (icmp_ln195_fu_257_p2 == 1'd1));
end

assign delta_array_address0 = zext_ln173_fu_240_p1;

assign delta_array_d0 = 32'd0;

assign icmp_ln173_fu_228_p2 = ((ap_sig_allocacmp_j_2 == 12'd3534) ? 1'b1 : 1'b0);

assign icmp_ln189_fu_251_p2 = ((ap_sig_allocacmp_j_2 == 12'd0) ? 1'b1 : 1'b0);

assign icmp_ln195_fu_257_p2 = ((ap_sig_allocacmp_j_2 == i_2) ? 1'b1 : 1'b0);

assign idxprom52_cast_fu_213_p1 = idxprom52;

assign p_index_array_address0 = zext_ln173_fu_240_p1;

assign p_index_array_d0 = 8'd0;

assign s_array_address0 = zext_ln173_fu_240_p1;

assign s_array_d0 = 16'd65535;

assign zext_ln169_cast_fu_208_p1 = zext_ln169;

assign zext_ln173_fu_240_p1 = ap_sig_allocacmp_j_2;

endmodule //dut_dut_Pipeline_Clear_loop
