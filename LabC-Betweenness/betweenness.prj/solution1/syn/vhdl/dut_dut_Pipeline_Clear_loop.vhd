-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_dut_Pipeline_Clear_loop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    idxprom52 : IN STD_LOGIC_VECTOR (11 downto 0);
    i_2 : IN STD_LOGIC_VECTOR (11 downto 0);
    zext_ln169 : IN STD_LOGIC_VECTOR (11 downto 0);
    dist_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    dist_array_ce0 : OUT STD_LOGIC;
    dist_array_we0 : OUT STD_LOGIC;
    dist_array_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    sigma_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sigma_array_ce0 : OUT STD_LOGIC;
    sigma_array_we0 : OUT STD_LOGIC;
    sigma_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    travel_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    travel_ce0 : OUT STD_LOGIC;
    travel_we0 : OUT STD_LOGIC;
    travel_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    s_array_ce0 : OUT STD_LOGIC;
    s_array_we0 : OUT STD_LOGIC;
    s_array_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    p_index_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    p_index_array_ce0 : OUT STD_LOGIC;
    p_index_array_we0 : OUT STD_LOGIC;
    p_index_array_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    delta_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    delta_array_ce0 : OUT STD_LOGIC;
    delta_array_we0 : OUT STD_LOGIC;
    delta_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    q_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    q_array_ce0 : OUT STD_LOGIC;
    q_array_we0 : OUT STD_LOGIC;
    q_array_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of dut_dut_Pipeline_Clear_loop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv12_DCE : STD_LOGIC_VECTOR (11 downto 0) := "110111001110";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln173_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal idxprom52_cast_fu_213_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln173_fu_240_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln189_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln195_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_60 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln173_fu_234_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln169_cast_fu_208_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_predicate_op32_store_state1 : BOOLEAN;
    signal ap_enable_operation_32 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_state1_pp0_iter0_stage0 : BOOLEAN;
    signal ap_predicate_op34_store_state1 : BOOLEAN;
    signal ap_enable_operation_34 : BOOLEAN;
    signal ap_predicate_op39_store_state1 : BOOLEAN;
    signal ap_enable_operation_39 : BOOLEAN;
    signal ap_predicate_op45_store_state1 : BOOLEAN;
    signal ap_enable_operation_45 : BOOLEAN;
    signal ap_predicate_op41_store_state1 : BOOLEAN;
    signal ap_enable_operation_41 : BOOLEAN;
    signal ap_predicate_op46_store_state1 : BOOLEAN;
    signal ap_enable_operation_46 : BOOLEAN;
    signal ap_predicate_op43_store_state1 : BOOLEAN;
    signal ap_enable_operation_43 : BOOLEAN;
    signal ap_predicate_op47_store_state1 : BOOLEAN;
    signal ap_enable_operation_47 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dut_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component dut_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    j_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln173_fu_228_p2 = ap_const_lv1_0)) then 
                    j_fu_60 <= add_ln173_fu_234_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_60 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln173_fu_234_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_2) + unsigned(ap_const_lv12_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln173_fu_228_p2, ap_start_int)
    begin
        if (((icmp_ln173_fu_228_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_enable_operation_32_assign_proc : process(ap_predicate_op32_store_state1)
    begin
                ap_enable_operation_32 <= (ap_predicate_op32_store_state1 = ap_const_boolean_1);
    end process;


    ap_enable_operation_34_assign_proc : process(ap_predicate_op34_store_state1)
    begin
                ap_enable_operation_34 <= (ap_predicate_op34_store_state1 = ap_const_boolean_1);
    end process;


    ap_enable_operation_39_assign_proc : process(ap_predicate_op39_store_state1)
    begin
                ap_enable_operation_39 <= (ap_predicate_op39_store_state1 = ap_const_boolean_1);
    end process;


    ap_enable_operation_41_assign_proc : process(ap_predicate_op41_store_state1)
    begin
                ap_enable_operation_41 <= (ap_predicate_op41_store_state1 = ap_const_boolean_1);
    end process;


    ap_enable_operation_43_assign_proc : process(ap_predicate_op43_store_state1)
    begin
                ap_enable_operation_43 <= (ap_predicate_op43_store_state1 = ap_const_boolean_1);
    end process;


    ap_enable_operation_45_assign_proc : process(ap_predicate_op45_store_state1)
    begin
                ap_enable_operation_45 <= (ap_predicate_op45_store_state1 = ap_const_boolean_1);
    end process;


    ap_enable_operation_46_assign_proc : process(ap_predicate_op46_store_state1)
    begin
                ap_enable_operation_46 <= (ap_predicate_op46_store_state1 = ap_const_boolean_1);
    end process;


    ap_enable_operation_47_assign_proc : process(ap_predicate_op47_store_state1)
    begin
                ap_enable_operation_47 <= (ap_predicate_op47_store_state1 = ap_const_boolean_1);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;

    ap_enable_state1_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, ap_enable_reg_pp0_iter0)
    begin
                ap_enable_state1_pp0_iter0_stage0 <= ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_predicate_op32_store_state1_assign_proc : process(icmp_ln173_fu_228_p2, icmp_ln189_fu_251_p2)
    begin
                ap_predicate_op32_store_state1 <= ((icmp_ln189_fu_251_p2 = ap_const_lv1_0) and (icmp_ln173_fu_228_p2 = ap_const_lv1_0));
    end process;


    ap_predicate_op34_store_state1_assign_proc : process(icmp_ln173_fu_228_p2, icmp_ln189_fu_251_p2)
    begin
                ap_predicate_op34_store_state1 <= ((icmp_ln189_fu_251_p2 = ap_const_lv1_1) and (icmp_ln173_fu_228_p2 = ap_const_lv1_0));
    end process;


    ap_predicate_op39_store_state1_assign_proc : process(icmp_ln173_fu_228_p2, icmp_ln195_fu_257_p2)
    begin
                ap_predicate_op39_store_state1 <= ((icmp_ln173_fu_228_p2 = ap_const_lv1_0) and (icmp_ln195_fu_257_p2 = ap_const_lv1_0));
    end process;


    ap_predicate_op41_store_state1_assign_proc : process(icmp_ln173_fu_228_p2, icmp_ln195_fu_257_p2)
    begin
                ap_predicate_op41_store_state1 <= ((icmp_ln173_fu_228_p2 = ap_const_lv1_0) and (icmp_ln195_fu_257_p2 = ap_const_lv1_0));
    end process;


    ap_predicate_op43_store_state1_assign_proc : process(icmp_ln173_fu_228_p2, icmp_ln195_fu_257_p2)
    begin
                ap_predicate_op43_store_state1 <= ((icmp_ln173_fu_228_p2 = ap_const_lv1_0) and (icmp_ln195_fu_257_p2 = ap_const_lv1_0));
    end process;


    ap_predicate_op45_store_state1_assign_proc : process(icmp_ln173_fu_228_p2, icmp_ln195_fu_257_p2)
    begin
                ap_predicate_op45_store_state1 <= ((icmp_ln173_fu_228_p2 = ap_const_lv1_0) and (icmp_ln195_fu_257_p2 = ap_const_lv1_1));
    end process;


    ap_predicate_op46_store_state1_assign_proc : process(icmp_ln173_fu_228_p2, icmp_ln195_fu_257_p2)
    begin
                ap_predicate_op46_store_state1 <= ((icmp_ln173_fu_228_p2 = ap_const_lv1_0) and (icmp_ln195_fu_257_p2 = ap_const_lv1_1));
    end process;


    ap_predicate_op47_store_state1_assign_proc : process(icmp_ln173_fu_228_p2, icmp_ln195_fu_257_p2)
    begin
                ap_predicate_op47_store_state1 <= ((icmp_ln173_fu_228_p2 = ap_const_lv1_0) and (icmp_ln195_fu_257_p2 = ap_const_lv1_1));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_2_assign_proc : process(ap_CS_fsm_state1, j_fu_60, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_2 <= ap_const_lv12_0;
        else 
            ap_sig_allocacmp_j_2 <= j_fu_60;
        end if; 
    end process;

    delta_array_address0 <= zext_ln173_fu_240_p1(12 - 1 downto 0);

    delta_array_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delta_array_ce0 <= ap_const_logic_1;
        else 
            delta_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delta_array_d0 <= ap_const_lv32_0;

    delta_array_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln173_fu_228_p2, ap_start_int)
    begin
        if (((icmp_ln173_fu_228_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            delta_array_we0 <= ap_const_logic_1;
        else 
            delta_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dist_array_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln173_fu_228_p2, idxprom52_cast_fu_213_p1, zext_ln173_fu_240_p1, icmp_ln195_fu_257_p2)
    begin
        if (((icmp_ln173_fu_228_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
            if ((icmp_ln195_fu_257_p2 = ap_const_lv1_1)) then 
                dist_array_address0 <= idxprom52_cast_fu_213_p1(12 - 1 downto 0);
            elsif ((icmp_ln195_fu_257_p2 = ap_const_lv1_0)) then 
                dist_array_address0 <= zext_ln173_fu_240_p1(12 - 1 downto 0);
            else 
                dist_array_address0 <= "XXXXXXXXXXXX";
            end if;
        else 
            dist_array_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    dist_array_ce0_assign_proc : process(ap_CS_fsm_state1, icmp_ln173_fu_228_p2, icmp_ln195_fu_257_p2, ap_start_int)
    begin
        if ((((icmp_ln173_fu_228_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln195_fu_257_p2 = ap_const_lv1_1)) or ((icmp_ln173_fu_228_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln195_fu_257_p2 = ap_const_lv1_0)))) then 
            dist_array_ce0 <= ap_const_logic_1;
        else 
            dist_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dist_array_d0_assign_proc : process(ap_CS_fsm_state1, icmp_ln173_fu_228_p2, icmp_ln195_fu_257_p2)
    begin
        if (((icmp_ln173_fu_228_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
            if ((icmp_ln195_fu_257_p2 = ap_const_lv1_1)) then 
                dist_array_d0 <= ap_const_lv16_0;
            elsif ((icmp_ln195_fu_257_p2 = ap_const_lv1_0)) then 
                dist_array_d0 <= ap_const_lv16_FFFF;
            else 
                dist_array_d0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            dist_array_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dist_array_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln173_fu_228_p2, icmp_ln195_fu_257_p2, ap_start_int)
    begin
        if ((((icmp_ln173_fu_228_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln195_fu_257_p2 = ap_const_lv1_1)) or ((icmp_ln173_fu_228_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln195_fu_257_p2 = ap_const_lv1_0)))) then 
            dist_array_we0 <= ap_const_logic_1;
        else 
            dist_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln173_fu_228_p2 <= "1" when (ap_sig_allocacmp_j_2 = ap_const_lv12_DCE) else "0";
    icmp_ln189_fu_251_p2 <= "1" when (ap_sig_allocacmp_j_2 = ap_const_lv12_0) else "0";
    icmp_ln195_fu_257_p2 <= "1" when (ap_sig_allocacmp_j_2 = i_2) else "0";
    idxprom52_cast_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idxprom52),64));
    p_index_array_address0 <= zext_ln173_fu_240_p1(12 - 1 downto 0);

    p_index_array_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_index_array_ce0 <= ap_const_logic_1;
        else 
            p_index_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_index_array_d0 <= ap_const_lv8_0;

    p_index_array_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln173_fu_228_p2, ap_start_int)
    begin
        if (((icmp_ln173_fu_228_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_index_array_we0 <= ap_const_logic_1;
        else 
            p_index_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    q_array_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln173_fu_228_p2, zext_ln173_fu_240_p1, icmp_ln189_fu_251_p2)
    begin
        if (((icmp_ln173_fu_228_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
            if ((icmp_ln189_fu_251_p2 = ap_const_lv1_1)) then 
                q_array_address0 <= ap_const_lv12_0;
            elsif ((icmp_ln189_fu_251_p2 = ap_const_lv1_0)) then 
                q_array_address0 <= zext_ln173_fu_240_p1(12 - 1 downto 0);
            else 
                q_array_address0 <= "XXXXXXXXXXXX";
            end if;
        else 
            q_array_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    q_array_ce0_assign_proc : process(ap_CS_fsm_state1, icmp_ln173_fu_228_p2, icmp_ln189_fu_251_p2, ap_start_int)
    begin
        if ((((icmp_ln189_fu_251_p2 = ap_const_lv1_0) and (icmp_ln173_fu_228_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln189_fu_251_p2 = ap_const_lv1_1) and (icmp_ln173_fu_228_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            q_array_ce0 <= ap_const_logic_1;
        else 
            q_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    q_array_d0_assign_proc : process(ap_CS_fsm_state1, icmp_ln173_fu_228_p2, icmp_ln189_fu_251_p2, zext_ln169_cast_fu_208_p1)
    begin
        if (((icmp_ln173_fu_228_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
            if ((icmp_ln189_fu_251_p2 = ap_const_lv1_1)) then 
                q_array_d0 <= zext_ln169_cast_fu_208_p1;
            elsif ((icmp_ln189_fu_251_p2 = ap_const_lv1_0)) then 
                q_array_d0 <= ap_const_lv16_FFFF;
            else 
                q_array_d0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            q_array_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    q_array_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln173_fu_228_p2, icmp_ln189_fu_251_p2, ap_start_int)
    begin
        if ((((icmp_ln189_fu_251_p2 = ap_const_lv1_0) and (icmp_ln173_fu_228_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln189_fu_251_p2 = ap_const_lv1_1) and (icmp_ln173_fu_228_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            q_array_we0 <= ap_const_logic_1;
        else 
            q_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    s_array_address0 <= zext_ln173_fu_240_p1(12 - 1 downto 0);

    s_array_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_array_ce0 <= ap_const_logic_1;
        else 
            s_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    s_array_d0 <= ap_const_lv16_FFFF;

    s_array_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln173_fu_228_p2, ap_start_int)
    begin
        if (((icmp_ln173_fu_228_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_array_we0 <= ap_const_logic_1;
        else 
            s_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sigma_array_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln173_fu_228_p2, idxprom52_cast_fu_213_p1, zext_ln173_fu_240_p1, icmp_ln195_fu_257_p2)
    begin
        if (((icmp_ln173_fu_228_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
            if ((icmp_ln195_fu_257_p2 = ap_const_lv1_1)) then 
                sigma_array_address0 <= idxprom52_cast_fu_213_p1(12 - 1 downto 0);
            elsif ((icmp_ln195_fu_257_p2 = ap_const_lv1_0)) then 
                sigma_array_address0 <= zext_ln173_fu_240_p1(12 - 1 downto 0);
            else 
                sigma_array_address0 <= "XXXXXXXXXXXX";
            end if;
        else 
            sigma_array_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sigma_array_ce0_assign_proc : process(ap_CS_fsm_state1, icmp_ln173_fu_228_p2, icmp_ln195_fu_257_p2, ap_start_int)
    begin
        if ((((icmp_ln173_fu_228_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln195_fu_257_p2 = ap_const_lv1_1)) or ((icmp_ln173_fu_228_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln195_fu_257_p2 = ap_const_lv1_0)))) then 
            sigma_array_ce0 <= ap_const_logic_1;
        else 
            sigma_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sigma_array_d0_assign_proc : process(ap_CS_fsm_state1, icmp_ln173_fu_228_p2, icmp_ln195_fu_257_p2)
    begin
        if (((icmp_ln173_fu_228_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
            if ((icmp_ln195_fu_257_p2 = ap_const_lv1_1)) then 
                sigma_array_d0 <= ap_const_lv32_1;
            elsif ((icmp_ln195_fu_257_p2 = ap_const_lv1_0)) then 
                sigma_array_d0 <= ap_const_lv32_0;
            else 
                sigma_array_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            sigma_array_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sigma_array_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln173_fu_228_p2, icmp_ln195_fu_257_p2, ap_start_int)
    begin
        if ((((icmp_ln173_fu_228_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln195_fu_257_p2 = ap_const_lv1_1)) or ((icmp_ln173_fu_228_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln195_fu_257_p2 = ap_const_lv1_0)))) then 
            sigma_array_we0 <= ap_const_logic_1;
        else 
            sigma_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    travel_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln173_fu_228_p2, idxprom52_cast_fu_213_p1, zext_ln173_fu_240_p1, icmp_ln195_fu_257_p2)
    begin
        if (((icmp_ln173_fu_228_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
            if ((icmp_ln195_fu_257_p2 = ap_const_lv1_1)) then 
                travel_address0 <= idxprom52_cast_fu_213_p1(12 - 1 downto 0);
            elsif ((icmp_ln195_fu_257_p2 = ap_const_lv1_0)) then 
                travel_address0 <= zext_ln173_fu_240_p1(12 - 1 downto 0);
            else 
                travel_address0 <= "XXXXXXXXXXXX";
            end if;
        else 
            travel_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    travel_ce0_assign_proc : process(ap_CS_fsm_state1, icmp_ln173_fu_228_p2, icmp_ln195_fu_257_p2, ap_start_int)
    begin
        if ((((icmp_ln173_fu_228_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln195_fu_257_p2 = ap_const_lv1_1)) or ((icmp_ln173_fu_228_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln195_fu_257_p2 = ap_const_lv1_0)))) then 
            travel_ce0 <= ap_const_logic_1;
        else 
            travel_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    travel_d0_assign_proc : process(ap_CS_fsm_state1, icmp_ln173_fu_228_p2, icmp_ln195_fu_257_p2)
    begin
        if (((icmp_ln173_fu_228_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
            if ((icmp_ln195_fu_257_p2 = ap_const_lv1_1)) then 
                travel_d0 <= ap_const_lv1_1;
            elsif ((icmp_ln195_fu_257_p2 = ap_const_lv1_0)) then 
                travel_d0 <= ap_const_lv1_0;
            else 
                travel_d0 <= "X";
            end if;
        else 
            travel_d0 <= "X";
        end if; 
    end process;


    travel_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln173_fu_228_p2, icmp_ln195_fu_257_p2, ap_start_int)
    begin
        if ((((icmp_ln173_fu_228_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln195_fu_257_p2 = ap_const_lv1_1)) or ((icmp_ln173_fu_228_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln195_fu_257_p2 = ap_const_lv1_0)))) then 
            travel_we0 <= ap_const_logic_1;
        else 
            travel_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln169_cast_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln169),16));
    zext_ln173_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j_2),64));
end behav;
